<span class="st0">'''
    FibonacciBasic, the OOP approach
'''</span>
<span class="kw1">class</span> Fibonacci:
    _f <span class="sy0">=</span> <span class="br0">&#91;</span><span class="br0">&#93;</span>
&nbsp;
    <span class="kw1">def</span> <span class="kw4">__init__</span><span class="br0">&#40;</span><span class="kw2">self</span><span class="sy0">,</span> n<span class="sy0">=</span><span class="nu0">2000</span><span class="br0">&#41;</span>:
        a<span class="sy0">,</span> b <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">,</span> <span class="nu0">1</span>
        <span class="kw1">while</span> b<span class="sy0">&lt;</span>n:
            <span class="kw2">self</span>._f.<span class="me1">append</span><span class="br0">&#40;</span>a<span class="br0">&#41;</span>
            a<span class="sy0">,</span> b <span class="sy0">=</span> b<span class="sy0">,</span> a+b
&nbsp;
    <span class="kw1">def</span> <span class="kw2">list</span><span class="br0">&#40;</span><span class="kw2">self</span><span class="br0">&#41;</span>:
        <span class="kw1">print</span> <span class="kw2">self</span>._f
&nbsp;
<span class="kw1">if</span> __name__ <span class="sy0">==</span> <span class="st0">&quot;__main__&quot;</span>:
    s <span class="sy0">=</span> Fibonacci<span class="br0">&#40;</span><span class="nu0">10000</span><span class="br0">&#41;</span>
    s.<span class="kw2">list</span><span class="br0">&#40;</span><span class="br0">&#41;</span>