
<h1 class="sectionedit1" id="burned_area_mapping_exercise">Burned area mapping exercise</h1>
<div class="level1">

<p>
<a href="http://grass.fbk.eu/" class="urlextern" target="blanc" title="http://grass.fbk.eu/" rel="nofollow noopener">GRASS</a> can be used to perform remote sensing image analysis in terms of preprocessing, classification and validation. 
The image analysis commands start with the suffix “ i. ” (e.g., i.class , i.maxlik). They can be run in the bash shell and can be applied to any grass raster layer.<br/>

The commands are listed and described in the <a href="http://grass.osgeo.org/grass64/manuals/html64_user/imagery.html" class="urlextern" target="blanc" title="http://grass.osgeo.org/grass64/manuals/html64_user/imagery.html" rel="nofollow noopener"> Reference Manual </a>.<br/>

<br/>

<strong> Image classification <strong><br/>

<br/>

The following table summarizes the most important GRASS commands for Classification.
<br/>

^ ^radiometric unsupervised^radiometric supervised^radiometric supervised^radiometric &amp; geometric supervised^
|Image Preprocessing|r.seg|r.seg|r.seg|r.seg|
|Preprocessing|i.cluster|i.class (monitor digitizing)|i.gensig (using training maps)|i.gensigset(using training maps)|
|Classification|i.maxlik|i.maxlik|i.maxlik| i.smap| 
|Remarks|automated from image statistics|requires training pixel collection|requires training pixel collection|requires training pixel collection|
<br/>

  * The <strong>preprocessing</strong> phase captures spectral signatures for each land cover class for later use by the classifier algorithm.
  * The <strong>classification</strong> phase performs the classification based on the signatures collected in the previous step.
<br/>


===== Using WELD data for burned area mapping =====
<br/>

In order to understand the structure architecture of GRASS and the main modules and commands you can download the <a href="http://www.spatial-ecology.net/ost4sem/lecture/grass_intro.pdf" class="urlextern" target="blanc" title="http://www.spatial-ecology.net/ost4sem/lecture/grass_intro.pdf" rel="nofollow noopener"> Introduction to GRASS</a> presentation and see the <a href="http://www.spatial-ecology.net/dokuwiki/doku.php?id=wiki:grass" class="urlextern" target="blanc" title="http://www.spatial-ecology.net/dokuwiki/doku.php?id=wiki:grass" rel="nofollow noopener"> Hands on GRASS: Geographic Resources Analysis Support System </a> page.
==== Create New Mapset in GRASS ====
<br/>

Start Grass
   grass  -wxpython
Create new grass database, location and mapset using the grass Location Wizard button. Insert the options as reported in the below screenshots.<br/>

<br/>

|<a href="/dokuwiki/lib/exe/detail.php?id=wiki%3Agrass_rs_gui&amp;media=wiki:grassdb.png" class="media" title="wiki:grassdb.png"><img src="/dokuwiki/lib/exe/fetch.php?w=400&amp;tok=225027&amp;media=wiki:grassdb.png" class="media" alt="" width="400" /></a>|<a href="/dokuwiki/lib/exe/detail.php?id=wiki%3Agrass_rs_gui&amp;media=wiki:location.png" class="media" title="wiki:location.png"><img src="/dokuwiki/lib/exe/fetch.php?w=600&amp;tok=02adca&amp;media=wiki:location.png" class="media" alt="" width="600" /></a>|<br/>

<br/>

Enter <strong>PROJ.4 parameters string</strong> under the  “Choose method for specifying georeferencing parameters:“<br/>

+proj=aea +lat<em>1=55 +lat</em>2=65 +lat<em>0=50 +lon</em>0=-154 +x<em>0=0 +y</em>0=0 +no<em>defs +a=6378137 +rf=298.257223563 +towgs84=0.000,0.000,0.000 +to</em>meter=1 <br/>

<br/>

|<a href="/dokuwiki/lib/exe/detail.php?id=wiki%3Agrass_rs_gui&amp;media=wiki:specify_prj.png" class="media" title="wiki:specify_prj.png"><img src="/dokuwiki/lib/exe/fetch.php?w=500&amp;tok=be60aa&amp;media=wiki:specify_prj.png" class="media" alt="" width="500" /></a>|<a href="/dokuwiki/lib/exe/detail.php?id=wiki%3Agrass_rs_gui&amp;media=wiki:proj4.png" class="media" title="wiki:proj4.png"><img src="/dokuwiki/lib/exe/fetch.php?w=500&amp;tok=1a9290&amp;media=wiki:proj4.png" class="media" alt="" width="500" /></a>|<br/>

<br/>

|<a href="/dokuwiki/lib/exe/detail.php?id=wiki%3Agrass_rs_gui&amp;media=wiki:proj4_print.png" class="media" title="wiki:proj4_print.png"><img src="/dokuwiki/lib/exe/fetch.php?w=550&amp;tok=e43412&amp;media=wiki:proj4_print.png" class="media" alt="" width="550" /></a>|<a href="/dokuwiki/lib/exe/detail.php?id=wiki%3Agrass_rs_gui&amp;media=wiki:start_grass.png" class="media" title="wiki:start_grass.png"><img src="/dokuwiki/lib/exe/fetch.php?w=450&amp;tok=7b4ebc&amp;media=wiki:start_grass.png" class="media" alt="" width="450" /></a>|<br/>

<br/>

At this point the <strong>GIS Data Directory<strong>, the <strong>Project location</strong> and the <strong>Accessible mapset</strong> have been created and it is possible to start grass by the <strong>Start GRASS</strong> button.<br/>

The following screenshots show the GRASS wxpython <abbr title="Graphical User Interface">GUI</abbr>. It possible to navigate in the tools bar and select the appropriate window module. Each module is a graphical tool of a command with its options. At the bottom of each module you can see the command line syntax that you can use to create a script routine.<br/>

<br/>

|<a href="/dokuwiki/lib/exe/detail.php?id=wiki%3Agrass_rs_gui&amp;media=wiki:grass_gui.png" class="media" title="wiki:grass_gui.png"><img src="/dokuwiki/lib/exe/fetch.php?w=900&amp;tok=d38313&amp;media=wiki:grass_gui.png" class="media" alt="" width="900" /></a>|<br/>

<br/>

==== Importing data ====
<br/>

The created mapset is an empty environment where we can import the data:<br/>

Band1<em>TOA</em>REF.TIF Band2<em>TOA</em>REF.TIF  Band3<em>TOA</em>REF.TIF Band4<em>TOA</em>REF.TIF Band5<em>TOA</em>REF.TIF Band7<em>TOA</em>REF.TIF<br/>

stored in the /home/user/ost4sem/exercise/weld<em>data</em>processing/x6JIatZlSUMMER2008<br/>

<br/>

Open the Import raster data window as:<br/>

 &gt; File &gt; Import Raster Data &gt; Common Import Formats<br/>

and select the Band1<em>TOA</em>REF.TIF Band2<em>TOA</em>REF.TIF  Band3<em>TOA</em>REF.TIF Band4<em>TOA</em>REF.TIF Band5<em>TOA</em>REF.TIF Band7<em>TOA</em>REF.TIF<br/>

 file as reported in the following screenshot.<br/>

<br/>

|<a href="/dokuwiki/lib/exe/detail.php?id=wiki%3Agrass_rs_gui&amp;media=wiki:imp_data.png" class="media" title="wiki:imp_data.png"><img src="/dokuwiki/lib/exe/fetch.php?w=500&amp;tok=17a596&amp;media=wiki:imp_data.png" class="media" alt="" width="500" /></a>|<br/>

<br/>


==== Create RGB color map ====
<br/>

Open the i.landsat.rgb window by:<br/>

 &gt; Immagery &gt; Manage immage colors &gt; Color balance for RGB (command i.landsat.rgb).<br/>

and select the bands as reported in the following screenshots.<br/>

<br/>

|<a href="/dokuwiki/lib/exe/detail.php?id=wiki%3Agrass_rs_gui&amp;media=wiki:i.landsat.png" class="media" title="wiki:i.landsat.png"><img src="/dokuwiki/lib/exe/fetch.php?w=500&amp;tok=c9f1e5&amp;media=wiki:i.landsat.png" class="media" alt="" width="500" /></a>|
<br/>

Open the r.composite window by:<br/>

 &gt; Raster &gt; Manage colors &gt; Create RGB (command r.composite) <br/>

and select the bands as reported in the left side of following screenshots. 
Visualize the results by the GRASS wxpython <abbr title="Graphical User Interface">GUI</abbr> opening Band4<em>3</em>2<em>TOA</em>REF (right side screenshots).<br/>

<br/>

|<a href="/dokuwiki/lib/exe/detail.php?id=wiki%3Agrass_rs_gui&amp;media=wiki:r.composite.png" class="media" title="wiki:r.composite.png"><img src="/dokuwiki/lib/exe/fetch.php?w=500&amp;tok=db1982&amp;media=wiki:r.composite.png" class="media" alt="" width="500" /></a> |<a href="/dokuwiki/lib/exe/detail.php?id=wiki%3Agrass_rs_gui&amp;media=wiki:rgb_burnet.png" class="media" title="wiki:rgb_burnet.png"><img src="/dokuwiki/lib/exe/fetch.php?w=380&amp;tok=036540&amp;media=wiki:rgb_burnet.png" class="media" alt="" width="380" /></a>|<br/>

<br/>

==== Group the bands ====
<br/>

From this point is much easier to use the command line. Copy the line and insert it in the terminal.

   i.group group=Band<em>Multi</em>TOA<em>REF</em>group subgroup=Band<em>Multi</em>TOA<em>REF</em>subgroup input=Band1<em>TOA</em>REF,Band2<em>TOA</em>REF,Band3<em>TOA</em>REF,Band4<em>TOA</em>REF,Band5<em>TOA</em>REF,Band7<em>TOA</em>REF

==== Unsupervised classification ====
<br/>

Generate unsupervised statistics for 7 classes (you could select more classes, fewer tends not to work so well for these data):
&lt;code bash&gt;
i.cluster group=Band<em>Multi</em>TOA<em>REF</em>group subgroup=Band<em>Multi</em>TOA<em>REF</em>subgroup sig=Band<em>Multi</em>TOA<em>REF</em>sig4maxlClust classes=8  sample=10,10 reportfile=Band4<em>3</em>2<em>TOA</em>REF<em>report.txt
&lt;/code&gt;
Create the unsupervised classified image: 
&lt;code bash&gt;
g.remove rast=maxlikClust</em>map
i.maxlik  group=Band<em>Multi</em>TOA<em>REF</em>group subgroup=Band<em>Multi</em>TOA<em>REF</em>subgroup sig=Band<em>Multi</em>TOA<em>REF</em>sig4maxlClust class=maxlikClust<em>map<br/>
&lt;/code&gt;
Visualize the results using the GRASS wxpython <abbr title="Graphical User Interface">GUI</abbr> opening maxlikClust</em>map. Compare visually the classified map and the RGB layer.<br/>

As you can see, the unsupervised classification classifies the burned area into several classes.<br/>

<br/>

|<a href="/dokuwiki/lib/exe/detail.php?id=wiki%3Agrass_rs_gui&amp;media=wiki:unsuper.png" class="media" title="wiki:unsuper.png"><img src="/dokuwiki/lib/exe/fetch.php?w=400&amp;tok=27f165&amp;media=wiki:unsuper.png" class="media" alt="" width="400" /></a>|<br/>

<br/>

Let&#039;s try again now but with a supervised classifier to see if we can getter better results.<br/>

<br/>

==== Supervised classification ====
<br/>

For supervised classification you will need to create a shape file containing polygons where each polygon locates pixels that you think represent the different classes in the image (e.g., burned, unburned, cloud etc.) - these will be used as training data by the supervised classification algorithm.<br/>

<br/>

Create a training class polygon using qgis or GRASS wxpython. See the procedure in <a href="/dokuwiki/doku.php?id=wiki:wikiqgis:editqgis" class="wikilink1" title="wiki:wikiqgis:editqgis">Editing and creating a vector in QGIS </a><br/>

<br/>

If you cannot create it use ~/ost4sem/exercise/weld<em>data</em>processing/class<em>burned</em>example.shp by importing it into GRASS as:

&lt;code bash&gt;
g.remove vect=class ; v.db.droptable map=class 
v.in.ogr -o dsn=~/ost4sem/exercise/weld<em>data</em>processing/shp/class<em>burned.shp  output=class min</em>area=0.0001 snap=-1 
&lt;/code&gt;

Then convert the training class polygon to raster format:
&lt;code bash&gt;
v.to.rast in=class   out=class  use=attr column=burned labelcol=burned –o
&lt;/code&gt;

Visualize the training class polygon raster using the GRASS wxpython <abbr title="Graphical User Interface">GUI</abbr>. 

<br/>

Now perform supervised classification with either of the two following methods.<br/>

<br/>

== Supervised classification using maximum-likelihood discriminant analysis ==
<br/>

Generate statistics from the training areas, to be used with the i.maxlik command.
&lt;code bash&gt;
i.gensig  group=Band<em>Multi</em>TOA<em>REF</em>group subgroup=Band<em>Multi</em>TOA<em>REF</em>subgroup sig=Band<em>Multi</em>TOA<em>REF</em>sig4maxl trainingmap=class
&lt;/code&gt;
Perform the classification
&lt;code bash&gt;
i.maxlik group=Band<em>Multi</em>TOA<em>REF</em>group subgroup=Band<em>Multi</em>TOA<em>REF</em>subgroup sig=Band<em>Multi</em>TOA<em>REF</em>sig4maxl class=maxlik<em>map –o
&lt;/code&gt;
== Supervised classification using sequential maximum a posteriori (SMAP) estimation ==
<br/>

Generate statistics from the training areas, to be used with the i.smap command. This is a long process (1hour !), so run it during your break. 
&lt;code bash&gt;
i.gensigset group=Band</em>Multi<em>TOA</em>REF<em>group subgroup=Band</em>Multi<em>TOA</em>REF<em>subgroup sig=Band</em>Multi<em>TOA</em>REF<em>sig4smap training=class
&lt;/code&gt;
Perform the classification
&lt;code bash&gt;
i.smap   group=Band</em>Multi<em>TOA</em>REF<em>group subgroup=Band</em>Multi<em>TOA</em>REF<em>subgroup sig=Band</em>Multi<em>TOA</em>REF<em>sig4smap out=smap</em>map  –o 
&lt;/code&gt;
<br/>

You can visualize the maxlik<em>map and smap</em>map rasters using the GRASS wxpython <abbr title="Graphical User Interface">GUI</abbr>.<br/>

<br/>

For example, the following screenshots show maxlik<em>map (left) and smap</em>map (right) <br/>

<br/>

|<a href="/dokuwiki/lib/exe/detail.php?id=wiki%3Agrass_rs_gui&amp;media=wiki:maxlik.png" class="media" title="wiki:maxlik.png"><img src="/dokuwiki/lib/exe/fetch.php?w=400&amp;tok=452db3&amp;media=wiki:maxlik.png" class="media" alt="" width="400" /></a>| <a href="/dokuwiki/lib/exe/detail.php?id=wiki%3Agrass_rs_gui&amp;media=wiki:smap_map.png" class="media" title="wiki:smap_map.png"><img src="/dokuwiki/lib/exe/fetch.php?w=400&amp;tok=938efb&amp;media=wiki:smap_map.png" class="media" alt="" width="400" /></a>|
<br/>

==== Stand alone script ====
<br/>

The same exercise can be done by a stand alone script.<br/>


Create a new grass location alaska2.
&lt;code bash&gt;
   cd ~/ost4sem/exercise/weld<em>data</em>processing/x6JIatZlSUMMER2008
   bash ~/ost4sem/exercise/basic<em>adv</em>grass/create<em>location.sh Band1</em>TOA<em>REF.TIF alaska2 /home/user/ost4sem/exercise/weld</em>data<em>processing
&lt;/code&gt;
Start grass manually.
&lt;code bash&gt;
   grass64 -wxpython /home/user/ost4sem/exercise/weld</em>data<em>processing/alaska2/PERMANENT
&lt;/code&gt;
Import all the data by a loop:
&lt;code bash&gt;
for file in *</em>TOA_REF.TIF ; do 
    RAST=<code>basename $file .TIF</code>
    r.in.gdal in=$file  out=$RAST 
done
&lt;/code&gt;
Run the previous steps line by line and see the results with the GRASS wxpython <abbr title="Graphical User Interface">GUI</abbr>.

&lt;code bash&gt;
i.group group=Band<em>Multi</em>TOA<em>REF</em>group subgroup=Band<em>Multi</em>TOA<em>REF</em>subgroup input=Band1<em>TOA</em>REF,Band2<em>TOA</em>REF,Band3<em>TOA</em>REF,Band4<em>TOA</em>REF,Band5<em>TOA</em>REF,Band7<em>TOA</em>REF
i.cluster group=Band<em>Multi</em>TOA<em>REF</em>group subgroup=Band<em>Multi</em>TOA<em>REF</em>subgroup sig=Band<em>Multi</em>TOA<em>REF</em>sig4maxlClust classes=8  sample=10,10 reportfile=Band4<em>3</em>2<em>TOA</em>REF_report.txt

g.remove rast=maxlikClust<em>map
i.maxlik  group=Band</em>Multi<em>TOA</em>REF<em>group subgroup=Band</em>Multi<em>TOA</em>REF<em>subgroup sig=Band</em>Multi<em>TOA</em>REF<em>sig4maxlClust class=maxlikClust</em>map<br/>


g.remove vect=class ; v.db.droptable map=class 
v.in.ogr -o dsn=~/ost4sem/exercise/weld<em>data</em>processing/shp/class<em>burned.shp  output=class min</em>area=0.0001 snap=-1 
v.to.rast in=class   out=class  use=attr column=burned labelcol=burned –o


i.gensig  group=Band<em>Multi</em>TOA<em>REF</em>group subgroup=Band<em>Multi</em>TOA<em>REF</em>subgroup sig=Band<em>Multi</em>TOA<em>REF</em>sig4maxl trainingmap=class
i.maxlik group=Band<em>Multi</em>TOA<em>REF</em>group subgroup=Band<em>Multi</em>TOA<em>REF</em>subgroup sig=Band<em>Multi</em>TOA<em>REF</em>sig4maxl class=maxlik_map –o

i.gensigset group=Band<em>Multi</em>TOA<em>REF</em>group subgroup=Band<em>Multi</em>TOA<em>REF</em>subgroup sig=Band<em>Multi</em>TOA<em>REF</em>sig4smap training=class
i.smap   group=Band<em>Multi</em>TOA<em>REF</em>group subgroup=Band<em>Multi</em>TOA<em>REF</em>subgroup sig=Band<em>Multi</em>TOA<em>REF</em>sig4smap out=smap_map  –o 
&lt;/code&gt;








</p>

</div>
