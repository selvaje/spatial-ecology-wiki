
<h1 class="sectionedit1" id="burned_area_mapping_using_support_vector_machine_and_combined_segmentation_random_forest_classifiers">Burned Area Mapping using Support Vector Machine and Combined Segmentation Random Forest classifiers</h1>
<div class="level1">

<p>
The goal of this exercise is to demonstrate how to use Open Source classifiers. We will focus on illustrating command syntax rather than on generating accurate classification results. A more complex script would generate more accurate results but is inappropriate for the time we have in this training session.<br/>

<br/>

This exercise will use several commands from the following open source programming languages:<br/>

</p>
<ul>
<li class="level1"><div class="li"> <a href="http://en.wikipedia.org/wiki/Bash_%28Unix_shell%29" class="urlextern" target="blanc" title="http://en.wikipedia.org/wiki/Bash_%28Unix_shell%29" rel="nofollow noopener"> BASH </a> a common Linux scripting language.</div>
</li>
<li class="level1"><div class="li"> <a href="http://en.wikipedia.org/wiki/AWK" class="urlextern" target="blanc" title="http://en.wikipedia.org/wiki/AWK" rel="nofollow noopener"> AWK </a> a scripting language typically use for text data manipulation.</div>
</li>
<li class="level1"><div class="li"> <a href="http://en.wikipedia.org/wiki/R_Statistics" class="urlextern" target="blanc" title="http://en.wikipedia.org/wiki/R_Statistics" rel="nofollow noopener"> R </a> a programming language and software environment for statistical computing and graphics.</div>
</li>
<li class="level1"><div class="li"> <a href="http://en.wikipedia.org/wiki/Gdal" class="urlextern" target="blanc" title="http://en.wikipedia.org/wiki/Gdal" rel="nofollow noopener"> GDAL/OGR </a> a library for reading and writing raster/vector geospatial data formats.</div>
</li>
<li class="level1"><div class="li"> <a href="http://km.fao.org/OFwiki/index.php/Open_Foris_Geospatial_Toolkit" class="urlextern" target="blanc" title="http://km.fao.org/OFwiki/index.php/Open_Foris_Geospatial_Toolkit" rel="nofollow noopener"> Open Foris Geospatial Toolkit </a> a collection of prototype command-line utilities for processing of geographical data.</div>
</li>
<li class="level1"><div class="li"> <a href="http://spatial-ecology.net/dokuwiki/doku.php?id=wiki:pk_tools" class="urlextern" target="blanc" title="http://spatial-ecology.net/dokuwiki/doku.php?id=wiki:pk_tools" rel="nofollow noopener"> PKTOOLS </a> a collection of programs written by Pieter Kempeneers in C++ to perform operations on raster images.</div>
</li>
</ul>

<p>
<br/>

</p>
<ul>
<li class="level1"><div class="li"> <a href="http://kate-editor.org/" class="urlextern" target="blanc" title="http://kate-editor.org/" rel="nofollow noopener"> kate </a> will be used as the text editor.<br/>
</div>
</li>
</ul>

<p>
<br/>

Many of the commands that can be invoked by these tools have help information that can be viewed as:
</p>
<ul>
<li class="level1"><div class="li"> the command name followed by -h (e.g., pkcrop -h )<br/>
</div>
</li>
<li class="level1"><div class="li"> or “man” followed by the command name (e.g., man sort)<br/>
</div>
</li>
</ul>

<p>
<br/>

<br/>

The burned area mapping will be performed using a summer 2008 WELD seasonal product over the <a href="http://www.npr.org/blogs/thetwo-way/2011/07/28/138789103/tundra-fires-and-climate-change-more-bad-news" class="urlextern" target="blanc" title="http://www.npr.org/blogs/thetwo-way/2011/07/28/138789103/tundra-fires-and-climate-change-more-bad-news" rel="nofollow noopener"> Anaktuvuk River Fire</a> that occurred September 2007 in a Tundra region of the Alaskan North Slope.
</p>
<div class="table sectionedit2"><table class="inline">
	<tr class="row0">
		<td class="col0"><a href="/dokuwiki/lib/exe/detail.php?id=wiki%3Aopenforis_burned&amp;media=wiki:alaska.png" class="media" title="wiki:alaska.png"><img src="/dokuwiki/lib/exe/fetch.php?w=800&amp;tok=b56966&amp;media=wiki:alaska.png" class="media" alt="" width="800" /></a></td>
	</tr>
</table></div>
<!-- EDIT{&quot;target&quot;:&quot;table&quot;,&quot;name&quot;:&quot;&quot;,&quot;hid&quot;:&quot;table&quot;,&quot;secid&quot;:2,&quot;range&quot;:&quot;2002-2030&quot;} -->
<p>
<br/>

The summer 2008 WELD product, separate .tif files for each of the 14 WELD bands, is stored at: /home/user/ost4sem/exercise/weld_data_processing/x6JIatZlSUMMER2008<br/>

<br/>

To save time, we have pre-generated an ESRI shape file (class<em>b</em>nb.shp) that contains vector polygons storing the locations of some visually interpreted burned and unburned areas.  This is stored at: /home/user/ost4sem/exercise/weld_data_processing/shp
</p>

<p>
<br/>

This exercise will consist of 4 main steps:
</p>
<ol>
<li class="level1"><div class="li"> Working Directory and Data Preparation (using GDAL and PKTOOLS)</div>
</li>
<li class="level1"><div class="li"> Support Vector Machine Classification (using PKTOOLS)</div>
</li>
<li class="level1"><div class="li"> Combined Segmentation Random Forest Classification (using Open Foris Geospatial Toolkit and R)</div>
</li>
<li class="level1"><div class="li"> Result Visualization (using openev and qgis)</div>
</li>
</ol>

<p>
<br/>

You can follow the full methodology in <a href="http://www.spatial-ecology.net/ost4sem/exercise/weld_data_processing/classification/burned.pdf" class="urlextern" target="blanc" title="http://www.spatial-ecology.net/ost4sem/exercise/weld_data_processing/classification/burned.pdf" rel="nofollow noopener">  Data flow diagram </a>
</p>

<p>
<br/>

These 4 main steps are in the following script and directory: <br/>

Script:   /home/user/ost4sem/exercise/weld_data_processing/classification.sh<br/>

Directory: /home/user/ost4sem/exercise/weld_data_processing<br/>

<br/>

We are ready to start the exercise, we will first open classification.sh using the text editor kate and then copy and paste each command from the script to the terminal.<br/>

<br/>

Change the directory and open the script classification.sh using kate:
</p>
<pre class="code">cd /home/user/ost4sem/exercise/weld_data_processing/
rm -f $HOME/ost4sem/exercise/weld_data_processing/classification.sh
wget http://www.spatial-ecology.net/ost4sem/exercise/weld_data_processing/classification.sh 
kate /home/user/ost4sem/exercise/weld_data_processing/classification.sh &amp;</pre>

<p>
<br/>

</p>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;Burned Area Mapping using Support Vector Machine and Combined Segmentation Random Forest classifiers&quot;,&quot;hid&quot;:&quot;burned_area_mapping_using_support_vector_machine_and_combined_segmentation_random_forest_classifiers&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:1,&quot;range&quot;:&quot;1-3779&quot;} -->
<h3 class="sectionedit3" id="working_directory_and_data_preparation">Working Directory and Data Preparation</h3>
<div class="level3">

<p>
<br/>

<strong>Set your working directories:</strong><br/>

<br/>

</p>
<pre class="code">INPUTDIR=/home/user/ost4sem/exercise/weld_data_processing/x6JIatZlSUMMER2008
INSHPDIR=/home/user/ost4sem/exercise/weld_data_processing/shp
OUTPUTDIR=/home/user/ost4sem/exercise/weld_data_processing/classification
mkdir $OUTPUTDIR</pre>

<p>
We can check that we set these Linux variables correctly by typing, for example: echo $INSHPDIR 
</p>

<p>
We can now visualize the data for this exercise using commands like:
</p>
<pre class="code"># if you do not have $INSHPDIR/class_b_nb.shp
cd $INSHPDIR/
wget http://www.spatial-ecology.net/ost4sem/exercise/weld_data_processing/shp/class_b_nb.shp
wget http://www.spatial-ecology.net/ost4sem/exercise/weld_data_processing/shp/class_b_nb.shx
wget http://www.spatial-ecology.net/ost4sem/exercise/weld_data_processing/shp/class_b_nb.qpj
wget http://www.spatial-ecology.net/ost4sem/exercise/weld_data_processing/shp/class_b_nb.prj
wget http://www.spatial-ecology.net/ost4sem/exercise/weld_data_processing/shp/class_b_nb.dbf</pre>
<pre class="code">openev $INPUTDIR/Band1_TOA_REF.TIF
openev $INPUTDIR/Band1_TOA_REF.TIF  $INSHPDIR/class_b_nb.shp  # shape file with 2 classes  1=not-burned area, 2=burned area, used by the supervised classification. </pre>

<p>
<strong>Create a binary WELD bad data mask:</strong><br/>

<br/>

We will now create a binary mask (with values 0 or 1) that define if a pixel is cloudy (using WELD bands: DT_Cloud_State.TIF and ACCA_State.TIF) or saturated (using WELD band: Saturation_Flag.TIF)<br/>

<br/>

To do this first stack the DT_Cloud_State, ACCA_State and Saturation_Flag bands together:
</p>
<pre class="code">pkcrop -i $INPUTDIR/DT_Cloud_State.TIF -i $INPUTDIR/ACCA_State.TIF -i $INPUTDIR/Saturation_Flag.TIF -o $OUTPUTDIR/mask_bands.tif</pre>

<p>
Next, using pkgetmask create a binary mask (mask1-0.tif) where any pixel that is cloudy or saturated in any WELD band is assigned a value of 0 (if not it is assigned a 1 value):
</p>
<pre class="code">pkgetmask -ot Int16 -i $OUTPUTDIR/mask_bands.tif -b 0 -b 1 -b 2 --min 1  --max 255  -data 0 -nodata 1 -o  $OUTPUTDIR/mask1-0.tif
pkgetmask -ot Int16 -i $OUTPUTDIR/mask_bands.tif -b 0 -b 1 -b 2 --min 1  --max 255  -data 1 -nodata 0 -o  $OUTPUTDIR/mask0-1.tif</pre>

<p>
Remove intermediate files created by these commands:
</p>
<pre class="code">rm  $OUTPUTDIR/mask_bands.tif</pre>

<p>
<strong>Stack the 6 reflective wavelength WELD bands:</strong><br/>

<br/>

Now we will stack the 6 WELD reflective wavelength bands together into a single file called Bands_stack.tif as:<br/>

</p>
<pre class="code"> gdalbuildvrt -overwrite -separate $OUTPUTDIR/Bands_stack.vrt $OUTPUTDIR/mask1-0.tif $INPUTDIR/Band1_TOA_REF.TIF $INPUTDIR/Band2_TOA_REF.TIF  $INPUTDIR/Band3_TOA_REF.TIF  $INPUTDIR/Band4_TOA_REF.TIF  $INPUTDIR/Band5_TOA_REF.TIF  $INPUTDIR/Band7_TOA_REF.TIF 
 gdal_translate  -co  COMPRESS=LZW -co ZLEVEL=9  $OUTPUTDIR/Bands_stack.vrt $OUTPUTDIR/Bands_stack.tif</pre>

<p>
<strong>Rasterize the training:</strong><br/>

<br/>

Next we will convert the pre-generated ESRI shape file to a raster (class<em>b</em>nb.shp) with three classes: 0 unknown, 1 not-burned, 2 burned. To be useful we need to rasterize the shape file with the same resolution and extent as the WELD bands. This generates a training raster map called class_b_nb.tif as:
</p>
<pre class="code">gdal_rasterize  -te  75000 2070010 189990 2200000 -tr 30 30 -l  class_b_nb -a class $INSHPDIR/class_b_nb.shp   $OUTPUTDIR/class_b_nb.tif</pre>

<p>
Use pkinfo to list out how many pixels are in each class of the training raster map: 
</p>
<pre class="code">pkstat -i $OUTPUTDIR/class_b_nb.tif   --hist </pre>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;Working Directory and Data Preparation&quot;,&quot;hid&quot;:&quot;working_directory_and_data_preparation&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:3,&quot;range&quot;:&quot;3780-7187&quot;} -->
<h3 class="sectionedit4" id="support_vector_machine_classification">Support Vector Machine Classification</h3>
<div class="level3">

<p>
<br/>

Support Vector Machine Classification is a popular supervised classifier that has some nice properties (that we do not have time to describe here). 
</p>

<p>
First we will generate a new ESRI training  shape file that contains the 6 WELD reflective wavelength band values, that are not labelled as cloudy or saturated by WELD, at a random sample (0.01%) of the burned and unburned pixel locations defined in the training raster map: 
</p>
<pre class="code">rm $INSHPDIR/class_b_nb_4svm.*
pkextractimg -i $OUTPUTDIR/Bands_stack.tif -r point -polygon  -s $OUTPUTDIR/class_b_nb.tif -t 0.1 -t 0.1 -c 1 -c 2 -bndnodata 0 -srcnodata 0  -f SQLite -o $INSHPDIR/class_b_nb_4svm.sqlite</pre>

<p>
We can check the contents of the resulting training shape file as:
</p>
<pre class="code">ogrinfo -al $INSHPDIR/class_b_nb_4svm.sql</pre>

<p>
Now we will classify the 6 WELD reflective wavelength band values, that are not labelled as cloudy or saturated by WELD, using this new training shape file as: 
</p>
<pre class="code">pksvm -m $OUTPUTDIR/mask1-0.tif -msknodata 0 -nodata 0  -i $OUTPUTDIR/Bands_stack.tif -t $INSHPDIR/class_b_nb_4svm.sqlite -o $OUTPUTDIR/classification_svm.tif  </pre>

<p>
This is a computationally demanding  process (can take 3-12 minutes depending on your laptop) and you can terminate it by pressing ctrl+c. 
</p>

<p>
We have already stored a version of the results called classification<em>svm</em>cp.tif
</p>

<p>
We can visualize the classification results as: 
</p>
<pre class="code">openev $OUTPUTDIR/classification_svm.tif</pre>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;Support Vector Machine Classification&quot;,&quot;hid&quot;:&quot;support_vector_machine_classification&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:4,&quot;range&quot;:&quot;7188-8647&quot;} -->
<h3 class="sectionedit5" id="combined_segmentation_random_forest_classification">Combined Segmentation Random Forest Classification</h3>
<div class="level3">

<p>
<br/>

Some researchers like to segment satellite data into objects with similar spectral values, and then classify each segment into different classes. There are many ways of segmenting satellite data, in this exercise we will apply the K-means NN unsupervised classier to the WELD data to generate segments. We will then classify the segments using the Random Forest supervised classifier (a recent classifier with some nice properties that we do not have time to describe). 
</p>

<p>
<br/>

We will follow this procedure:
</p>
<ol>
<li class="level1"><div class="li"> Segment the image,</div>
</li>
<li class="level1"><div class="li"> Allocate unique ID values to each segment,</div>
</li>
<li class="level1"><div class="li"> Select “pure” segments that occur only within burned or unburned class training regions,</div>
</li>
<li class="level1"><div class="li"> Calculate the spectral signature of each segment,</div>
</li>
<li class="level1"><div class="li"> Train the Random Forest classifier using the spectral signatures of each “pure” segment,</div>
</li>
<li class="level1"><div class="li"> Apply the Random Forest classifier to all segments to generate a table of classified segments, </div>
</li>
<li class="level1"><div class="li"> Generate a classified raster image. </div>
</li>
</ol>

<p>
<br/>

<strong>Segment the image:</strong><br/>

<br/>

We will segment the 6 WELD reflective wavelength band values, that are not labelled as cloudy or saturated by WELD, using the K-means unsuperivised NN classifier. In this example we tell the K-means unsupervised NN classifier to examine 1% of the WELD data and then label the resulting segments for the entire image into one of 12 classes. Note, we select 12 arbitrarily (and set quite low so the following runs quickly, if we used a number &gt;12 there would be more segments but they would take longer to generate).<br/>

</p>
<pre class="code">gdalbuildvrt -overwrite -separate $OUTPUTDIR/Bands_stack.vrt $INPUTDIR/Band1_TOA_REF.TIF $INPUTDIR/Band2_TOA_REF.TIF  $INPUTDIR/Band3_TOA_REF.TIF  $INPUTDIR/Band4_TOA_REF.TIF  $INPUTDIR/Band5_TOA_REF.TIF  $INPUTDIR/Band7_TOA_REF.TIF 
gdal_translate  -co  COMPRESS=LZW -co ZLEVEL=9  $OUTPUTDIR/Bands_stack.vrt $OUTPUTDIR/Bands_stack.tif
oft-cluster.bash  $OUTPUTDIR/Bands_stack.tif  $OUTPUTDIR/12classes1perc.tif 12  1  $OUTPUTDIR/mask1-0.tif </pre>

<p>
Check eventually the results of otbcli_KMeansClassification 
</p>

<p>
Visualize the resulting segmentation results as: 
</p>
<pre class="code">openev $OUTPUTDIR/12classes1perc.tif</pre>

<p>
<br/>

<strong>Allocate unique ID values to each segment:</strong><br/>

<br/>

Each segment is allocated a unique ID number (this process does not use the segment class values): 
</p>
<pre class="code">oft-clump  -um $OUTPUTDIR/mask1-0.tif    $OUTPUTDIR/12classes1perc.tif  $OUTPUTDIR/clumpIDsegments.tif</pre>

<p>
Visualize the resulting labelled segmentation results as: 
</p>
<pre class="code">openev  $OUTPUTDIR/clumpIDsegments.tif</pre>

<p>
<strong>Select “pure” segments:</strong><br/>

<br/>

We need to be able to select those segments that occur only within the burned or unburned class training regions.
</p>
<pre class="code">oft-stat $OUTPUTDIR/clumpIDsegments.tif  $OUTPUTDIR/class_b_nb.tif  $OUTPUTDIR/stat_clumpID_class_b_nb.txt</pre>

<p>
The resulting output text file stat_clumpID_class_b_nb.txt is defined with one row per segment and contains summary statistics of the values in the training raster  (recall class<em>b</em>nb.tif has pixels defined as one of three classes: 0 unknown, 1 not-burned, 2 burned).  The columns of text file stat<em>clumpID</em>class<em>b</em>nb.txt are:<br/>

segment ID, number of pixels in segment, mean of the class_b_nb.tif segment pixel values, standard deviation of the class<em>b</em>nb.tif segment pixel values<br/>

<br/>

Examine the first 12 lines of stat_clumpID_class_b_nb.txt as:
</p>
<pre class="code">head -12 $OUTPUTDIR/stat_clumpID_class_b_nb.txt</pre>

<p>
We will now select “pure” segments that occur only within burned or unburned class training regions defined if the mean of the class_b_nb.tif segment pixel values is equal to 1 or to 2 respectively. Moreover, in order to have a robust training we will select only “pure” segments that are defined by &gt;= 4 pixels.
</p>
<pre class="code">awk &#039;{ if ($2 &gt;= 4) { if($3==1 || $3==2  ) { print $1, int($3) }}}&#039;  $OUTPUTDIR/stat_clumpID_class_b_nb.txt  &gt; $OUTPUTDIR/pure_clumpID.txt
sort -k 1,1 $OUTPUTDIR/pure_clumpID.txt   &gt; $OUTPUTDIR/pure_clumpID_s.txt</pre>

<p>
<br/>

<strong>Calculate the spectral signature of each segment:</strong><br/>

<br/>

We will compute the mean reflectance of the pixels in each segment for each of the 6 WELD reflective wavelength bands. 
</p>

<p>
We will do this for all the segments including the non-pure ones as: 
</p>
<pre class="code">oft-stat $OUTPUTDIR/clumpIDsegments.tif  $OUTPUTDIR/Bands_stack.tif  $OUTPUTDIR/clumpID_bandAVG_bandSTD.txt</pre>

<p>
The resulting output text file clumpID_bandAVG_bandSTD.txt is defined with one row per segment and contains summary statistics of the the 6 WELD reflective wavelength bands. The columns of text file clumpID_bandAVG_bandSTD.txt are:
<br/>

segment ID, number of pixels in segment, mean of the segment pixel values for each of the 6 WELD bands (6 columns of these), standard deviation of the segment pixel values for each of the 6 WELD bands (6 columns of these)<br/>

</p>

<p>
Examine clumpID<em>bandAVG</em>bandSTD.txt as:
</p>
<pre class="code">head $OUTPUTDIR/clumpID_bandAVG_bandSTD.txt</pre>

<p>
From this file we need only the segment ID and the mean values for each of the 6 WELD bands. We can strip this information out using AWK as:
</p>
<pre class="code">awk &#039;{ print $1, $3,$4,$5,$6,$7,$8 }&#039; $OUTPUTDIR/clumpID_bandAVG_bandSTD.txt &gt; $OUTPUTDIR/clumpID_bandAVG.txt
sort -k 1,1 $OUTPUTDIR/clumpID_bandAVG.txt &gt; $OUTPUTDIR/clumpID_bandAVG_s.txt</pre>

<p>
We now need to combine the two tables pure_clumpID_s.txt and  clumpID_bandAVG_s.txt outputting  only the rows describing the “pure” segments. The easiest way to do this is with the join command matching the first columns (segment ID) in the first (labelled as “-1”) and second (labelled as “-2”) files:<br/>

</p>
<pre class="code">join -1 1 -2 1  $OUTPUTDIR/pure_clumpID_s.txt   $OUTPUTDIR/clumpID_bandAVG_s.txt &gt; $OUTPUTDIR/pure_clumpID_bandAVG_s.txt</pre>

<p>
Examine pure_clumpID_bandAVG_s.txt as:
</p>
<pre class="code">head $OUTPUTDIR/pure_clumpID_bandAVG_s.txt</pre>

<p>
It is a good idea to attach column names to the top of this file as:
</p>
<pre class="code">echo &quot;ID Class MeanB1 MeanB2 MeanB3 MeanB4 MeanB5 MeanB7&quot; &gt; $OUTPUTDIR/pure_clumpID_bandAVG_h.txt
cat $OUTPUTDIR/pure_clumpID_bandAVG_s.txt &gt;&gt; $OUTPUTDIR/pure_clumpID_bandAVG_h.txt</pre>

<p>
Examine the resulting column labelled file pure<em>clumpID</em>bandAVG_h.txt as:
</p>
<pre class="code">head $OUTPUTDIR/pure_clumpID_bandAVG_h.txt</pre>

<p>
<strong>Train the Random Forest</strong><br/>

<br/>

We will train the Random Forest classifier using the mean spectral signatures of each “pure” segment using the R software package. 
To enter R type:
</p>
<pre class="code">R</pre>

<p>
If you enter R correctly, you will see several lines that describe the version of R you have and how to search for help in R.<br/>

<br/>

First we must load the R Random Forest library as: 
</p>
<pre class="code">library(randomForest)</pre>

<p>
We will then load the text file pure_clumpID_bandAVG_h.txt into R as:
</p>
<pre class="code">training_bandAVG &lt;- read.table(&#039;/home/user/ost4sem/exercise/weld_data_processing/classification/pure_clumpID_bandAVG_h.txt&#039;, sep=&quot; &quot; , header = TRUE)</pre>

<p>
To examine the first row of what you have loaded into R type:
</p>
<pre class="code">training_bandAVG[1, ]</pre>

<p>
To examine the first five rows of what you have loaded into R type:
</p>
<pre class="code">training_bandAVG[1:5, ]</pre>

<p>
We need to first define the response variable (burned or unburned) and call is Class as: 
</p>
<pre class="code">training_bandAVG$Class  &lt;-  as.factor (training_bandAVG$Class)</pre>

<p>
We will now develop a random forest training set using the data. The parameters ntree and mytry control the complexity of the random forest (and are set here so that it runs quickly in about 2-5 minutes): 
</p>
<pre class="code">fitRF &lt;- randomForest(Class~MeanB1+MeanB2+MeanB3+MeanB4+MeanB5+MeanB7, ntree=100, mytry=4, data=training_bandAVG)</pre>

<p>
<br/>

<strong>Apply the Random Forest classifier to all segments</strong><br/>

<br/>

We apply the Random Forest classifier to all the segments to generate a table of classified segment values.
<br/>

First we must load the text file segment<em>bandAVG</em>s.txt into R:
</p>
<pre class="code">clumpID_bandAVG &lt;- read.table(&#039;/home/user/ost4sem/exercise/weld_data_processing/classification/clumpID_bandAVG_s.txt&#039;, sep=&quot; &quot;) </pre>

<p>
Examine the first five rows of what you have loaded into R as:
</p>
<pre class="code">clumpID_bandAVG[1:5, ]</pre>

<p>
We must label the column names of clumpID<em>bandAVG in the same way as training</em>bandAVG, to do this type:
</p>
<pre class="code">names(clumpID_bandAVG)[2] &lt;- &quot;MeanB1&quot;
names(clumpID_bandAVG)[3] &lt;- &quot;MeanB2&quot;
names(clumpID_bandAVG)[4] &lt;- &quot;MeanB3&quot;
names(clumpID_bandAVG)[5] &lt;- &quot;MeanB4&quot;
names(clumpID_bandAVG)[6] &lt;- &quot;MeanB5&quot;
names(clumpID_bandAVG)[7] &lt;- &quot;MeanB7&quot;</pre>

<p>
Re-examine the first five rows (the columns should now be labelled) as:
</p>
<pre class="code">clumpID_bandAVG[1:5, ]</pre>

<p>
Now we will predict for each segment what class it is using the random forest (this takes &lt; 1 minute):
</p>
<pre class="code">predict_class &lt;- predict ( fitRF , clumpID_bandAVG ) </pre>

<p>
Now we need to save the resulting table of classified segment values back out of R to the output directory:
</p>
<pre class="code">write.table (file = &#039;/home/user/ost4sem/exercise/weld_data_processing/classification/predict_class.txt&#039;,  predict_class   , sep=&quot; &quot; ,   col.names=FALSE, quote=FALSE) </pre>

<p>
Now close R (do not save the workspace image when prompted, just type “n”):
</p>
<pre class="code">q()</pre>

<p>
Be sure that you exit correctly from R and run the following commands.<br/>

<br/>

<strong>Generate a classified raster image</strong><br/>

<br/>

We need to combine the results in predict<em>class.txt with clumpID</em>bandAVG_s.txt, these files have the same number of corresponding rows. Please have a look at the first 10 lines of each of these files as:
</p>
<pre class="code">head $OUTPUTDIR/clumpID_bandAVG_s.txt $OUTPUTDIR/predict_class.txt </pre>

<p>
The first column of clumpID_bandAVG_s.txt is the segment ID, the second column of predict_class.txt is the predicted class. 
</p>

<p>
We really only want the segment ID and the predicted class, and we can combine them into one file as:
</p>
<pre class="code">awk &#039;{ print $2  }&#039;   $OUTPUTDIR/predict_class.txt   &gt;    $OUTPUTDIR/predict_class_2.txt
awk &#039;{ print $1  }&#039;   $OUTPUTDIR/clumpID_bandAVG_s.txt    &gt;    $OUTPUTDIR/clumpID_s.txt
paste -d &quot; &quot; $OUTPUTDIR/clumpID_s.txt  $OUTPUTDIR/predict_class_2.txt &gt; $OUTPUTDIR/clumpID_class.txt </pre>

<p>
Examine clumpID_class.txt as: 
</p>
<pre class="code">head $OUTPUTDIR/clumpID_class.txt</pre>

<p>
We now use this file to classify the labelled segmentation image clumpIDsegments.tif and we use the binary WELD bad data mask mask1-0.tif to not classify cloudy or saturated pixels as: 
</p>
<pre class="code">oft-reclass  -um  $OUTPUTDIR/mask1-0.tif  -oi  $OUTPUTDIR/classification_rf.tif  $OUTPUTDIR/clumpIDsegments.tif</pre>

<p>
The program oft-reclass will prompt for the following parameters, please just enter the inputs as below:<br/>

-Input reclass file name?  clumpID_class.txt<br/>

-Nbr of out bands per input channel? 1 <br/>

-Col of input value?  1 <br/>

-Col of output value?  2 <br/>

-NODATA value?  0<br/>

</p>

<p>
We can visualize the classification result as:
</p>
<pre class="code">openev $OUTPUTDIR/classification_rf.tif </pre>

<p>
<br/>

For you reference the following screenshots show classification<em>svm.tif (left) and classification</em>rf.tif (right)
</p>
<div class="table sectionedit6"><table class="inline">
	<tr class="row0">
		<td class="col0"><a href="/dokuwiki/lib/exe/detail.php?id=wiki%3Aopenforis_burned&amp;media=wiki:svm.png" class="media" title="wiki:svm.png"><img src="/dokuwiki/lib/exe/fetch.php?w=380&amp;tok=26c507&amp;media=wiki:svm.png" class="media" alt="" width="380" /></a></td><td class="col1"><a href="/dokuwiki/lib/exe/detail.php?id=wiki%3Aopenforis_burned&amp;media=wiki:random.png" class="media" title="wiki:random.png"><img src="/dokuwiki/lib/exe/fetch.php?w=380&amp;tok=00942f&amp;media=wiki:random.png" class="media" alt="" width="380" /></a></td>
	</tr>
</table></div>
<!-- EDIT{&quot;target&quot;:&quot;table&quot;,&quot;name&quot;:&quot;&quot;,&quot;hid&quot;:&quot;table1&quot;,&quot;secid&quot;:6,&quot;range&quot;:&quot;19254-19302&quot;} -->
<p>
<br/>

<br/>

</p>
<ul>
<li class="level1"><div class="li"> <a href="/dokuwiki/doku.php?id=wiki:weld_visual" class="wikilink1" title="wiki:weld_visual"> WELD TOA vs. SR </a></div>
</li>
<li class="level1"><div class="li"> <a href="/dokuwiki/doku.php?id=wiki:weld_visual_fire" class="wikilink1" title="wiki:weld_visual_fire"> WELD visual firer TOA </a></div>
</li>
</ul>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;Combined Segmentation Random Forest Classification&quot;,&quot;hid&quot;:&quot;combined_segmentation_random_forest_classification&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:5,&quot;range&quot;:&quot;8648-&quot;} -->