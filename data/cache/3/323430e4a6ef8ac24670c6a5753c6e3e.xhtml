
<h2 class="sectionedit1" id="mapping_the_natural_vegetation_of_italy_using_randomforest_distribution_model">Mapping the Natural Vegetation of Italy Using randomForest distribution model</h2>
<div class="level2">

<p>
This R script allows you to use the random Forest model we previously constructed and a series of 23 environmental Predictor variables to map the distribution of the Italian natural forest.<br/>

This script performs the following Operations:<br/>

</p>
<ol>
<li class="level1"><div class="li"> Upload The previously computed randomForest model of natural vegetation distribution </div>
</li>
<li class="level1"><div class="li"> Upload GRASS format raster maps of bioclimate and geomormphology into R SpatialGridDataFrame format</div>
</li>
<li class="level1"><div class="li"> Calculate pixel values according to the random forest model and environmental rasters inported in the SpatialGridDataFrame</div>
</li>
<li class="level1"><div class="li"> Generate an empty map including geographical coordinates </div>
</li>
<li class="level1"><div class="li"> Add predicted values to the empty map and form a georeferenced map</div>
</li>
<li class="level1"><div class="li"> Export the georeferenced R format map to an ascii file <br/>
</div>
</li>
</ol>

<p>
<em>Nota bene</em>
This script performs each operation on single map tile with an extent of 1500km x 20km, and recursively creates each tile in a loop to complete the whole map generation.
</p>

</div>
<!-- EDIT1 SECTION "Mapping the Natural Vegetation of Italy Using randomForest distribution model" [1-1033] -->
<h3 class="sectionedit2" id="load_libraries">load libraries</h3>
<div class="level3">
<pre class="code r">   library(rgdal)
   library(maptools)
   library(grid)
   library(randomForest) 
   print(&quot; ------------- NOW CREATE predictors grid stack  -------------&quot;)</pre>

</div>
<!-- EDIT2 SECTION "load libraries" [1034-1232] -->
<h3 class="sectionedit3" id="import_model_rf">Import model RF</h3>
<div class="level3">
<pre class="code r">   load(&quot;~/ost4sem/studycase/ITA_veg/models/RF23tune_ITAveg&quot;)
   gc() # Clean your ram memory</pre>

</div>
<!-- EDIT3 SECTION "Import model RF" [1233-1373] -->
<h3 class="sectionedit4" id="define_your_working_path">Define your working path</h3>
<div class="level3">
<pre class="code r">   path.rasters = as.character(&quot;/home/user/ost4sem/grassdbnew/europe/Vmodel/cellhd/&quot;)
   path.results = as.character(&quot;/home/user/ost4sem/studycase/ITA_veg/outmaps/&quot;)</pre>

</div>
<!-- EDIT4 SECTION "Define your working path" [1374-1591] -->
<h3 class="sectionedit5" id="importing_grass_grid_into_r_spatialgriddataframe">Importing GRASS grid into R SpatialGridDataFrame</h3>
<div class="level3">

<p>
â€¦ and generate a spatial data stack with readGDAL function 
</p>
<pre class="code r">   tile = c(20*0:114)
&nbsp;</pre>

<p>
start a loop for map tiles
</p>
<pre class="code r">   for(t in 1:57){
&nbsp;
   datagrids = readGDAL(paste(path.rasters,&quot;pr104ita&quot;,sep=&quot;&quot;), offset=c(0,tile[t]), region.dim=c(1480,20))
   datagrids$pr104 = datagrids$band1
   datagrids$pr105 = readGDAL(paste(path.rasters,&quot;pr105ita&quot;,sep=&quot;&quot;), offset=c(0,tile[t]), region.dim=c(1480,20))$band1
&nbsp;
   datagrids$pr106 = readGDAL(paste(path.rasters,&quot;pr106ita&quot;,sep=&quot;&quot;), offset=c(0,tile[t]), region.dim=c(1480,20))$band1
   gc()
&nbsp;
   datagrids$pr109 = readGDAL(paste(path.rasters,&quot;pr109ita&quot;,sep=&quot;&quot;), offset=c(0,tile[t]), region.dim=c(1480,20))$band1
   datagrids$pr110 = readGDAL(paste(path.rasters,&quot;pr110ita&quot;,sep=&quot;&quot;), offset=c(0,tile[t]), region.dim=c(1480,20))$band1
&nbsp;
   gc()
   datagrids$pr111 = readGDAL(paste(path.rasters,&quot;pr111ita&quot;,sep=&quot;&quot;), offset=c(0,tile[t]), region.dim=c(1480,20))$band1
   datagrids$pr118 = readGDAL(paste(path.rasters,&quot;pr118ita&quot;,sep=&quot;&quot;), offset=c(0,tile[t]), region.dim=c(1480,20))$band1
&nbsp;
   gc()
   datagrids$pr120 = readGDAL(paste(path.rasters,&quot;pr120ita&quot;,sep=&quot;&quot;), offset=c(0,tile[t]), region.dim=c(1480,20))$band1
   datagrids$pr123 = readGDAL(paste(path.rasters,&quot;pr123ita&quot;,sep=&quot;&quot;), offset=c(0,tile[t]), region.dim=c(1480,20))$band1
&nbsp;
   gc()
   datagrids$pr126 = readGDAL(paste(path.rasters,&quot;pr126ita&quot;,sep=&quot;&quot;), offset=c(0,tile[t]), region.dim=c(1480,20))$band1
   datagrids$pr128 = readGDAL(paste(path.rasters,&quot;pr128ita&quot;,sep=&quot;&quot;), offset=c(0,tile[t]), region.dim=c(1480,20))$band1
&nbsp;
   gc()
   datagrids$pr131 = readGDAL(paste(path.rasters,&quot;pr131ita&quot;,sep=&quot;&quot;), offset=c(0,tile[t]), region.dim=c(1480,20))$band1
   datagrids$pr134 = readGDAL(paste(path.rasters,&quot;pr134ita&quot;,sep=&quot;&quot;), offset=c(0,tile[t]), region.dim=c(1480,20))$band1
&nbsp;
   gc()
   datagrids$pr135 = readGDAL(paste(path.rasters,&quot;pr135ita&quot;,sep=&quot;&quot;), offset=c(0,tile[t]), region.dim=c(1480,20))$band1
   datagrids$pr136 = readGDAL(paste(path.rasters,&quot;pr136ita&quot;,sep=&quot;&quot;), offset=c(0,tile[t]), region.dim=c(1480,20))$band1
&nbsp;
   gc()
   datagrids$pr137 = readGDAL(paste(path.rasters,&quot;pr137ita&quot;,sep=&quot;&quot;), offset=c(0,tile[t]), region.dim=c(1480,20))$band1
   datagrids$pr138 = readGDAL(paste(path.rasters,&quot;pr138ita&quot;,sep=&quot;&quot;), offset=c(0,tile[t]), region.dim=c(1480,20))$band1
&nbsp;
   datagrids$pr198 = readGDAL(paste(path.rasters,&quot;pr198ita&quot;,sep=&quot;&quot;), offset=c(0,tile[t]), region.dim=c(1480,20))$band1
   datagrids$pr200 = readGDAL(paste(path.rasters,&quot;pr200ita&quot;,sep=&quot;&quot;), offset=c(0,tile[t]), region.dim=c(1480,20))$band1
   gc()
&nbsp;
   datagrids$pr201 = readGDAL(paste(path.rasters,&quot;pr201ita&quot;,sep=&quot;&quot;), offset=c(0,tile[t]), region.dim=c(1480,20))$band1
   datagrids$pr202 = readGDAL(paste(path.rasters,&quot;pr202ita&quot;,sep=&quot;&quot;), offset=c(0,tile[t]), region.dim=c(1480,20))$band1
   gc()
   datagrids$pr203 = readGDAL(paste(path.rasters,&quot;pr203ita&quot;,sep=&quot;&quot;), offset=c(0,tile[t]), region.dim=c(1480,20))$band1
   datagrids$pr204 = readGDAL(paste(path.rasters,&quot;pr204ita&quot;,sep=&quot;&quot;), offset=c(0,tile[t]), region.dim=c(1480,20))$band1
&nbsp;
   gc()
&nbsp;
   cat(&quot; ---- 23 grids inported into datagrids file - now drawing the map------\n&quot;)
&nbsp;</pre>

</div>
<!-- EDIT5 SECTION "Importing GRASS grid into R SpatialGridDataFrame" [1592-4786] -->
<h3 class="sectionedit6" id="the_predict_function_is_used_to_calculate_pixel_values_and_index_according_to_the_random_forest_model_and_original_rasters_imported">The predict function is used to calculate pixel values and index according to the random forest model and original rasters imported</h3>
<div class="level3">
<pre class="code r">   pred.mapRF = predict (RF23tuned , newdata=datagrids, type=&quot;response&quot;)
   cat(&quot;class predicted\n&quot;)
&nbsp;
   pred.mapRFindex = predict (RF23tuned , newdata=datagrids, type=&quot;vote&quot;)
   cat(&quot;class index recorded\n&quot;)
&nbsp;
   cat(&quot;map values for Forest Type calculated and added to predict map vector\n&quot;)</pre>

</div>
<!-- EDIT6 SECTION "The predict function is used to calculate pixel values and index according to the random forest model and original rasters imported" [4787-5244] -->
<h3 class="sectionedit7" id="generate_an_empty_tile_with_geographical_coordinates_to_pixel_values_20">Generate an empty tile with geographical coordinates to pixel values = 20</h3>
<div class="level3">
<pre class="code r">   data2map = readGDAL(paste(path.rasters,&quot;pr104ita&quot;,sep=&quot;&quot;), offset=c(0,tile[t]), region.dim=c(1500,20))
   cat(&quot;geocoordinates inported\n&quot;)
&nbsp;
   data2map$band1 = 20
   cat(&quot; no data value is now = 15 in this tile[t]\n&quot;)
&nbsp;</pre>

</div>
<!-- EDIT7 SECTION "Generate an empty tile with geographical coordinates to pixel values = 20" [5245-5574] -->
<h3 class="sectionedit8" id="add_predicted_values_to_the_empty_tile_t">Add predicted values to the empty tile[t]</h3>
<div class="level3">
<pre class="code r">   data2map$band1[as.numeric(dimnames(pred.mapRFindex)[[1]])] = as.numeric(pred.mapRF)
   cat(&quot;class values added to tile[t]\n&quot;)
&nbsp;</pre>

</div>
<!-- EDIT8 SECTION "Add predicted values to the empty tile[t]" [5575-5776] -->
<h3 class="sectionedit9" id="generate_an_asciii_tile_file_for_modelled_species">Generate an asciii TILE file for modelled species</h3>
<div class="level3">
<pre class="code r">   write.asciigrid(data2map, paste(path.results,t,&quot;tile_ITAveg.asc&quot;,sep=&quot;&quot;))
&nbsp;
   cat(&quot;-----------------------------------------Tile&quot;, t,&quot;created--------------------------\n&quot;)</pre>

</div>
<!-- EDIT9 SECTION "Generate an asciii TILE file for modelled species" [5777-6031] -->
<h3 class="sectionedit10" id="cleaning_up_the_memory_and_finishing_the_for_tiles_loop">Cleaning up the memory and finishing the for &quot;tiles&quot; loop</h3>
<div class="level3">
<pre class="code r">   rm(data2map)
   rm(datagrids)
   rm(pred.mapRF)
   rm(pred.mapRFindex)
   gc()
   }</pre>

<p>
<br/>
end of the loop the tiles are created.
</p>

</div>
<!-- EDIT10 SECTION "Cleaning up the memory and finishing the for tiles loop" [6032-6244] -->
<h3 class="sectionedit11" id="merging_tiles">Merging tiles</h3>
<div class="level3">

<p>
Now we use a bash shell command from the gdal library to merge tiles into the final mosaic map of modeled current natuaral forest vegetation of Italy and we delete these once the map is produced.
</p>
<pre class="code r">  system(&quot;cd /home/ste/ost4sem/studycase/ITA_veg/outmaps/&quot;)
  system(&quot;gdalwarp  -srcnodata &quot;-9999&quot;  -dstnodata &quot;-9999&quot; -of GTiff -ot Int16 -wt Int16     *.asc   ITAveg.tif&quot;) 
  system(&quot;rm *tile_ITAveg.asc&quot;)</pre>

<p>
End of this script.
Now you can go ahead and run the future mapping. You need first to prepare your future bioclimatic predictors surface maps using <a href="/dokuwiki/doku.php?id=wiki:itaveg_fut_clim_rasters_sh" class="wikilink1" title="wiki:itaveg_fut_clim_rasters_sh">this shell script</a>.
</p>

</div>
<!-- EDIT11 SECTION "Merging tiles" [6245-6900] -->
<h1 class="sectionedit12" id="full_script">Full script</h1>
<div class="level1">
<dl class="code">
<dt><a href="/dokuwiki/doku.php?do=export_code&amp;id=wiki:map_rf_itaveg_r&amp;codeblock=11" title="Download Snippet" class="mediafile mf_r">- MAP_RF_ITAVEG.R</a></dt>
<dd><pre class="code R"># #########################
#
#   Stefano Casalegno
#   May 2009
#   stefano@casalegno.net
#
# ########################
########################################################################################
########################################################################################
##                                                                                   
##  Mapping the Natural Vegetation of Italy Using randomForest distribution model     
##  and a series of 23 environmental Predictor variables.
##
##
##
##
##   This script perform the following Operations:
##
##    1. Upload The previously computed randomForest model of natural 
##         vegetation distribution 
##             
##
##    2. Upload GRASS format raster maps of bioclimate and geomormphology into R
##         SpatialGridDataFrame format
##
##    3. Calculate pixel values accordind to the random forest model 
##          and environmental rasters inported in the SpatialGridDataFrame
## 
##    4. Generate an empty map including geographical coordinates 
##
##    5. Adding predicted values to the empty and forming a georeferenced map
## 
##    6. Exporting the georeferenced R format map to an asciii file 
##
## 
##    Nota bene: This script perform each operation on single tiles of maps 
##       with an extent of 1500km x 20km and recursively create each tile in 
##       a loop to complete the whole map generation.
##
##
##########################################################################################
##########################################################################################
&nbsp;
library(rgdal)
library(maptools)
library(grid)
library(randomForest) 
&nbsp;
&nbsp;
&nbsp;
print(&quot; ------------- NOW CREATE predictors grid stack  -------------&quot;)
&nbsp;
### Imoprt model RF
load(&quot;/home/stefano/ubun/ost4sem/studycase/ITA_veg/R_script/results/RF23tune_ITAveg&quot;)
&nbsp;
# from Virtual machine use 
# load(&quot;/home/ost4sem/studycase/ITA_veg/R_script/results/RF23tune_ITAveg&quot;)
&nbsp;
gc()
&nbsp;
&nbsp;
path.rasters = as.character(&quot;/home/stefano/ubun/ost4sem/studycase/ITA_veg/GIS_ITA/ITA_VEGWK/cellhd/&quot;)
path.results = as.character(&quot;/home/stefano/ubun/ost4sem/studycase/ITA_veg/GIS_ITA/SPATIALDATA/ITAveg_map/&quot;)
&nbsp;
# from Virtual machine use 
# path.rasters = as.character(/home/ost4sem/studycase/ITA_veg/GIS_ITA/ITA_VEGWK/cellhd/&quot;)
# path.results = as.character(&quot;/home/ost4sem/studycase/ITA_veg/GIS_ITA/SPATIALDATA/ITAveg_map/&quot;)
&nbsp;
&nbsp;
## importing ARC INFO grid into R SpatialGridDataFrame 
## and generate a spatial data stack with readGDAL function 
&nbsp;
tile = c(20*0:114)
&nbsp;
for(t in 1:57){
&nbsp;
datagrids = readGDAL(paste(path.rasters,&quot;pr104ita&quot;,sep=&quot;&quot;), offset=c(0,tile[t]), region.dim=c(1500,20))
datagrids$pr104 = datagrids$band1
datagrids$pr105 = readGDAL(paste(path.rasters,&quot;pr105ita&quot;,sep=&quot;&quot;), offset=c(0,tile[t]), region.dim=c(1500,20))$band1
&nbsp;
datagrids$pr106 = readGDAL(paste(path.rasters,&quot;pr106ita&quot;,sep=&quot;&quot;), offset=c(0,tile[t]), region.dim=c(1500,20))$band1
gc()
&nbsp;
datagrids$pr109 = readGDAL(paste(path.rasters,&quot;pr109ita&quot;,sep=&quot;&quot;), offset=c(0,tile[t]), region.dim=c(1500,20))$band1
datagrids$pr110 = readGDAL(paste(path.rasters,&quot;pr110ita&quot;,sep=&quot;&quot;), offset=c(0,tile[t]), region.dim=c(1500,20))$band1
&nbsp;
gc()
datagrids$pr111 = readGDAL(paste(path.rasters,&quot;pr111ita&quot;,sep=&quot;&quot;), offset=c(0,tile[t]), region.dim=c(1500,20))$band1
datagrids$pr118 = readGDAL(paste(path.rasters,&quot;pr118ita&quot;,sep=&quot;&quot;), offset=c(0,tile[t]), region.dim=c(1500,20))$band1
&nbsp;
gc()
datagrids$pr120 = readGDAL(paste(path.rasters,&quot;pr120ita&quot;,sep=&quot;&quot;), offset=c(0,tile[t]), region.dim=c(1500,20))$band1
datagrids$pr123 = readGDAL(paste(path.rasters,&quot;pr123ita&quot;,sep=&quot;&quot;), offset=c(0,tile[t]), region.dim=c(1500,20))$band1
&nbsp;
gc()
datagrids$pr126 = readGDAL(paste(path.rasters,&quot;pr126ita&quot;,sep=&quot;&quot;), offset=c(0,tile[t]), region.dim=c(1500,20))$band1
datagrids$pr128 = readGDAL(paste(path.rasters,&quot;pr128ita&quot;,sep=&quot;&quot;), offset=c(0,tile[t]), region.dim=c(1500,20))$band1
&nbsp;
gc()
datagrids$pr131 = readGDAL(paste(path.rasters,&quot;pr131ita&quot;,sep=&quot;&quot;), offset=c(0,tile[t]), region.dim=c(1500,20))$band1
datagrids$pr134 = readGDAL(paste(path.rasters,&quot;pr134ita&quot;,sep=&quot;&quot;), offset=c(0,tile[t]), region.dim=c(1500,20))$band1
&nbsp;
gc()
datagrids$pr135 = readGDAL(paste(path.rasters,&quot;pr135ita&quot;,sep=&quot;&quot;), offset=c(0,tile[t]), region.dim=c(1500,20))$band1
datagrids$pr136 = readGDAL(paste(path.rasters,&quot;pr136ita&quot;,sep=&quot;&quot;), offset=c(0,tile[t]), region.dim=c(1500,20))$band1
&nbsp;
gc()
datagrids$pr137 = readGDAL(paste(path.rasters,&quot;pr137ita&quot;,sep=&quot;&quot;), offset=c(0,tile[t]), region.dim=c(1500,20))$band1
datagrids$pr138 = readGDAL(paste(path.rasters,&quot;pr138ita&quot;,sep=&quot;&quot;), offset=c(0,tile[t]), region.dim=c(1500,20))$band1
&nbsp;
datagrids$pr198 = readGDAL(paste(path.rasters,&quot;pr198ita&quot;,sep=&quot;&quot;), offset=c(0,tile[t]), region.dim=c(1500,20))$band1
datagrids$pr200 = readGDAL(paste(path.rasters,&quot;pr200ita&quot;,sep=&quot;&quot;), offset=c(0,tile[t]), region.dim=c(1500,20))$band1
gc()
&nbsp;
datagrids$pr201 = readGDAL(paste(path.rasters,&quot;pr201ita&quot;,sep=&quot;&quot;), offset=c(0,tile[t]), region.dim=c(1500,20))$band1
datagrids$pr202 = readGDAL(paste(path.rasters,&quot;pr202ita&quot;,sep=&quot;&quot;), offset=c(0,tile[t]), region.dim=c(1500,20))$band1
gc()
datagrids$pr203 = readGDAL(paste(path.rasters,&quot;pr203ita&quot;,sep=&quot;&quot;), offset=c(0,tile[t]), region.dim=c(1500,20))$band1
datagrids$pr204 = readGDAL(paste(path.rasters,&quot;pr204ita&quot;,sep=&quot;&quot;), offset=c(0,tile[t]), region.dim=c(1500,20))$band1
&nbsp;
gc()
&nbsp;
cat(&quot; ---- 23 grids inported into datagrids file - now drawing the map------\n&quot;)
&nbsp;
&nbsp;
&nbsp;
## predict function is used to calculate pixel values and index accordind to the random forest model and original rasters inported 
&nbsp;
pred.mapRF = predict (RF23tuned , newdata=datagrids, type=&quot;response&quot;)
cat(&quot;class predicted\n&quot;)
&nbsp;
pred.mapRFindex = predict (RF23tuned , newdata=datagrids, type=&quot;vote&quot;)
cat(&quot;class index recorded\n&quot;)
&nbsp;
cat(&quot;map values for Forest Type calculated and added to predict map vector\n&quot;)
&nbsp;
&nbsp;
## NOW create an empty tile with geographical coordinates to pixel values = 20
data2map = readGDAL(paste(path.rasters,&quot;pr104ita&quot;,sep=&quot;&quot;), offset=c(0,tile[t]), region.dim=c(1500,20))
cat(&quot;geocoordinates inported\n&quot;)
&nbsp;
data2map$band1 = 20
cat(&quot; no data value is now = 15 in this tile[t]\n&quot;)
&nbsp;
## NOW adding predicted values to the empty tile[t] 
&nbsp;
data2map$band1[as.numeric(dimnames(pred.mapRFindex)[[1]])] = as.numeric(pred.mapRF)
cat(&quot;class values added to tile[t]\n&quot;)
&nbsp;
&nbsp;
## NOW creating an asciii TILE file for modelled species 
&nbsp;
write.asciigrid(data2map, paste(path.results,t,&quot;tile_ITAveg.asc&quot;,sep=&quot;&quot;))
&nbsp;
&nbsp;
cat(&quot;-----------------------------------------Tile&quot;, t,&quot;created--------------------------\n&quot;)
&nbsp;
## cleaning up the memory 
rm(data2map)
rm(datagrids)
rm(pred.mapRF)
rm(pred.mapRFindex)
gc()
&nbsp;
}</pre>
</dd></dl>

</div>
<!-- EDIT12 SECTION "Full script" [6901-] -->