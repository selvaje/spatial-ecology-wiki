<span class="co1">#!/usr/bin/env python</span>
<span class="co1">#</span>
<span class="co1"># Example uses of the subprocess module. For more information, see:</span>
<span class="co1">#</span>
<span class="co1">#  https://docs.python.org/2/library/subprocess.html</span>
<span class="co1">#</span>
<span class="kw1">from</span> <span class="kw3">subprocess</span> <span class="kw1">import</span> Popen<span class="sy0">,</span> call<span class="sy0">,</span> check_output<span class="sy0">,</span> STDOUT<span class="sy0">,</span> PIPE
&nbsp;
<span class="co1">#### bash: ls -l</span>
status <span class="sy0">=</span> call<span class="br0">&#40;</span><span class="st0">'ls -l'</span><span class="sy0">,</span> shell<span class="sy0">=</span><span class="kw2">True</span><span class="br0">&#41;</span>
&nbsp;
status <span class="sy0">=</span> call<span class="br0">&#40;</span><span class="br0">&#91;</span><span class="st0">'ls'</span><span class="sy0">,</span> <span class="st0">'-l'</span><span class="br0">&#93;</span><span class="br0">&#41;</span>
&nbsp;
<span class="co1">#### bash: S=$(echo $USER)</span>
s <span class="sy0">=</span> check_output<span class="br0">&#40;</span><span class="st0">'echo $USER'</span><span class="sy0">,</span> shell<span class="sy0">=</span><span class="kw2">True</span><span class="br0">&#41;</span>.<span class="me1">rstrip</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="kw1">print</span> s
&nbsp;
<span class="co1"># this does *not* work since &quot;$USER&quot; is not substituted without shell</span>
s <span class="sy0">=</span> check_output<span class="br0">&#40;</span><span class="br0">&#91;</span><span class="st0">'echo'</span><span class="sy0">,</span> <span class="st0">'$USER'</span><span class="br0">&#93;</span><span class="br0">&#41;</span>.<span class="me1">rstrip</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="kw1">print</span> s
&nbsp;
<span class="co1"># to capture both stdout and stderr, set &quot;stderr&quot; option to &quot;STDOUT&quot;</span>
s <span class="sy0">=</span> check_output<span class="br0">&#40;</span><span class="st0">'echo $USER 1&gt;&amp;2'</span><span class="sy0">,</span> stderr<span class="sy0">=</span>STDOUT<span class="sy0">,</span> shell<span class="sy0">=</span><span class="kw2">True</span><span class="br0">&#41;</span>.<span class="me1">rstrip</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="kw1">print</span> s
&nbsp;
<span class="co1">#### bash: ls | wc -l</span>
p <span class="sy0">=</span> Popen<span class="br0">&#40;</span><span class="br0">&#91;</span><span class="st0">'ls'</span><span class="br0">&#93;</span><span class="sy0">,</span> stdout<span class="sy0">=</span>PIPE<span class="br0">&#41;</span>
status <span class="sy0">=</span> call<span class="br0">&#40;</span><span class="br0">&#91;</span><span class="st0">'wc'</span><span class="sy0">,</span> <span class="st0">'-l'</span><span class="br0">&#93;</span><span class="sy0">,</span> stdin<span class="sy0">=</span>p.<span class="me1">stdout</span><span class="br0">&#41;</span>
status <span class="sy0">=</span> p.<span class="me1">wait</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp;
<span class="co1">#### bash: S=$(ls | grep '\.py$' | wc -l)</span>
p1 <span class="sy0">=</span> Popen<span class="br0">&#40;</span><span class="br0">&#91;</span><span class="st0">'ls'</span><span class="br0">&#93;</span><span class="sy0">,</span>                              stdout<span class="sy0">=</span>PIPE<span class="br0">&#41;</span>
p2 <span class="sy0">=</span> Popen<span class="br0">&#40;</span><span class="br0">&#91;</span><span class="st0">'grep'</span><span class="sy0">,</span> <span class="st0">'<span class="es0">\\</span>.py$'</span><span class="br0">&#93;</span><span class="sy0">,</span> stdin<span class="sy0">=</span>p1.<span class="me1">stdout</span><span class="sy0">,</span> stdout<span class="sy0">=</span>PIPE<span class="br0">&#41;</span>
p3 <span class="sy0">=</span> Popen<span class="br0">&#40;</span><span class="br0">&#91;</span><span class="st0">'wc'</span><span class="sy0">,</span> <span class="st0">'-l'</span><span class="br0">&#93;</span><span class="sy0">,</span>       stdin<span class="sy0">=</span>p2.<span class="me1">stdout</span><span class="sy0">,</span> stdout<span class="sy0">=</span>PIPE<span class="br0">&#41;</span>
s <span class="sy0">=</span> p3.<span class="me1">communicate</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="kw1">print</span> s
<span class="kw1">print</span> s<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span>.<span class="me1">strip</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp;
<span class="co1">#### bash: ls *.py</span>
status <span class="sy0">=</span> call<span class="br0">&#40;</span><span class="st0">'ls *.py'</span><span class="sy0">,</span> shell<span class="sy0">=</span><span class="kw2">True</span><span class="br0">&#41;</span>
&nbsp;
<span class="co1"># this does *not* work since &quot;*.py&quot; is expanded by the shell, not &quot;ls&quot;</span>
status <span class="sy0">=</span> call<span class="br0">&#40;</span><span class="br0">&#91;</span><span class="st0">'ls'</span><span class="sy0">,</span> <span class="st0">'*.py'</span><span class="br0">&#93;</span><span class="br0">&#41;</span>
<span class="kw1">print</span> <span class="st0">&quot;Exit status:&quot;</span><span class="sy0">,</span> status
&nbsp;
<span class="co1"># use glob module to expand &quot;*.py&quot;</span>
<span class="kw1">import</span> <span class="kw3">glob</span>
status <span class="sy0">=</span> call<span class="br0">&#40;</span><span class="br0">&#91;</span><span class="st0">'ls'</span><span class="br0">&#93;</span> + <span class="kw3">glob</span>.<span class="kw3">glob</span><span class="br0">&#40;</span><span class="st0">'*.py'</span><span class="br0">&#41;</span><span class="br0">&#41;</span>