<span class="st0">&quot;&quot;&quot;
Provides a simple command-line-output
version of the least cost path solution
using randomly-generated notional arrays.
&quot;&quot;&quot;</span>
&nbsp;
<span class="kw1">import</span> numpy <span class="kw1">as</span> np
&nbsp;
<span class="co1"># Our A* search algorithm  </span>
<span class="kw1">def</span> astar<span class="br0">&#40;</span>start<span class="sy0">,</span> end<span class="sy0">,</span> h<span class="sy0">,</span> g<span class="br0">&#41;</span>:
  cset <span class="sy0">=</span> <span class="kw2">set</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
  oset <span class="sy0">=</span> <span class="kw2">set</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
  path <span class="sy0">=</span> <span class="kw2">set</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
  oset.<span class="me1">add</span><span class="br0">&#40;</span>start<span class="br0">&#41;</span>
  <span class="kw1">while</span> oset:
    cur <span class="sy0">=</span> oset.<span class="me1">pop</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
    <span class="kw1">if</span> cur <span class="sy0">==</span> end:
      <span class="kw1">return</span> path
    cset.<span class="me1">add</span><span class="br0">&#40;</span>cur<span class="br0">&#41;</span>
    path.<span class="me1">add</span><span class="br0">&#40;</span>cur<span class="br0">&#41;</span>
    options <span class="sy0">=</span> <span class="br0">&#91;</span><span class="br0">&#93;</span>
    y1 <span class="sy0">=</span> cur<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span>
    x1 <span class="sy0">=</span> cur<span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span>
    <span class="kw1">if</span> y1 <span class="sy0">&gt;</span> <span class="nu0">0</span>: 
      options.<span class="me1">append</span><span class="br0">&#40;</span><span class="br0">&#40;</span>y1-<span class="nu0">1</span><span class="sy0">,</span> x1<span class="br0">&#41;</span><span class="br0">&#41;</span>
    <span class="kw1">if</span> y1 <span class="sy0">&lt;</span> h.<span class="me1">shape</span><span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span>-<span class="nu0">1</span>: 
      options.<span class="me1">append</span><span class="br0">&#40;</span><span class="br0">&#40;</span>y1+<span class="nu0">1</span><span class="sy0">,</span> x1<span class="br0">&#41;</span><span class="br0">&#41;</span>
    <span class="kw1">if</span> x1 <span class="sy0">&gt;</span> <span class="nu0">0</span>: 
      options.<span class="me1">append</span><span class="br0">&#40;</span><span class="br0">&#40;</span>y1<span class="sy0">,</span> x1-<span class="nu0">1</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
    <span class="kw1">if</span> x1 <span class="sy0">&lt;</span> h.<span class="me1">shape</span><span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span>-<span class="nu0">1</span>: 
      options.<span class="me1">append</span><span class="br0">&#40;</span><span class="br0">&#40;</span>y1<span class="sy0">,</span> x1+<span class="nu0">1</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
    <span class="kw1">if</span> end <span class="kw1">in</span> options:
      <span class="kw1">return</span> path
    best <span class="sy0">=</span> options<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span>
    cset.<span class="me1">add</span><span class="br0">&#40;</span>options<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span><span class="br0">&#41;</span>
    <span class="kw1">for</span> i <span class="kw1">in</span> <span class="kw2">range</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="sy0">,</span><span class="kw2">len</span><span class="br0">&#40;</span>options<span class="br0">&#41;</span><span class="br0">&#41;</span>:
      option <span class="sy0">=</span> options<span class="br0">&#91;</span>i<span class="br0">&#93;</span>
      <span class="kw1">if</span> option <span class="kw1">in</span> cset:
        <span class="kw1">continue</span>
      <span class="kw1">elif</span> h<span class="br0">&#91;</span>option<span class="br0">&#93;</span> <span class="sy0">&lt;=</span> h<span class="br0">&#91;</span>best<span class="br0">&#93;</span>:
        best <span class="sy0">=</span> option   
        cset.<span class="me1">add</span><span class="br0">&#40;</span>option<span class="br0">&#41;</span>
      <span class="kw1">elif</span> g<span class="br0">&#91;</span>option<span class="br0">&#93;</span> <span class="sy0">&lt;</span> g<span class="br0">&#91;</span>best<span class="br0">&#93;</span>:
        best <span class="sy0">=</span> option
        cset.<span class="me1">add</span><span class="br0">&#40;</span>option<span class="br0">&#41;</span>
      <span class="kw1">else</span>:
        cset.<span class="me1">add</span><span class="br0">&#40;</span>option<span class="br0">&#41;</span>
    <span class="kw1">print</span> best<span class="sy0">,</span> <span class="st0">&quot;, &quot;</span><span class="sy0">,</span> h<span class="br0">&#91;</span>best<span class="br0">&#93;</span><span class="sy0">,</span> <span class="st0">&quot;, &quot;</span><span class="sy0">,</span> g<span class="br0">&#91;</span>best<span class="br0">&#93;</span>
    oset.<span class="me1">add</span><span class="br0">&#40;</span>best<span class="br0">&#41;</span>
  <span class="kw1">return</span> <span class="br0">&#91;</span><span class="br0">&#93;</span>
&nbsp;
&nbsp;
<span class="co1"># Width and height</span>
<span class="co1"># of grids</span>
w <span class="sy0">=</span> <span class="nu0">5</span>
h <span class="sy0">=</span> <span class="nu0">5</span>
&nbsp;
<span class="co1"># Start location:</span>
<span class="co1"># Lower left of grid</span>
start <span class="sy0">=</span> <span class="br0">&#40;</span>h-<span class="nu0">1</span><span class="sy0">,</span> <span class="nu0">0</span><span class="br0">&#41;</span>
&nbsp;
<span class="co1"># End location:</span>
<span class="co1"># Top right of grid</span>
dx <span class="sy0">=</span> w-<span class="nu0">1</span>
dy <span class="sy0">=</span> <span class="nu0">0</span>
&nbsp;
<span class="co1"># Blank grid</span>
a <span class="sy0">=</span> np.<span class="me1">zeros</span><span class="br0">&#40;</span><span class="br0">&#40;</span>w<span class="sy0">,</span>h<span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp;
<span class="co1"># Distance grid</span>
dist <span class="sy0">=</span> np.<span class="me1">zeros</span><span class="br0">&#40;</span>a.<span class="me1">shape</span><span class="sy0">,</span> dtype<span class="sy0">=</span>np.<span class="me1">int8</span><span class="br0">&#41;</span>
&nbsp;
<span class="co1"># Calculate distance for all cells</span>
<span class="kw1">for</span> y<span class="sy0">,</span>x <span class="kw1">in</span> np.<span class="me1">ndindex</span><span class="br0">&#40;</span>a.<span class="me1">shape</span><span class="br0">&#41;</span>:
  dist<span class="br0">&#91;</span>y<span class="br0">&#93;</span><span class="br0">&#91;</span>x<span class="br0">&#93;</span> <span class="sy0">=</span> <span class="kw2">abs</span><span class="br0">&#40;</span><span class="br0">&#40;</span>dx-x<span class="br0">&#41;</span>+<span class="br0">&#40;</span>dy-y<span class="br0">&#41;</span><span class="br0">&#41;</span>
&nbsp;
<span class="co1"># &quot;Terrain&quot; is a random value between 1-16.</span>
<span class="co1"># Add to the distance grid to calculate</span>
<span class="co1"># The cost of moving to a cell</span>
cost <span class="sy0">=</span> np.<span class="kw3">random</span>.<span class="me1">randint</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="sy0">,</span><span class="nu0">16</span><span class="sy0">,</span><span class="br0">&#40;</span>w<span class="sy0">,</span>h<span class="br0">&#41;</span><span class="br0">&#41;</span> + dist
&nbsp;
<span class="kw1">print</span> <span class="st0">&quot;COST GRID (Value + Distance)&quot;</span>
<span class="kw1">print</span> cost
<span class="kw1">print</span>
&nbsp;
<span class="kw1">print</span> <span class="st0">&quot;(Y,X), HEURISTIC, DISTANCE&quot;</span>
<span class="co1"># Find the path</span>
path <span class="sy0">=</span> astar<span class="br0">&#40;</span>start<span class="sy0">,</span><span class="br0">&#40;</span>dy<span class="sy0">,</span>dx<span class="br0">&#41;</span><span class="sy0">,</span>cost<span class="sy0">,</span> dist<span class="br0">&#41;</span>
<span class="kw1">print</span>
&nbsp;
<span class="co1"># Create and populate the path grid</span>
path_grid <span class="sy0">=</span> np.<span class="me1">zeros</span><span class="br0">&#40;</span>cost.<span class="me1">shape</span><span class="sy0">,</span> dtype<span class="sy0">=</span>np.<span class="me1">uint8</span><span class="br0">&#41;</span>
<span class="kw1">for</span> y<span class="sy0">,</span>x <span class="kw1">in</span> path:
  path_grid<span class="br0">&#91;</span>y<span class="br0">&#93;</span><span class="br0">&#91;</span>x<span class="br0">&#93;</span><span class="sy0">=</span><span class="nu0">1</span>
path_grid<span class="br0">&#91;</span>dy<span class="br0">&#93;</span><span class="br0">&#91;</span>dx<span class="br0">&#93;</span><span class="sy0">=</span><span class="nu0">1</span>
&nbsp;
<span class="kw1">print</span> <span class="st0">&quot;PATH GRID: 1=path&quot;</span>
<span class="kw1">print</span> path_grid