    <span class="st0">&quot;&quot;&quot;
    Output a normalized vegetative index
    &quot;&quot;&quot;</span>
    <span class="kw1">import</span> gdal<span class="sy0">,</span> gdalnumeric<span class="sy0">,</span> ogr
    <span class="kw1">import</span> Image<span class="sy0">,</span> ImageDraw
&nbsp;
    <span class="kw1">def</span> imageToArray<span class="br0">&#40;</span>i<span class="br0">&#41;</span>:
      <span class="st0">&quot;&quot;&quot;
      Converts a Python Imaging Library 
      array to a gdalnumeric image.
      &quot;&quot;&quot;</span>
      a<span class="sy0">=</span>gdalnumeric.<span class="me1">numpy</span>.<span class="me1">fromstring</span><span class="br0">&#40;</span>i.<span class="me1">tostring</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">,</span><span class="st0">'b'</span><span class="br0">&#41;</span>
      a.<span class="me1">shape</span><span class="sy0">=</span>i.<span class="me1">im</span>.<span class="me1">size</span><span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span><span class="sy0">,</span> i.<span class="me1">im</span>.<span class="me1">size</span><span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span>
      <span class="kw1">return</span> a
&nbsp;
    <span class="kw1">def</span> world2Pixel<span class="br0">&#40;</span>geoMatrix<span class="sy0">,</span> x<span class="sy0">,</span> y<span class="br0">&#41;</span>:
      <span class="st0">&quot;&quot;&quot;
      Uses a gdal geomatrix (gdal.GetGeoTransform()) 
      to calculate the pixel location of a 
      geospatial coordinate 
      &quot;&quot;&quot;</span>
      ulX <span class="sy0">=</span> geoMatrix<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span>
      ulY <span class="sy0">=</span> geoMatrix<span class="br0">&#91;</span><span class="nu0">3</span><span class="br0">&#93;</span>
      xDist <span class="sy0">=</span> geoMatrix<span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span>
      yDist <span class="sy0">=</span> geoMatrix<span class="br0">&#91;</span><span class="nu0">5</span><span class="br0">&#93;</span>
      rtnX <span class="sy0">=</span> geoMatrix<span class="br0">&#91;</span><span class="nu0">2</span><span class="br0">&#93;</span>
      rtnY <span class="sy0">=</span> geoMatrix<span class="br0">&#91;</span><span class="nu0">4</span><span class="br0">&#93;</span>
      pixel <span class="sy0">=</span> <span class="kw2">int</span><span class="br0">&#40;</span><span class="br0">&#40;</span>x - ulX<span class="br0">&#41;</span> / xDist<span class="br0">&#41;</span>
      line <span class="sy0">=</span> <span class="kw2">int</span><span class="br0">&#40;</span><span class="br0">&#40;</span>ulY - y<span class="br0">&#41;</span> / xDist<span class="br0">&#41;</span>
      <span class="kw1">return</span> <span class="br0">&#40;</span>pixel<span class="sy0">,</span> line<span class="br0">&#41;</span>    
&nbsp;
    <span class="co1"># Multispectral image used </span>
    <span class="co1"># to create the NDVI. Must</span>
    <span class="co1"># have red and infrared</span>
    <span class="co1"># bands</span>
    source <span class="sy0">=</span> <span class="st0">&quot;farm.tif&quot;</span>
&nbsp;
    <span class="co1"># Output geotiff file name</span>
    target <span class="sy0">=</span> <span class="st0">&quot;ndvi.tif&quot;</span>
&nbsp;
    <span class="co1"># Load the source data as a gdalnumeric array</span>
    srcArray <span class="sy0">=</span> gdalnumeric.<span class="me1">LoadFile</span><span class="br0">&#40;</span>source<span class="br0">&#41;</span>
&nbsp;
    <span class="co1"># Also load as a gdal image to </span>
    <span class="co1"># get geotransform (world file) info</span>
    srcImage <span class="sy0">=</span> gdal.<span class="me1">Open</span><span class="br0">&#40;</span>source<span class="br0">&#41;</span>
    geoTrans <span class="sy0">=</span> srcImage.<span class="me1">GetGeoTransform</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp;
    <span class="co1"># Red and infrared (or near infrared) bands</span>
    r <span class="sy0">=</span> srcArray<span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span>
    ir <span class="sy0">=</span> srcArray<span class="br0">&#91;</span><span class="nu0">2</span><span class="br0">&#93;</span>
&nbsp;
    <span class="co1">## Clip a field out of the bands using a</span>
    <span class="co1">## field boundary shapefile</span>
&nbsp;
    <span class="co1"># Create an OGR layer from a Field boundary shapefile</span>
    field <span class="sy0">=</span> ogr.<span class="me1">Open</span><span class="br0">&#40;</span><span class="st0">&quot;field.shp&quot;</span><span class="br0">&#41;</span>
    <span class="co1"># Must define a &quot;layer&quot; to keep OGR happy</span>
    lyr <span class="sy0">=</span> field.<span class="me1">GetLayer</span><span class="br0">&#40;</span><span class="st0">&quot;field&quot;</span><span class="br0">&#41;</span>
    <span class="co1"># Only one polygon in this shapefile</span>
    poly <span class="sy0">=</span> lyr.<span class="me1">GetNextFeature</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp;
    <span class="co1"># Convert the layer extent to image pixel coordinates</span>
    minX<span class="sy0">,</span> maxX<span class="sy0">,</span> minY<span class="sy0">,</span> maxY <span class="sy0">=</span> lyr.<span class="me1">GetExtent</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
    ulX<span class="sy0">,</span> ulY <span class="sy0">=</span> world2Pixel<span class="br0">&#40;</span>geoTrans<span class="sy0">,</span> minX<span class="sy0">,</span> maxY<span class="br0">&#41;</span>
    lrX<span class="sy0">,</span> lrY <span class="sy0">=</span> world2Pixel<span class="br0">&#40;</span>geoTrans<span class="sy0">,</span> maxX<span class="sy0">,</span> minY<span class="br0">&#41;</span>
&nbsp;
    <span class="co1"># Calculate the pixel size of the new image</span>
    pxWidth <span class="sy0">=</span> <span class="kw2">int</span><span class="br0">&#40;</span>lrX - ulX<span class="br0">&#41;</span>
    pxHeight <span class="sy0">=</span> <span class="kw2">int</span><span class="br0">&#40;</span>lrY - ulY<span class="br0">&#41;</span>
&nbsp;
    <span class="co1"># Create a blank image of the correct size</span>
    <span class="co1"># that will serve as our mask</span>
    clipped <span class="sy0">=</span> gdalnumeric.<span class="me1">numpy</span>.<span class="me1">zeros</span><span class="br0">&#40;</span><span class="br0">&#40;</span><span class="nu0">3</span><span class="sy0">,</span> pxHeight<span class="sy0">,</span> pxWidth<span class="br0">&#41;</span><span class="sy0">,</span> \
    gdalnumeric.<span class="me1">numpy</span>.<span class="me1">uint8</span><span class="br0">&#41;</span>
    <span class="co1">#mmask = gdalnumeric.zeros((3, pxHeight, pxWidth), gdalnumeric.UnsignedInt8)</span>
    <span class="co1">#rgb = rgb.astype(gdalnumeric.UnsignedInt8)</span>
    rClip <span class="sy0">=</span> r<span class="br0">&#91;</span>ulY:lrY<span class="sy0">,</span> ulX:lrX<span class="br0">&#93;</span>
    irClip <span class="sy0">=</span> ir<span class="br0">&#91;</span>ulY:lrY<span class="sy0">,</span> ulX:lrX<span class="br0">&#93;</span>
&nbsp;
    <span class="co1"># Create a new geomatrix for the image</span>
    geoTrans <span class="sy0">=</span> <span class="kw2">list</span><span class="br0">&#40;</span>geoTrans<span class="br0">&#41;</span>
    geoTrans<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span> <span class="sy0">=</span> minX
    geoTrans<span class="br0">&#91;</span><span class="nu0">3</span><span class="br0">&#93;</span> <span class="sy0">=</span> maxY
&nbsp;
    <span class="co1"># Map points to pixels for drawing </span>
    <span class="co1"># the field boundary on a blank</span>
    <span class="co1"># 8-bit, black and white, mask image.</span>
    points <span class="sy0">=</span> <span class="br0">&#91;</span><span class="br0">&#93;</span>
    pixels <span class="sy0">=</span> <span class="br0">&#91;</span><span class="br0">&#93;</span>
    <span class="co1"># Grab the polygon geometry</span>
    geom <span class="sy0">=</span> poly.<span class="me1">GetGeometryRef</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
    pts <span class="sy0">=</span> geom.<span class="me1">GetGeometryRef</span><span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span>
    <span class="co1"># Loop through geometry and turn</span>
    <span class="co1"># the points into an easy-to-manage </span>
    <span class="co1"># Python list </span>
    <span class="kw1">for</span> p <span class="kw1">in</span> <span class="kw2">range</span><span class="br0">&#40;</span>pts.<span class="me1">GetPointCount</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>:
      points.<span class="me1">append</span><span class="br0">&#40;</span><span class="br0">&#40;</span>pts.<span class="me1">GetX</span><span class="br0">&#40;</span>p<span class="br0">&#41;</span><span class="sy0">,</span> pts.<span class="me1">GetY</span><span class="br0">&#40;</span>p<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
    <span class="co1"># Loop through the points and map to pixels.</span>
    <span class="co1"># Append the pixels to a pixel list</span>
    <span class="kw1">for</span> p <span class="kw1">in</span> points:
      pixels.<span class="me1">append</span><span class="br0">&#40;</span>world2Pixel<span class="br0">&#40;</span>geoTrans<span class="sy0">,</span> p<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span><span class="sy0">,</span> p<span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
    <span class="co1"># Create the raster polygon image</span>
    rasterPoly <span class="sy0">=</span> Image.<span class="kw3">new</span><span class="br0">&#40;</span><span class="st0">&quot;L&quot;</span><span class="sy0">,</span> <span class="br0">&#40;</span>pxWidth<span class="sy0">,</span> pxHeight<span class="br0">&#41;</span><span class="sy0">,</span> <span class="nu0">1</span><span class="br0">&#41;</span>
    <span class="co1"># Create a PIL drawing object</span>
    rasterize <span class="sy0">=</span> ImageDraw.<span class="me1">Draw</span><span class="br0">&#40;</span>rasterPoly<span class="br0">&#41;</span>
    <span class="co1"># Dump the pixels to the image</span>
    rasterize.<span class="me1">polygon</span><span class="br0">&#40;</span>pixels<span class="sy0">,</span> <span class="nu0">0</span><span class="br0">&#41;</span>
    <span class="co1"># Hand the image back to gdal/gdalnumeric</span>
    <span class="co1"># so we can use it as an array mask</span>
    mask <span class="sy0">=</span> imageToArray<span class="br0">&#40;</span>rasterPoly<span class="br0">&#41;</span>    
    <span class="co1"># Clip the red band using the mask   </span>
    rClip <span class="sy0">=</span> gdalnumeric.<span class="me1">numpy</span>.<span class="me1">choose</span><span class="br0">&#40;</span>mask<span class="sy0">,</span> \
      <span class="br0">&#40;</span>rClip<span class="sy0">,</span> <span class="nu0">0</span><span class="br0">&#41;</span><span class="br0">&#41;</span>.<span class="me1">astype</span><span class="br0">&#40;</span>gdalnumeric.<span class="me1">numpy</span>.<span class="me1">uint8</span><span class="br0">&#41;</span>
    <span class="co1"># Clip the infrared band using the mask</span>
    irClip <span class="sy0">=</span> gdalnumeric.<span class="me1">numpy</span>.<span class="me1">choose</span><span class="br0">&#40;</span>mask<span class="sy0">,</span> \
      <span class="br0">&#40;</span>irClip<span class="sy0">,</span> <span class="nu0">0</span><span class="br0">&#41;</span><span class="br0">&#41;</span>.<span class="me1">astype</span><span class="br0">&#40;</span>gdalnumeric.<span class="me1">numpy</span>.<span class="me1">uint8</span><span class="br0">&#41;</span>
&nbsp;
    <span class="co1"># We don't care about numpy warnings</span>
    <span class="co1"># due to NaN values from clipping</span>
    gdalnumeric.<span class="me1">numpy</span>.<span class="me1">seterr</span><span class="br0">&#40;</span><span class="kw2">all</span><span class="sy0">=</span><span class="st0">&quot;ignore&quot;</span><span class="br0">&#41;</span>
&nbsp;
    <span class="co1"># NDVI equation: (infrared - red) / (infrared + red)</span>
    <span class="co1"># *1.0 converts values to floats, </span>
    <span class="co1"># +1.0 prevents ZeroDivisionErrors </span>
    ndvi <span class="sy0">=</span> <span class="nu0">1.0</span> * <span class="br0">&#40;</span>irClip - rClip<span class="br0">&#41;</span> / irClip + rClip + <span class="nu0">1.0</span>
&nbsp;
    <span class="co1"># Remove any NaN values from the final product</span>
    ndvi <span class="sy0">=</span> gdalnumeric.<span class="me1">numpy</span>.<span class="me1">nan_to_num</span><span class="br0">&#40;</span>ndvi<span class="br0">&#41;</span>
&nbsp;
    <span class="co1"># Save ndvi as tiff</span>
    gdalnumeric.<span class="me1">SaveArray</span><span class="br0">&#40;</span>ndvi<span class="sy0">,</span> target<span class="sy0">,</span> \
      format<span class="sy0">=</span><span class="st0">&quot;GTiff&quot;</span><span class="sy0">,</span> prototype<span class="sy0">=</span>source<span class="br0">&#41;</span>