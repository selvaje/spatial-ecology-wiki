
<h1 class="sectionedit1" id="hands_on_grass_-_first_steps">Hands on GRASS - First steps</h1>
<div class="level1">
<ul>
<li class="level1"><div class="li">Lecture: <a href="http://www.spatial-ecology.net/ost4sem/lecture/grass_intro_yale2015.pdf" class="urlextern" target="blanc" title="http://www.spatial-ecology.net/ost4sem/lecture/grass_intro_yale2015.pdf" rel="nofollow noopener"> Introduction to GRASS </a>
<p>
 The objective of this page is to start using GRASS and become familiar with some general GIS operations.
 We are going to use a command line approach. This will enable us to carry out stand alone processes and understand step-by-step the functions and available options.
 Let´s start using grass.<br/>

<br/>

<a href="http://www.spatial-ecology.net/ost4sem/exercise/basic_adv_grass/basic_grass_yale.sh" class="urlextern" target="blanc" title="http://www.spatial-ecology.net/ost4sem/exercise/basic_adv_grass/basic_grass_yale.sh" rel="nofollow noopener">download the script</a> and save VM@:~/ost4sem/exercise/basic<em>adv</em>grass/basic<em>grass</em>yale.sh
</p>
</div>
</li>
</ul>

<p>
<br/>

</p>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;Hands on GRASS - First steps&quot;,&quot;hid&quot;:&quot;hands_on_grass_-_first_steps&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:1,&quot;range&quot;:&quot;2-648&quot;} -->
<h3 class="sectionedit2" id="starting_grass">Starting Grass</h3>
<div class="level3">
<div class="plugin_note noteimportant"> A common problem of new users is not really to use grass but to start a grass session. The main reason is due to the somewhat complex grass data structure and the way a grass session has to be set up before starting ! 
 
</div>
<p>
 Every Grass project has a predefined data structure
</p>
<ul>
<li class="level1"><div class="li">GISDBASE - Grass data are stored in a directory referred to as DATABASE  “GISDBASE”. This directory has to be created with mkdir or a file manager, before starting to work with GRASS. Within this DATABASE, the projects are organized by project areas stored in subdirectories called LOCATIONs.
<ul>
<li class="level1"><div class="li"> LOCATION - A Location is defined by its coordinate system, map projection and geographical boundaries. The subdirectories and files defining a LOCATION are created automatically when GRASS is started the first time with a new LOCATION.</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> MAPSET - Location can have many MAPSETs. Each MAPSET is a LOCATION&#039;s subdirectory. New MAPSET can be added at GRASS startup. </div>
</li>
</ul>

<p>
 To remove a MAPSET, remove it&#039;s directory using your file manager or by
</p>

<p>
   rm -rf /path/./mapset<em>to</em>delete
 The wxGUI graphical user interface provides options to rename/remove LOCATIONs and MAPSETs. 
</p>

<p>
 There are several way to use and open Grass. The simplest way is to open a terminal and type
   grass -wxpython
 the Graphical User Interface (<abbr title="Graphical User Interface">GUI</abbr>) will ask you to define the GISDBASE, LOCATION and MAPSET to use.   If you want you can select the Location wizard to create a new location with newest projection parameters or the Create mapset button to create a new mapset inside a pre-existing location.
</p>

<p>
 To start grass in a terminal:
</p>

<p>
   grass -text  ~/ost4sem/grassdb/europe/PCEM
</p>

<p>
 Using the above command we have already entered into the Grass environment with the GISDBASE, LOCATION and MAPSET defined by the ~/ost4sem/grassdb/europe/PCEM path
 
</p>
<div class="plugin_note notetip"> Once you are running Grass through the bash shell terminal you can always start the graphical user interface with:<pre class="code">  g.gui wxpython</pre>



</div></div>
</li>
</ul>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;Starting Grass&quot;,&quot;hid&quot;:&quot;starting_grass&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:2,&quot;range&quot;:&quot;649-2663&quot;} -->
<h2 class="sectionedit3" id="grass_command_structure">GRASS COMMAND STRUCTURE</h2>
<div class="level2">

<p>
<br/>

</p>
<div class="table sectionedit4"><table class="inline">
	<thead>
	<tr class="row0">
		<th class="col0">prefix </th><th class="col1 leftalign"> function    </th><th class="col2 leftalign"> class type of command          </th><th class="col3 leftalign"> example                               </th>
	</tr>
	</thead>
	<tr class="row1">
		<td class="col0 leftalign">d.*    </td><td class="col1 centeralign">   display   </td><td class="col2 centeralign">    graphical output          </td><td class="col3 leftalign"> d.rast: views raster map                </td>
	</tr>
	<tr class="row2">
		<td class="col0 leftalign">       </td><td class="col1 leftalign">             </td><td class="col2 leftalign">                              </td><td class="col3 leftalign"> d.vect: views vector map                </td>
	</tr>
	<tr class="row3">
		<td class="col0 leftalign">db.*   </td><td class="col1 centeralign">  database   </td><td class="col2 leftalign"> database management          </td><td class="col3 leftalign"> db.select: selects value(s) from table  </td>
	</tr>
	<tr class="row4">
		<td class="col0 leftalign">g.*    </td><td class="col1 centeralign">  general    </td><td class="col2 leftalign"> general file operations      </td><td class="col3 leftalign"> g.rename: renames map                   </td>
	</tr>
	<tr class="row5">
		<td class="col0 leftalign">i.*    </td><td class="col1 centeralign">  imagery    </td><td class="col2 leftalign"> image processing             </td><td class="col3 leftalign"> i.smap: image classifier                </td>
	</tr>
	<tr class="row6">
		<td class="col0 leftalign">ps.*   </td><td class="col1 rightalign">  postscript </td><td class="col2 leftalign"> map creation format          </td><td class="col3 leftalign"> ps.map: map creation in Postscript      </td>
	</tr>
	<tr class="row7">
		<td class="col0 leftalign" rowspan="2">r.*    </td><td class="col1 leftalign" rowspan="2"> raster      </td><td class="col2 leftalign" rowspan="2"> raster data processing       </td><td class="col3"> r.buffer: buffer around raster features </td>
	</tr>
	<tr class="row8">
		<td class="col0 leftalign"> r.mapcalc: map algebra                  </td>
	</tr>
	<tr class="row9">
		<td class="col0 leftalign">r3.*   </td><td class="col1 leftalign"> voxel       </td><td class="col2"> raster voxel data processing </td><td class="col3 leftalign"> r3.mapcalc: volume map algebra          </td>
	</tr>
	<tr class="row10">
		<td class="col0 leftalign">v.*    </td><td class="col1 leftalign"> vector      </td><td class="col2 leftalign"> vector data processing       </td><td class="col3 leftalign"> v.overlay: vector map intersections     </td>
	</tr>
</table></div>
<!-- EDIT{&quot;target&quot;:&quot;table&quot;,&quot;name&quot;:&quot;&quot;,&quot;hid&quot;:&quot;table&quot;,&quot;secid&quot;:4,&quot;range&quot;:&quot;2704-3770&quot;} -->
<p>
<br/>

<br/>

 
</p>
<div class="plugin_note notetip"> For detailed instructions on grass command syntax and use go to the <a href="http://grass.osgeo.org/gdp/html_grass64/index.html" class="urlextern" target="blanc" title="http://grass.osgeo.org/gdp/html_grass64/index.html" rel="nofollow noopener">GRASSonline manual</a> or type the function name –man. As an example<pre class="code"> r.info --man</pre>



</div>
<p>
 <br/>

</p>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;GRASS COMMAND STRUCTURE&quot;,&quot;hid&quot;:&quot;grass_command_structure&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:3,&quot;range&quot;:&quot;2664-4007&quot;} -->
<h3 class="sectionedit5" id="grass_working_environment">Grass working environment</h3>
<div class="level3">

<p>
 The <strong>g.gisenv</strong> command informs you on your current grass environment settings
</p>
<pre class="code"> g.gisenv</pre>

<p>
 If you started grass correctly you should visualize the following lines on your terminal 
</p>
<pre class="code"> GISDBASE=/home/user/ost4sem/grassdb
 LOCATION_NAME=europe
 MAPSET=PCEM
 MONITOR=x2
 GRASS_GUI=text
 GRASS 7.0 (europe):~ &gt; </pre>
<div class="plugin_note noteimportant"> Running grass through the bash shell terminal allows you to use all command lines functionality of both grass and shell. As an example you can type<pre class="code">ls</pre>

<p>
 and visualize all files available in your shell current working directory. This means that all your output files produced by bash command lines functionality will be saved in the current working directory (if not specified differently). Many non-geographical grass output features such as text file reports or images will be saved as well in the current working directory. The <strong> GRASS 6.4.0RC5 (europe):~ &gt; </strong> informs you are currently working in the home folder. See
</p>
<pre class="code">pwd</pre>

<p>
 for double checking the same information  using a bash command instead of the grass <strong> g.gisenv </strong> command.
 
</p>

</div><div class="plugin_note notetip"> It is a good working habit within Grass to set as bash shell working directory the same as your GRASS LOCATION folder. <pre class="code">cd ~/ost4sem/grassdb/europe/</pre>

<p>
 The terminal prompt will change from:<br/>

</p>
<pre class="code">GRASS 7.0 (europe):~ &gt;</pre>

<p>
 to<br/>

</p>
<pre class="code">GRASS 7.0 (europe):~/ost4sem/grassdb/europe &gt;</pre>

<p>
 and you will be aware that your current bash shell working directory matches your grass location directory.
 
</p>

</div>
</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;Grass working environment&quot;,&quot;hid&quot;:&quot;grass_working_environment&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:5,&quot;range&quot;:&quot;4008-5548&quot;} -->
<h3 class="sectionedit6" id="grass_mapset">Grass MAPSET</h3>
<div class="level3">

<p>
 We have explained that grass projects can be organised in MAPSETs by users, by themes, by extent or locations, and grouped within the same grass LOCATION. This LOCATION will group several MAPSETS defined by a common projection and includes access a common set of maps in the PERMANENT MAPSET folder.
 When we work in a specific MAPSET we will have no rights to edit, write, or delete maps in a different MAPSET. For doing so you will have to change your working MAPSET directory and then delete or produce new maps.
</p>

<p>
 The <strong>g.mapset</strong> command allows you to change Grass working directory and successively generate delete or modify maps as you wish.
</p>
<pre class="code">g.mapset -l
g.mapset mapset=PCEM
g.gisenv </pre>

<p>
 Now you should see the following settings
</p>
<pre class="code"> GRASS 7.0 (europe):~/ost4sem/grassdb/europe &gt; g.gisenv
 GISDBASE=/home/user/ost4sem/grassdb
 LOCATION_NAME=europe
 MAPSET=PCEM
 MONITOR=x2
 GRASS_GUI=text
 GRASS 7.0 (europe):~/ost4sem/grassdb/europe &gt;</pre>
<div class="plugin_note notetip"> From grass 6.3 only the -c flag create new mapset if it doesn&#039;t exist.; -l List available mapsets (!)
 
</div>
</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;Grass MAPSET&quot;,&quot;hid&quot;:&quot;grass_mapset&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:6,&quot;range&quot;:&quot;5549-6658&quot;} -->
<h3 class="sectionedit7" id="manage_maps">Manage maps</h3>
<div class="level3">

<p>
 To list your available maps:
</p>
<pre class="code">g.list type=vect 
g.list vect  
g.list rast</pre>

<p>
 The user can add, modify, and delete data layers that exist under his current mapset. Although the user can also access (i.e., use) data that are stored under other mapsets in the same GRASS location, the user can only make permanent changes (create or modify data) located in the current mapset. To access maps in a different current mapset we use the addmapset option in the g.mapset function. As an example:
</p>
<pre class="code">g.mapsets addmapset=Vmodel</pre>

<p>
 Now we can access the Vmodel mapset and eventually <strong>copy</strong> a map from the Vmodel mapset to our current mapset directory using the g.copy function:
</p>
<pre class="code">g.copy rast=potveg_ita@Vmodel,pvegita 
g.list rast</pre>

<p>
 And delete a map with the <strong>g.remove</strong> command 
</p>
<pre class="code">g.remove rast=pvegita
g.list rast</pre>

<p>
 You can access but not delete or modify a map in a different mapset from your current
</p>
<pre class="code">  g.remove rast=potveg_europe@Vmodel
  g.remove rast=potveg_europe</pre>
<div class="plugin_note noteimportant"> We have to be careful in GRASS to understand the possible differences existing in the same MAPSET between the whole extent and resolution of the MAPSET itself, the extent, resolution and geographic location of our working region and the extent and location of what we are visualising.<br/>
 
</div>
</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;Manage maps&quot;,&quot;hid&quot;:&quot;manage_maps&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:7,&quot;range&quot;:&quot;6659-7973&quot;} -->
<h3 class="sectionedit8" id="region_settings">Region settings</h3>
<div class="level3">

<p>
 In GRASS, a <strong>region</strong> refers to a geographic area with some defined boundaries, based on a specific map coordinate system and map projection. <a href="http://grass.itc.it/grass64/manuals/html64_user/g.region.html" class="urlextern" target="blanc" title="http://grass.itc.it/grass64/manuals/html64_user/g.region.html" rel="nofollow noopener">Grass region definition and details</a>.  This crucial GRASS setting will allow us to define, within a MAPSET, the settings a particular region of work.<br/>
Once the grass region has been defined, grass modules (or programs) will operate within this region. The user can create, modify, and store as many geographic region definitions as desired for any given mapset. However, only one of these geographic region definitions will be current at any given moment, for a specified mapset. GRASS programs that respect the geographic region settings will use the current geographic region settings. 
</p>

<p>
 to ask for current region settings type 
</p>
<pre class="code"> g.region -d</pre>

<p>
 and to query your current region settings type
</p>
<pre class="code"> g.region -p</pre>
<div class="plugin_note noteclassic"> -p stands for “print” ; -d stands for default
 
</div>
<p>
 You can modify your default g. region with a -s flag within the PERMANENT directory. 
</p>
<div class="plugin_note noteimportant"> A common way to write GRASS scripts while you are learning is to use the <abbr title="Graphical User Interface">GUI</abbr> for a particular tool.
 For example, let&#039;s say we want to rename a raster dataset from fnfpc<em>alpine</em>carpatien5k to ac5.
 To do this you use the g.copy command.  If you type just the name of the GRASS command without any parameters, the <abbr title="Graphical User Interface">GUI</abbr> will open up with various tabs detailing all parameters and flags. There is also a help tab with the full help file.
 You can fill in the parameters and choose your flags using the <abbr title="Graphical User Interface">GUI</abbr>, then click “Copy” at the bottom and paste the command into your script.<br/>
 
</div>
<p>
 For example, open up the g.region <abbr title="Graphical User Interface">GUI</abbr> by running this:
</p>
<pre class="code"> g.region</pre>

<p>
 Now we define a new study area for the Scandinavia region.
</p>
<pre class="code">g.region -p
g.region n=6015390 e=5676400 s=3303955 w=3876180 res=1000 save=scandinavia --overwrite
g.region -p</pre>

<p>
 You will visualize
</p>
<pre class="code">  projection: 99 (Lambert Azimuthal Equal Area)
  zone:       0
  datum:      ** unknown (default: WGS84) **
  ellipsoid:  grs80
  north:      6015390
  south:      3303955
  west:       3876180
  east:       5676400
  nsres:      200.00258169
  ewres:      200.00222198
  rows:       13557
  cols:       9001
  cells:      122026557
  GRASS 6.4.0RC5 (europe):~/ost4sem/grassdb/europe &gt;</pre>

<p>
 If you open Qgis in another terminal
</p>
<pre class="code"> qgis &amp; </pre>

<p>
 You can load a raster map on Qgis from the menue:
 Plugin GRASS &gt; add GRASS raster layer &gt;
</p>
<ul>
<li class="level1"><div class="li"> Gisdbase : /home/user/ost4sem/grassdb</div>
</li>
<li class="level1"><div class="li"> Location : europe</div>
</li>
<li class="level1"><div class="li"> Mapset   : PERMANENT</div>
</li>
<li class="level1"><div class="li"> Map name : fnfpc</div>
</li>
</ul>

<p>
 If you click on “ <em>Display current Grass region</em> ” you will see the Scandinavia area within a red frame.
</p>

<p>
 Back to GRASS if you reset the default grass region 
</p>
<pre class="code">g.region -d</pre>

<p>
 And then you again look at Qgis, you can visualise the red frame changing position by twice clicking on  “ <em>Display current Grass region</em> ”.
</p>

<p>
 <br/>

</p>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;Region settings&quot;,&quot;hid&quot;:&quot;region_settings&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:8,&quot;range&quot;:&quot;7974-10950&quot;} -->
<h3 class="sectionedit9" id="clipping_maps_and_changing_resolution_using">Clipping maps and changing resolution using</h3>
<div class="level3">

<p>
 g.region allow us to do two basic GIS function: resample and clip.<br/>

 We would like to have 3 new maps of forest non forest percentage clipped and resampled with a different resolution from a forest non forest map. The original forest non forest map has the European extent and 1km resolution. We need to generate:<br/>

</p>
<ul>
<li class="level1"><div class="li"> Italian extent map at 20km resolution,</div>
</li>
<li class="level1"><div class="li"> Alpine extent map at 10km resolution </div>
</li>
<li class="level1"><div class="li"> Alpine and Carpathians extent map at 5km reslution.</div>
</li>
</ul>

<p>
 In the europe LOCATION different g.region exists already saved:
</p>
<pre class="code">ls PERMANENT/windows/ 
ls */windows/</pre>

<p>
 Their names and correstponding location are:
 EUforest/windows/:   europe
 PCEMstat/windows/:   alpine
 PCEM/windows/:   alp_car
 PERMANENT/windows/:   scandinavia
 Vmodel/windows/:   italy
</p>

<p>
The Italian g.region is in Vmodel mapset, the Alpine and Carpathiens g.region is in PCEM mapset, and the Alpine region is in PCEMstat.
</p>
<pre class="code">g.region italy@Vmodel -p </pre>

<p>
we see that the Italian g.region has 1km res and 1500 x 1140 pixels
</p>

<p>
We now resample the g.region at 20km using the <strong>res=new_res</strong> option:
</p>
<pre class="code">g.region res=20000 -p </pre>

<p>
We have now 75 x 57 pixels of 20k resolution. We can create a new forest non forest map with the new extent and resolution using r.mapcalc function <a href="http://grass.osgeo.org/gdp/html_grass64/r.mapcalc.html" class="urlextern" target="blanc" title="http://grass.osgeo.org/gdp/html_grass64/r.mapcalc.html" rel="nofollow noopener">r.mapcalc details</a>
 this uses a very simple nearest neighbor algorithm to resample to a coarser grid, for other options, check out r.resample (for producing a finer grid) or r.resamp.stats (to produce a coarser grid).
</p>
<pre class="code">r.mapcalc fnfpc_italy20k = fnfpc </pre>

<p>
Now create the two other maps:
</p>
<pre class="code">g.region alpine@PCEMstat res=10000 -p
r.mapcalc fnfpc_alpine10k = fnfpc </pre>
<pre class="code">g.region alp_car@PCEM res=5000 -p
r.mapcalc fnfpc_alpine_carpatien5k = fnfpc </pre>
<div class="plugin_note notetip">You can save a new extent and resolution as <strong>g.mapset</strong> with the save=name<em>new</em> option<pre class="code">g.region alp_car@PCEM res=5000 -p save=alp_car_5km_res</pre>

</div>
<p>
 <br/>

</p>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;Clipping maps and changing resolution using&quot;,&quot;hid&quot;:&quot;clipping_maps_and_changing_resolution_using&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:9,&quot;range&quot;:&quot;10951-12922&quot;} -->
<h2 class="sectionedit10" id="visualize_maps">Visualize maps</h2>
<div class="level2">

<p>
 In the forest/non-forest map <strong>fnfpc</strong> each pixel value corresponds to ha of tree cover or percentage cover within each sq km pixel.<br/>

 Lets visualise the map in different ways.<br/>

 <br/>

</p>

</div>

<h5 id="qgis">Qgis</h5>
<div class="level5">

<p>
 The Qgis is a very simple and practical tools for visualising maps from grass or any spatial dataset.
 Open Qgis and visualize the maps you just created:
 Plugin GRASS - add GRASS raster layer -
</p>
<ul>
<li class="level1"><div class="li"> Gisdbase : /home/user/ost4sem/grassdb</div>
</li>
<li class="level1"><div class="li"> Location : europe</div>
</li>
<li class="level1"><div class="li"> Mapset   : PERMANENT</div>
</li>
<li class="level1"><div class="li"> Map name : fnfpc<em>alpine</em>carpatien5k</div>
</li>
</ul>

</div>

<h5 id="grass_gui">GRASS GUI</h5>
<div class="level5">

<p>
 Also grass has a <abbr title="Graphical User Interface">GUI</abbr> for visualising maps. Open it and charge the maps just created
</p>
<pre class="code"> g.gui wxpython</pre>

<p>
 Click on: add raster layer   Base map (select your maps and refresh the Map display window.
 <br/>

</p>

</div>

<h5 id="grass_display_monitor">GRASS display monitor</h5>
<div class="level5">

<p>
 Or alternatively (if two options wasn&#039;t enough), it&#039;s also possible to open simple windows (monitors) to visualize GRASS content
 These are reminiscent of older unix programs and are the least powerful and flexible option. 
 For example, you have to run an additional command (d.zoom) to zoom in and out.
 In GRASS we can visualize maps in different monitors. To list available monitors type
</p>
<pre class="code"> d.mon -l</pre>

<p>
 We can open a monitor and display a raster 
</p>
<pre class="code"> g.region rast=fnfpc
 d.mon start=x0
 d.rast fnfpc</pre>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;Visualize maps&quot;,&quot;hid&quot;:&quot;visualize_maps&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:10,&quot;range&quot;:&quot;12923-14237&quot;} -->
<h2 class="sectionedit11" id="generating_multiple_maps_with_standardized_settings">Generating multiple maps with standardized settings</h2>
<div class="level2">

<p>
 Lets rename our maps for simplification
</p>
<pre class="code">g.copy rast=fnfpc_alpine_carpatien5k,ac5 
g.copy rast=fnfpc,eu1 
g.copy rast=fnfpc_alpine10k,a10
g.copy rast=fnfpc_italy20k,i20</pre>
<pre class="code">g.remove rast=fnfpc_alpine_carpatien5k,fnfpc_alpine10k,fnfpc_italy20k</pre>

<p>
 a simple loop to 
</p>
<pre class="code bash">   <span class="kw1">for</span> map <span class="kw1">in</span> a10 ac5 eu1 i20 ; <span class="kw1">do</span>
      g.region <span class="re2">rast</span>=<span class="re1">$map</span>
      <span class="kw2">cat</span> ~<span class="sy0">/</span>ost4sem<span class="sy0">/</span>exercise<span class="sy0">/</span>basic_adv_grass<span class="sy0">/</span>green_palett_5class <span class="sy0">|</span>r.colors <span class="re2">map</span>=<span class="re1">$map</span>  <span class="re2">color</span>=rules 
      d.mon <span class="re2">start</span>=PNG 
      d.rast <span class="re1">$map</span> 
      d.vect <span class="re2">map</span>=EUcountry<span class="sy0">@</span>EUforest <span class="re2">fcolor</span>=<span class="st0">&quot;none&quot;</span> <span class="re2">color</span>=<span class="kw2">red</span>
      d.mon <span class="re2">stop</span>=PNG
      <span class="kw2">mv</span>  map.png ~<span class="sy0">/</span>ost4sem<span class="sy0">/</span>exercise<span class="sy0">/</span>basic_adv_grass<span class="sy0">/</span>output_map_<span class="re1">$map</span>
  <span class="kw1">done</span> 
&nbsp;</pre>

<p>
 <br/>

 <br/>

</p>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;Generating multiple maps with standardized settings&quot;,&quot;hid&quot;:&quot;generating_multiple_maps_with_standardized_settings&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:11,&quot;range&quot;:&quot;14238-14963&quot;} -->
<h3 class="sectionedit12" id="starting_a_new_grass_project_new_mapset_new_location_or_new_grass_database">Starting a new Grass project, new mapset, new location or new grass database</h3>
<div class="level3">

<p>
There are several ways to start a new grass project.
</p>

</div>

<h5 id="grass7_create_location">Grass7 create location</h5>
<div class="level5">

<p>
Using command line and an existing dataset with the correct projection information. 
</p>

<p>
grass -text -c ~/ost4sem/exercise/basic<em>adv</em>gdalogr/input<em>proj.tif -c   ~/ost4sem/grassdb/location</em>grass7
</p>

</div>

<h5 id="using_a_bash_script_and_an_existing_projected_map_useful_for_grass6">Using a bash script and an existing projected map (useful for grass6)</h5>
<div class="level5">

<p>
The bash script: <strong>~/ost4sem/exercise/basic<em>adv</em>grass/create_location.sh</strong>  allows automatic creation of a new GRASS LOCATION using projection parameters defined in an existing map.<br/>

See <a href="/dokuwiki/doku.php?id=wiki:grasscreatelocation" class="wikilink1" title="wiki:grasscreatelocation">this wiki page</a> for details on how to use the script.<br/>

</p>

</div>

<h5 id="spearfish">Spearfish</h5>
<div class="level5">

<p>
A general procedure for starting GRASS after installation, is to use a demo dataset. The general procedure consists of the following steps:
</p>
<ul>
<li class="level1"><div class="li"> Creating a new empty directory to use as GISDBASE. </div>
</li>
<li class="level1"><div class="li"> Download and move the demo dataset inside the new GISDBASE</div>
</li>
<li class="level1"><div class="li"> Import a vector or raster map using GDAL/OGR functions and create a new location  while importing grass dataset (including a location and a mapset) inside. Several template datasets exists. Very common is the <a href="http://grass.itc.it/download/data6.php" class="urlextern" target="blanc" title="http://grass.itc.it/download/data6.php" rel="nofollow noopener"> spearfish DB</a>. (~20MB)</div>
</li>
</ul>

<p>
<br/>
   mkdir ~/ost4sem/tmp
</p>
<pre class="code"> cd ~/ost4sem/tmp
 wget http://grass.itc.it/sampledata/spearfish_grass60data-0.3.zip 
 mkdir ~/ost4sem/new_grass_DBASE
 mv spearfish_grass60data-0.3.zip ~/ost4sem/new_grass_DBASE/
 cd ~/ost4sem/new_grass_DBASE
 unzip spearfish_grass60data-0.3.zip
 rm -r ~/ost4sem/tmp
 rm -f spearfish_grass60data-0.3.zip
 grass -text ~/ost4sem/new_grass_DBASE/spearfish60/PERMANENT
 r.in.gdal input=~/ost4sem/exercise/basic_adv_grass/inputs/lc_cor2000/hdr.adf  output=landcover location=new_Location --overwrite </pre>

<p>
 or if you use a vector
 v.in.ogr dsn=~/ost4sem/exercise/EUforest<em>stats/EU</em>country<em>gl</em>gpwc3/EU<em>country</em>gpwv3.shp output=world<em>country location=new</em>Location
</p>

<p>
 Now delete the temporary folder
rm -r ~/ost4sem/new<em>grass</em>DBASE/spearfish60/
<br/>

As a result we will have generated:
</p>
<ul>
<li class="level1"><div class="li"> a new grass GISDBASE: “new<em>grass</em>DBASE” </div>
</li>
<li class="level1"><div class="li"> a new Location setted with the projection and extent of the map we wanted to open: “new_Location”</div>
</li>
<li class="level1"><div class="li"> a new PERMANENT Mapset including the raster or vector map we opened.</div>
</li>
</ul>

</div>

<h5 id="qgis1">Qgis</h5>
<div class="level5">

<p>
To easily create a new GRASS working directory (DBASE, LOCATION, MAPSET), we can use Qgis.<br/>

See <a href="/dokuwiki/doku.php?id=wiki:basicqgis" class="wikilink1" title="wiki:basicqgis">Quantum gis</a>.
<br/>

</p>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;Starting a new Grass project, new mapset, new location or new grass database&quot;,&quot;hid&quot;:&quot;starting_a_new_grass_project_new_mapset_new_location_or_new_grass_database&quot;,&quot;codeblockOffset&quot;:1,&quot;secid&quot;:12,&quot;range&quot;:&quot;14964-17405&quot;} -->
<h3 class="sectionedit13" id="a_new_location_within_an_an_existing_grass_database">A new LOCATION within an an existing grass Database</h3>
<div class="level3">

<p>
If you have an existing grassdb and location, you can create a new location using a GDAL / OGR import functions by specifying location=xx.  For example:
</p>
<pre class="code"> r.in.gdal input=input_raster output=output_GRASS_raster location=new_Location --overwrite 
 v.in.ogr dsn=input_vector output=output_GRASS_vector location=new_Location  --overwrite 
 </pre>

<p>
<br/>

</p>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;A new LOCATION within an an existing grass Database&quot;,&quot;hid&quot;:&quot;a_new_location_within_an_an_existing_grass_database&quot;,&quot;codeblockOffset&quot;:1,&quot;secid&quot;:13,&quot;range&quot;:&quot;17406-17814&quot;} -->
<h3 class="sectionedit14" id="a_new_mapset_within_an_an_existing_grass_location">A new Mapset within an an existing grass Location</h3>
<div class="level3">

<p>
From GRASS 6.4 a -c flag option allow to use g.mapset to create a new mapset
</p>
<pre class="code">g.mapset mapset=NEW_MAPSET_NAME -c</pre>

<p>
To generate a new Mapset from a pre-existing location you can also copy the PERMANENT folder and rename it.
</p>
<pre class="code"> cp -r PERMANENT NEW_Mapset</pre>

<p>
Then you start grass in the NEW_Mapset directory environment
</p>
<pre class="code">grass -text /home/user/ots4sem/studycase/ITA_veg/grassdata/NEW_Mapset</pre>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;A new Mapset within an an existing grass Location&quot;,&quot;hid&quot;:&quot;a_new_mapset_within_an_an_existing_grass_location&quot;,&quot;codeblockOffset&quot;:1,&quot;secid&quot;:14,&quot;range&quot;:&quot;17815-&quot;} -->