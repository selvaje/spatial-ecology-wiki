<span class="co0">############pre-filtering of the LIDAR data####### </span>
<span class="co0">############(extraction of the necessary returns)##########</span>
<span class="co0">#use AWK. use a multi core loop for selecting the </span>
<span class="co0">#first and the third return in the .fpl files and </span>
<span class="co0">#put all returns in a single .txt file </span>
&nbsp;
<span class="co0">#define the directory where the data is located</span>
<span class="kw3">export</span> <span class="re2">Dir</span>=~<span class="sy0">/</span>myproject<span class="sy0">/</span>FPLSelect<span class="sy0">/</span>
<span class="co0">#define the directory where the new text file should be stored</span>
<span class="kw3">export</span> <span class="re2">DirObj</span>=~<span class="sy0">/</span>myproject<span class="sy0">/</span>FPLSelect
<span class="co0">#set the files that are used for the loop without type of file</span>
<span class="re2">File</span>=<span class="sy0">*</span>
<span class="co0">#set the File type. note that it should be a format compatible with awk -&gt; text</span>
<span class="kw3">export</span> <span class="re2">FileTyp</span>=.fpl
<span class="co0">#set the amount of cores to be used</span>
<span class="kw3">export</span> <span class="re2">cores</span>=<span class="nu0">3</span>
<span class="co0">#extract the desired laser returns from the file that have been set</span>
  <span class="kw2">ls</span> <span class="re1">$Dir</span><span class="re1">$File</span><span class="re1">$FileTyp</span>  <span class="sy0">|</span> <span class="kw2">xargs</span> <span class="re5">-n</span> <span class="nu0">1</span> <span class="re5">-P</span> <span class="re1">$cores</span>  <span class="kw2">bash</span> <span class="re5">-c</span> $<span class="st_h">' 
    file=$(basename &quot;$1&quot; .fpl)
    awk \'</span><span class="br0">&#123;</span> <span class="kw1">if</span><span class="br0">&#40;</span><span class="re4">$4</span>=<span class="nu0">3</span><span class="br0">&#41;</span> print <span class="re4">$1</span>, <span class="re4">$2</span>, <span class="re4">$3</span> <span class="br0">&#125;</span><span class="co3">\'</span>  <span class="re1">$Dir</span><span class="re1">$file</span><span class="re1">$FileTyp</span> <span class="sy0">&gt;</span> <span class="re1">$DirObj</span><span class="sy0">/</span><span class="nu0">3</span>_<span class="re1">$file</span>.txt
    <span class="kw2">awk</span>  <span class="co3">\'</span><span class="br0">&#123;</span> <span class="kw1">if</span><span class="br0">&#40;</span><span class="re4">$4</span>=<span class="nu0">1</span><span class="br0">&#41;</span> print <span class="re4">$1</span>, <span class="re4">$2</span>, <span class="re4">$3</span> <span class="br0">&#125;</span><span class="co3">\'</span>  <span class="re1">$Dir</span><span class="re1">$file</span><span class="re1">$FileTyp</span> <span class="sy0">&gt;</span> <span class="re1">$DirObj</span><span class="sy0">/</span><span class="nu0">1</span>_<span class="re1">$file</span>.txt
    <span class="co0"># in order to retrive further returns erase the &quot;#&quot; at the beginning of the line </span>
    <span class="co0">#awk  \'{ if($4=2) print $1, $2, $3 }\'  $Dir$file$FileTyp &gt; $DirObj/2_$file.txt</span>
    <span class="co0">#awk  \'{ if($4=4) print $1, $2, $3 }\'  $Dir$file$FileTyp &gt; $DirObj/4_$file.txt</span>
    <span class="co0">#awk  \'{ if($4=5) print $1, $2, $3 }\'  $Dir$file$FileTyp &gt; $DirObj/5_$file.txt</span>
  <span class="st_h">' _
&nbsp;
#put all return types of interest in single txt file
cat $DirObj/?_fpl?.txt &gt; $DirObj/returns.txt
rm ?_fpl?.txt  
&nbsp;
#####USE GRASS GIS 7 without starting it explicitly######
export GISBASE=/usr/lib/grass70
export GRASS_VERSION=&quot;7.0.svn&quot; 
MYGISDBASE=$HOME/myproject/grassdb
MYLOC=district
MYMAPSET=Luis
&nbsp;
# Set the global grassrc file to individual file name
MYGISRC=&quot;$HOME/.grassrc.$GRASS_VERSION.$$&quot;
&nbsp;
echo &quot;GISDBASE: $MYGISDBASE&quot; &gt; &quot;$MYGISRC&quot;
echo &quot;LOCATION_NAME: $MYLOC&quot; &gt;&gt; &quot;$MYGISRC&quot;
echo &quot;MAPSET: $MYMAPSET&quot; &gt;&gt; &quot;$MYGISRC&quot;
echo &quot;GRASS_GUI: text&quot; &gt;&gt; &quot;$MYGISRC&quot;
&nbsp;
# path to GRASS settings file
export GISRC=$MYGISRC
export GRASS_PYTHON=python
export GRASS_MESSAGE_FORMAT=plain
export GRASS_TRUECOLOR=TRUE
export GRASS_TRANSPARENT=TRUE
export GRASS_PNG_AUTO_WRITE=TRUE
export GRASS_GNUPLOT='</span>gnuplot <span class="re5">-persist</span><span class="st_h">'
export GRASS_WIDTH=640
export GRASS_HEIGHT=480
export GRASS_HTML_BROWSER=firefox
export GRASS_PAGER=cat
export GRASS_WISH=wish
&nbsp;
export PATH=&quot;$GISBASE/bin:$GISBASE/scripts:$PATH&quot;
export LD_LIBRARY_PATH=&quot;$GISBASE/lib&quot;
export GRASS_LD_LIBRARY_PATH=&quot;$LD_LIBRARY_PATH&quot;
export PYTHONPATH=&quot;$GISBASE/etc/python:$PYTHONPATH&quot;
export MANPATH=$MANPATH:$GISBASE/man
&nbsp;
export GIS_LOCK=$$
&nbsp;
#####generate input raster maps for r.sun######
#import the returns as vector in grass Gis
v.in.ascii -n --o input=/home/user/myproject/FPLSelect/returns.txt output=rawpoints separator=space z=3  
#generate the DSM, slope and aspect raster maps needed for r.sun -&gt; this is a very simplistic way for performing this task but the procedure presented in neteler and mitasova 2008 (the Grass GIS 6 Book) leads to errors
v.surf.rst -z input=rawpoints elev=elev1 slope=slope1 asp=asprast1 npmi=120 seg=25 lay=0 ten=15 smo=1
&nbsp;
#####open python in Grass Gis 7#########
python</span>