
<h1 class="sectionedit1" id="transform_a_simple_for_loop_script_in_multicore_for_loop_script">Transform a simple &quot;for loop script&quot; in multicore &quot;for loop script&quot;</h1>
<div class="level1">

<p>
<br/>

Let&#039;s consider that you want run a gdalwarp command to several tif files (*.tif), to perform a re-projection.<br/>

We have seen in the <a href="/dokuwiki/lib/exe/fetch.php?media=wiki:cluster_xargs1" class="media mediafile mf_ wikilink2" title="wiki:cluster_xargs1"> Transform a simple &quot;for loop&quot; in multicore &quot;for loop&quot; </a> how to create a simple <em>for loop</em> and how to transform a simple <em>for loop</em> in a multicore loop using xargs .<br/>

Now let&#039;s suppose that we have a script called myscript4cluster.sh with inside gdalwarp command and that we want run this script by <em>xargs</em>.<br/>

</p>
<pre class="code"> cd /data/ost4sem/exercise/basic_adv_gdalogr/fagus_sylvatica
 </pre>

<p>
Therefore, we create a script myscript4cluster.sh (saved to /home/user/ost4sem/exercise/basic<em>adv</em>gdalogr/fagus_sylvatica/) within the following code: 
</p>
<dl class="code">
<dt><a href="/dokuwiki/doku.php?do=export_code&amp;id=wiki:amaxon_xargs&amp;codeblock=0" title="Download Snippet" class="mediafile mf_sh_">myscript4cluster.sh </a></dt>
<dd><pre class="code bash"><span class="re2">file</span>=<span class="re4">$1</span>
gdalwarp <span class="re5">-r</span> cubic <span class="re5">-tr</span> <span class="nu0">0.008</span> <span class="nu0">0.008</span> -t_srs EPSG:<span class="nu0">4326</span> <span class="re1">$file</span>  proj_<span class="re1">$file</span> <span class="re5">-overwrite</span></pre>
</dd></dl>

<p>
You can run myscript4cluster.sh with the following code
</p>
<pre class="code"> ls 20?0_TSSP_IP-ENS-A2-SP20_43023435.tif  | xargs -n 1 -P 2  bash /home/user/ost4sem/exercise/basic_adv_gdalogr/fagus_sylvatica/myscript4cluster.sh</pre>

<p>
The <em>-n</em> option identifies the argument (in this case $1 renamed $file) used inside the  <em>myscript4cluster.sh</em> script.<br/>

The <em>-P</em> option identifies the processors (in this case 2) used to run <em>my<em>script</em>4cluster.sh</em> script.<br/>

<br/>

If you run <em>myscript4cluster.sh</em> by the <em>xargs</em> command all the standard error are listed in chaotic order and is not easy to track back errors, especially when you process several files. <br/>

So, the good way is to create a log file that store all the error in a file, one for each processes.<br/>

In order to do this you have to modify the myscript4cluster.sh in the following order. 
</p>
<dl class="code">
<dt><a href="/dokuwiki/doku.php?do=export_code&amp;id=wiki:amaxon_xargs&amp;codeblock=1" title="Download Snippet" class="mediafile mf_sh_">myscript4cluster.sh </a></dt>
<dd><pre class="code bash"><span class="kw3">export</span> <span class="re2">file</span>=<span class="re4">$1</span>
<span class="kw1">time</span> <span class="br0">&#40;</span>
<span class="kw3">echo</span> processing <span class="kw2">file</span> <span class="re1">$file</span>
gdalwarp <span class="re5">-r</span> cubic <span class="re5">-tr</span> <span class="nu0">0.008</span> <span class="nu0">0.008</span> -t_srs EPSG:<span class="nu0">4326</span> <span class="re1">$file</span>  proj_<span class="re1">$file</span> <span class="re5">-overwrite</span>
<span class="kw3">echo</span> end of the sorting action of  <span class="kw2">file</span> <span class="re1">$file</span>
<span class="br0">&#41;</span> <span class="nu0">2</span><span class="sy0">&gt;&amp;</span><span class="nu0">1</span> <span class="sy0">|</span> <span class="kw2">tee</span>  <span class="sy0">/</span>tmp<span class="sy0">/</span>log_of_<span class="re1">$file</span><span class="st0">&quot;.txt&quot;</span></pre>
</dd></dl>

<p>
<br/>

You may see the results of the log file:
</p>
<pre class="code"> more /tmp/tmp/log_of_2080_TSSP_IP-ENS-A2-SP20_43023435.tif.txt</pre>

</div>
