
<h1 class="sectionedit1" id="description">DESCRIPTION</h1>
<div class="level1">

<p>
A nice combination of <a href="http://km.fao.org/OFwiki/index.php/Open_Foris_Geospatial_Toolkit" class="urlextern" target="blanc" title="http://km.fao.org/OFwiki/index.php/Open_Foris_Geospatial_Toolkit" rel="nofollow noopener"> Open Foris Geospatial Toolkit </a>, in particular oft-stat, and AWK to calculate r pearson coefficent between two immages.<br/>

<br/>

oft-pearson.bash  &lt;input&gt; &lt;output&gt; [mask]<br/>

<br/>

The output is a text file reporting the r pearson coefficient.
The mask can be 0-1, 0 for no data and 1 for data, or 0-1-2-3……<br/>

In case of a mask with multi-class it reports the r pearson for each class.<br/>

It can be used also to calculate how the r-pearson change at geographical level, simpling creating a mask id where the pixel size is 10 time the pixel size of the input.tif. 
The results output txt file will report a r-pearson value for each id.
The output txt can then been used to reclassify the id-image using <a href="http://km.fao.org/OFwiki/index.php/Oft-reclass" class="urlextern" target="blanc" title="http://km.fao.org/OFwiki/index.php/Oft-reclass" rel="nofollow noopener"> oft-reclass. </a><br/>

In case of species distribution modeling can be used to identify local correlation between two variables or between the results of two models.<br/>

<br/>

Download the file oft-pearson.bash
</p>
<pre class="code">  chmod 777 oft-pearson.bash
  sudo mv oft-pearson.bash /usr/local/bin/</pre>
<dl class="code">
<dt><a href="/dokuwiki/doku.php?do=export_code&amp;id=wiki:pearson_tif&amp;codeblock=0" title="Download Snippet" class="mediafile mf_bash">oft-pearson.bash</a></dt>
<dd><pre class="code bash"><span class="co0">#!/bin/bash</span>
<span class="co0"># giuseppe.amatulli@gmail.com  18</span>
<span class="co0"># calculate the  pearson's coefficient r between two bands</span>
<span class="co0"># $1 = input image containing the two bands</span>
<span class="co0"># $2 = txt file containing the r coefficent for each class</span>
<span class="co0"># $3 = input image containg categories data or mask image.</span>
<span class="co0"># 0 considering as no data</span>
<span class="co0"># 1 2 3 categories classes</span>
<span class="co0"># slightly modified by anssi to check the nbr of input image bands etc</span>
&nbsp;
<span class="re2">version</span>=<span class="nu0">1.01</span>
&nbsp;
<span class="re2">args</span>=<span class="re4">$#</span>
&nbsp;
<span class="kw1">if</span> <span class="br0">&#91;</span> <span class="re1">$args</span> <span class="sy0">!</span>= <span class="nu0">2</span> <span class="re5">-a</span> <span class="re1">$args</span> <span class="sy0">!</span>= <span class="nu0">3</span> <span class="br0">&#93;</span> ; <span class="kw1">then</span>
<span class="kw3">echo</span> <span class="st0">&quot;Usage &lt;input&gt; &lt;output&gt; [mask]&quot;</span>
<span class="kw3">echo</span> <span class="st0">&quot;Input has to be an image with 2 band&quot;</span>
<span class="kw3">echo</span> <span class="st0">&quot;Output is a text file reporting the r for each class&quot;</span>
<span class="kw3">exit</span>
<span class="kw1">elif</span> <span class="br0">&#91;</span> <span class="re1">$args</span> <span class="re5">-eq</span> <span class="nu0">3</span> <span class="br0">&#93;</span> ; <span class="kw1">then</span> 
<span class="kw1">if</span> <span class="br0">&#91;</span> <span class="sy0">!</span> <span class="re5">-f</span> <span class="re4">$3</span>  <span class="br0">&#93;</span>  ; <span class="kw1">then</span> 
<span class="kw3">echo</span> <span class="st0">&quot;Mask file missing&quot;</span>
<span class="kw3">exit</span>
<span class="kw1">else</span>
<span class="re2">UseMask</span>=<span class="st0">&quot;-um $3&quot;</span>     
<span class="kw1">fi</span>
<span class="kw1">fi</span>
&nbsp;
<span class="kw3">echo</span> <span class="st0">&quot;Calculating pearson cofficient for each class using file $1&quot;</span>
&nbsp;
<span class="kw1">if</span> <span class="br0">&#91;</span> <span class="re5">-f</span> <span class="re4">$3</span>  <span class="br0">&#93;</span>  ; <span class="kw1">then</span> 
<span class="re2">input</span>=<span class="re4">$1</span>
<span class="re2">bands</span>=<span class="sy0">`</span>gdalinfo <span class="re1">$input</span><span class="sy0">|</span><span class="kw2">grep</span> <span class="re5">-c</span>  ^Band<span class="st0">&quot; &quot;</span><span class="sy0">`</span>
&nbsp;
<span class="kw1">if</span> <span class="br0">&#91;</span> <span class="re1">$bands</span> <span class="re5">-ne</span> <span class="nu0">2</span> <span class="br0">&#93;</span> ; <span class="kw1">then</span>
&nbsp;
<span class="kw3">echo</span> <span class="st0">&quot;The input image has to have two bands&quot;</span>
<span class="kw3">exit</span>
<span class="kw1">fi</span>
<span class="kw1">else</span>
<span class="kw3">echo</span> <span class="st0">&quot;File <span class="es2">$input</span> does not exist&quot;</span>
<span class="kw1">fi</span>
&nbsp;
&nbsp;
&nbsp;
&nbsp;
<span class="co0"># force to be Float64 in case of high number. </span>
&nbsp;
oft-calc  <span class="re5">-ot</span> Float64 <span class="re1">$input</span>  <span class="sy0">/</span>tmp<span class="sy0">/</span>tifb1xb2<span class="re4">$$</span>.tif  <span class="co2">&lt;&lt;EOF
5
#1 #2 *
#1 1 *
#2 1 *
#1 #1 *
#2 #2 *
EOF</span>
&nbsp;
oft-stat <span class="re5">-i</span> <span class="sy0">/</span>tmp<span class="sy0">/</span>tifb1xb2<span class="re4">$$</span>.tif   <span class="re5">-o</span> <span class="sy0">/</span>tmp<span class="sy0">/</span>tifb1xb2<span class="re4">$$</span>.txt <span class="re1">$UseMask</span>  <span class="re5">-nostd</span> <span class="sy0">&amp;&gt;/</span>dev<span class="sy0">/</span>null
&nbsp;
<span class="co0"># formula for the pearson coefficient</span>
<span class="co0"># sum obtained using  average * obs</span>
<span class="co0"># print (obs * xysum - xsum * ysum)/((sqrt(obs*x2sum - xsum*xsum)) * (sqrt(obs*y2sum - ysum*ysum)))</span>
&nbsp;
<span class="co0">#1 = x</span>
<span class="co0">#2 = y</span>
&nbsp;
<span class="co0">#1 #2 *     xysum  $3   </span>
<span class="co0">#1 1 *      xsum   $4    </span>
<span class="co0">#2 1 *      ysum   $5    </span>
<span class="co0">#1 #1 *     x2sum  $6   </span>
<span class="co0">#2 #2 *     y2sum  $7   </span>
&nbsp;
<span class="co0"># in case of using mask as uncillary layers it return the pearson for each class results</span>
<span class="co0"># use oft-reclass if you want obtained a map of pearson for each class.</span>
&nbsp;
<span class="kw1">if</span> <span class="br0">&#91;</span> <span class="re5">-n</span> <span class="st0">&quot;<span class="es2">$UseMask</span>&quot;</span>  <span class="br0">&#93;</span> ; <span class="kw1">then</span> 
<span class="kw2">awk</span> <span class="st_h">'{ print $1 , (($2*$3*$2 - $4*$2*$5*$2))/((sqrt($2*$6*$2 - $4*$2*$4*$2))*(sqrt($2*$7*$2 - $2*$5*$2*$5 )))}'</span> <span class="sy0">/</span>tmp<span class="sy0">/</span>tifb1xb2<span class="re4">$$</span>.txt <span class="sy0">&gt;</span> <span class="re4">$2</span>
<span class="kw1">else</span> 
<span class="kw2">awk</span> <span class="st_h">'{ print      (($2*$3*$2 - $4*$2*$5*$2))/((sqrt($2*$6*$2 - $4*$2*$4*$2))*(sqrt($2*$7*$2 - $2*$5*$2*$5 )))}'</span> <span class="sy0">/</span>tmp<span class="sy0">/</span>tifb1xb2<span class="re4">$$</span>.txt <span class="sy0">&gt;</span> <span class="re4">$2</span>
<span class="kw1">fi</span> 
&nbsp;
<span class="kw2">rm</span> <span class="sy0">/</span>tmp<span class="sy0">/</span>tifb1xb2<span class="re4">$$</span>.txt <span class="sy0">/</span>tmp<span class="sy0">/</span>tifb1xb2<span class="re4">$$</span>.tif</pre>
</dd></dl>

<p>
<br/>

</p>

</div>
