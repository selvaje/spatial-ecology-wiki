
<h1 class="sectionedit1" id="python_introduction">Python introduction</h1>
<div class="level1">

<p>
Python is a multi-platform interpreted general purpose language which can be used in both interactive and scripting mode. It is a dynamic language derived from other older expressive languages, such as <a href="http://www.tckt.tk/" class="urlextern" target="blanc" title="http://www.tckt.tk/" rel="nofollow noopener">Tcl</a> or <a href="http://www.perl.org/" class="urlextern" target="blanc" title="http://www.perl.org/" rel="nofollow noopener">Perl</a>, but with a cleaner syntax and a modern concept.
</p>

<p>
Being mostly platform independent, a complete Python environment can be installed on any recent operating systems (e.g. GNU/Linux, Macos or Windows) and architectures. Those environments includes an editor, debugger and one or more interpreters with support packages and extensions. On any target GNU/Linux system, a base interpreter can be executed as follows:
</p>
<pre class="code">$ python
Python 2.7.11+ (default, Jun  2 2016, 19:34:15) 
[GCC 5.3.1 20160528] on linux2
Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.
&gt;&gt;&gt; print(&#039;Hello, world!&#039;)
Hello, world!
&gt;&gt;&gt; </pre>

<p>
and more than a version of the language could also be typically available. Major versions 2 and 3 have also major differences in standard libraries and advanced syntaxes, so users could experience various porting issues when moving from one version to another one. This must be taken in consideration, as well as the possibility that platform specificities could limit portability of code from one system to another (even if portability is generally much better than that of a conventional low level language such as C or C++).
</p>

<p>
In this tutorial we will ignore all those aspects to concentrate only into the core of the language and its use for geospatial processing. We will also neglect more andvanced tools (e.g. ipython, jupyter) which can be used to improve productivity of the developer and scientist.
</p>

<p>
A typical python script can be written with any editor as follows:
</p>
<pre class="code">$ cat &gt;myscript.py&lt;&lt;EOF
#!/usr/bin/python
# The usual greetings
print(&#039;Hello, world!&#039;)
EOF
$ chmod a+x myscript.py
$ ./myscript.py
Hello, world!
$</pre>

<p>
Any python script can also be launched by using explicitly the python interpreter command as follows:
</p>
<pre class="code">$ python myscript.py
Hello, world!
$</pre>

<p>
and eventually adding options and command line parameters after the script name. See <code>man python</code> for more information about running the standard Python language interpreter.
</p>

<p>
We will use in the rest of this tutorial the standard <code>idle</code> program, a very simple and handy editor (written in Python) which is generally available within any conventional Python evironment (or can be easily installed from the available package system). Dive into it by loading the program and navigating among the menu system and its use of keyboard shortcuts for common operations.
</p>

<p>
<a href="/dokuwiki/lib/exe/detail.php?id=wiki%3Apython%3Abasicpython&amp;media=wiki:python:idle.png" class="media" title="wiki:python:idle.png"><img src="/dokuwiki/lib/exe/fetch.php?media=wiki:python:idle.png" class="media" alt="" /></a>
</p>

<p>
There you can edit, load and run simple scripts and it is suitable for beginners, as an easy and clean way to experiment with the language, thanks to a basic debugger, syntax highlighting and other useful features.
</p>

</div>
