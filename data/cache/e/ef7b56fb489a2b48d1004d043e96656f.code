# Functions to read and implement the moving window
# this code is used to read data in excel files (two files, image data and point data) 
# implement the window functions with different sizes
# correct the data using window values and original data
# write the outputs in two files ( one for window values and one for the corrected values)
&nbsp;
# Function to round decimal numbers
&nbsp;
specify_decimal &lt;- function(x, k) format(round(x, k), nsmall=k)
&nbsp;
# for excel files
library(gdata) 
&nbsp;
# Main logic
# 	read Excel Files
# 	process data
# 	Write output
ReadData &lt;- function(path1)
{
# Read The PixelFile
#assign the output path
outpath=paste(path1,&quot;Output/&quot;,sep = &quot;&quot;)
# Create the output Directory
dir.create(outpath)
&nbsp;
# Read the all pixel files (Image data)
files=list.files(path = path1, pattern = &quot;*_pixel.xlsx&quot;)
#Loop for all of these Files
for(fi in 1:length(files))
{
#Read the file name (Exclude the _pixel.xlsx 11 char
stop=nchar(files[[fi]])-11
filename=substr(files[[fi]], 1, stop)
&nbsp;
&nbsp;
filepath1=paste(path1,filename,sep = &quot;&quot;)
pixelpath=paste(filepath1,&quot;pixel.xlsx&quot;,sep = &quot;_&quot;)
pixeldataframe&lt;-  read.xls(pixelpath)
&nbsp;
#assign the point file
pointpath=paste(filepath1,&quot;point.xlsx&quot;,sep = &quot;_&quot;)
#continue if the point file not exist
if(!file.exists(pointpath))
next
&nbsp;
pointdataframe&lt;-  read.xls(pointpath)
&nbsp;
ncols=ncol(pixeldataframe)
nrows=nrow(pixeldataframe)
&nbsp;
&nbsp;
# get the years / Days 
Years=as.vector(pixeldataframe[1,2:ncols])
yearno=length(Years)
Days=pixeldataframe[2:nrows,1]
dayno=length(Days)
#Create 4 empty vectors 
DaysVector &lt;- rep(NA, dayno*yearno)
YearsVector &lt;- rep(NA, dayno*yearno)
PixelsVector &lt;- rep(NA, dayno*yearno)
PointsVector &lt;- rep(NA, dayno*yearno)
&nbsp;
#loop, to fill the vectors with the data
for (col in 1:yearno) {
&nbsp;
  sind=(col-1)*dayno+1
  eind=col*dayno
  DaysVector[sind:eind]=Days
  YearsVector[sind:eind]=Years[[col]]
  PixelsVector[sind:eind]=as.vector(pixeldataframe[2:nrows,col+1])
  PointsVector[sind:eind]=as.vector(pointdataframe[2:nrows,col+1])
&nbsp;
 }
&nbsp;
 # create the data frame with the 4 vectors
dfd=data.frame(DaysVector,YearsVector,PixelsVector,PointsVector)
# process data
wholedata&lt;-MakeWindow(dfd)
&nbsp;
#write window values
filepath=paste(outpath,filename,sep = &quot;&quot;)
output=paste(filepath,&quot;all.csv&quot;,sep = &quot;_&quot;)
write.csv(wholedata[[1]], file = output)
&nbsp;
# write corrected data
print(&quot;correcting data&quot;)
filepath=paste(outpath,filename,sep = &quot;&quot;)
output1=paste(filepath,&quot;Corrected.csv&quot;,sep = &quot;_&quot;)
write.csv(wholedata[[2]], file = output1)
&nbsp;
}
return(0)
} 
&nbsp;
MakeWindow&lt;-function(dframe)
{
# copy the current frame
  dframecpy=dframe
  # initialize the non value
  nanva=1
&nbsp;
  #create the window sizes array {3, 5 ......,31}
  windows&lt;-seq(3,31, 2)
  x=&quot;&quot;
  #create the vector of window method array
  methods=c(&quot;MF&quot;,&quot;MC&quot;,&quot;MB&quot;,&quot;S&quot;)
&nbsp;
  # for each method 
  for(ty in 1:4)
  {
  # within each method , for each window size 
    for(wind in windows)
    {
#assign the column name by concatenating the method name and window size
      x=paste(methods[ty],wind)
# compute the window value and corrected value 
      lists&lt;-Window(dframe[1:nrow(dframe), 3],dframe[1:nrow(dframe), 4],wind,ty,nanva)
&nbsp;
	  #add the window value column to the data frame
      dframe[,x] =lists[[1]]
	  #add the corrected value column to the data frame
      dframecpy[,x]=lists[[2]]
&nbsp;
    }
  }
&nbsp;
  #create new list 
  ret=list(dframe,dframecpy)
return(ret)
&nbsp;
}
&nbsp;
#window
#this function implements the 
#parameter 
#lst1:first list
# lst2:second list
# win:window length
# type: window type (1 :Moving wind and forward , 2 :moving window and centre , 3 :moving window and backward, 4: Sequential window)
#nanval: NAN value
#Output : list with two items, First is the new value based on window type and length , second is the corrected data
&nbsp;
Window&lt;-function(lst1,lst2,win,type,nanval)
{
#Initialize two vectors (results and correction)
  ResFactor &lt;- rep(NA, length(lst1))
  Correctedvalue &lt;- rep(NA, length(lst1))
#for moving window and Forward
   if(type==1)
  {
&nbsp;
    for(var in 1:length(lst1))
    {
#compute the window
      swin=var
      ewin=var+win-1
&nbsp;
      # when the current window less than window size
      if(ewin &gt;length(lst1)){ ewin=swin}
&nbsp;
	  #Initialize the variables
      sum1=0
      sum2=0
      res=0
&nbsp;
	for(winvar in swin:ewin)
	{
	  sum1=sum1+lst1[[winvar]]
	  sum2=sum2+lst2[[winvar]]
	}
&nbsp;
	if(sum2==0) {res=0}
	else if(sum1==0) {res=nanval}
	else {res=sum2/sum1 }
&nbsp;
#Round the result
      ResFactor[[var]]=specify_decimal(res, 2)
      #Correct Data
      if(res==1)
      Correctedvalue[[var]]=lst2[[var]]
      else
      Correctedvalue[[var]]=specify_decimal(lst1[[var]]*res,2)
&nbsp;
    }
&nbsp;
  }
  else if(type==2) #for moving window and Center
  {
&nbsp;
&nbsp;
    for(var in 1:length(lst1))
    {
      #compute the window
      swin=var-as.integer(win/2)
      ewin=var+as.integer(win/2)
&nbsp;
      #Intialize the variables
      sum1=0
      sum2=0
      res=0
      if(swin&lt;1 || ewin &gt;length(lst1))
      {
      swin=var
      ewin=var
      }
	for(winvar in swin:ewin)
	{
&nbsp;
	  sum1=sum1+lst1[[winvar]]
	  sum2=sum2+lst2[[winvar]]
	}
&nbsp;
	if(sum2==0) {res=0}
	else if(sum1==0) {res=nanval}
	else {res=sum2/sum1 }
&nbsp;
      ResFactor[[var]]=specify_decimal(res, 2)
       #Correct Data
      if(res==1)
      Correctedvalue[[var]]=lst2[[var]]
      else
      Correctedvalue[[var]]=specify_decimal(lst1[[var]]*res,2)
    }
&nbsp;
  }
   else if(type==3) #for moving window and Backword
  {
&nbsp;
    for(var in 1:length(lst1))
    {
      #compute the window
      swin=var-win+1
      ewin=var
&nbsp;
      #need Confirm
      #if(ewin &gt;length(lst1){ ewin=length(lst1)}
      sum1=0
      sum2=0
      res=0
      if(swin&lt;1)
      {
      swin=var
       }
	for(winvar in swin:ewin)
	{
	  sum1=sum1+lst1[[winvar]]
	  sum2=sum2+lst2[[winvar]]
	}
	if(sum2==0) {res=0}
	else if(sum1==0) {res=nanval}
	else {res=sum2/sum1 }
&nbsp;
      ResFactor[[var]]=specify_decimal(res, 2)
       #Correct Data
      if(res==1)
      Correctedvalue[[var]]=lst2[[var]]
      else
      Correctedvalue[[var]]=specify_decimal(lst1[[var]]*res,2)
    }
&nbsp;
  }
&nbsp;
  else if(type==4) #for Sequential
  {
    #Initialize the counter
    var=1
    while(var &lt;=length(lst1))
    {
      #compute the window
      swin=var
      ewin=var+win-1
&nbsp;
&nbsp;
      sum1=0
      sum2=0
      res=0
      if(ewin &gt;length(lst1))
      {
      ewin=var
      }
&nbsp;
	for(winvar in swin:ewin)
	{
&nbsp;
	  sum1=sum1+lst1[[winvar]]
	  sum2=sum2+lst2[[winvar]]
	}
&nbsp;
	if(sum2==0) {res=0}
	else if(sum1==0) {res=nanval}
	else {res=sum2/sum1 }
&nbsp;
	for(winvar in swin:ewin)
	{
	  ResFactor[[winvar]]=specify_decimal(res, 2)
	   #Correct Data
      if(res==1)
      Correctedvalue[[var]]=lst2[[winvar]]
      else
      Correctedvalue[[var]]=specify_decimal(lst1[[winvar]]*res,2)
&nbsp;
	}
&nbsp;
	var=ewin+1
&nbsp;
    }
&nbsp;
  }
&nbsp;
  # create the  list to be returned
  retres = list(ResFactor,Correctedvalue)
  return(retres)
&nbsp;
}
&nbsp;
#function Read 
&nbsp;
args &lt;- commandArgs(trailingOnly = TRUE)
cat(&quot;Done&quot;, ReadData(args[1]), &quot;\n&quot;)
&nbsp;
## This code plots Taylor's diagram
&nbsp;
require (plotrix)
&nbsp;
t1&lt;-read.table(&quot;Tay_Zege.txt&quot;)
&nbsp;
taylor.diagram(t1[,1],t1[,2],add = FALSE, col = &quot;red&quot;,pch = 18, pos.cor = TRUE, xlab = &quot;Standard deviation (mm)&quot;, ylab = &quot;Standard deviation (mm)&quot;, main = &quot;&quot;, show.gamma = T,ngamma = 6, gamma.col = 8, sd.arcs = 1, ref.sd = T,grad.corr.lines = c(0.2, 0.4, 0.6, 0.8, 0.9), pcex = 1,cex.axis = 1, normalize = FALSE)
&nbsp;
taylor.diagram(t1[,1],t1[,3],add=T,col = &quot;blue4&quot;,pch = 0)
taylor.diagram(t1[,1],t1[,4],add=T,col = &quot;blueviolet&quot;,pch = 0)
taylor.diagram(t1[,1],t1[,5],add=T,col = &quot;cornflowerblue&quot;,pch = 0)
taylor.diagram(t1[,1],t1[,6],add=T,col = &quot;cyan&quot;,pch = 0)
taylor.diagram(t1[,1],t1[,7],add=T,col = &quot;cadetblue&quot;,pch = 0)
taylor.diagram(t1[,1],t1[,8],add=T,col = &quot;red&quot;,pch = 0)
taylor.diagram(t1[,1],t1[,9],add=T,col = &quot;red4&quot;,pch = 0)
taylor.diagram(t1[,1],t1[,10],add=T,col = &quot;orange&quot;,pch = 0)
taylor.diagram(t1[,1],t1[,11],add=T,col = &quot;orange4&quot;,pch = 0)
taylor.diagram(t1[,1],t1[,12],add=T,col = &quot;green&quot;,pch = 0)
taylor.diagram(t1[,1],t1[,13],add=T,col = &quot;greenyellow&quot;,pch = 0)
taylor.diagram(t1[,1],t1[,14],add=T,col = &quot;grey&quot;,pch = 0)
taylor.diagram(t1[,1],t1[,15],add=T,col = &quot;khaki&quot;,pch = 0)
taylor.diagram(t1[,1],t1[,16],add=T,col = &quot;khaki4&quot;,pch = 0)
taylor.diagram(t1[,1],t1[,17],add=T,col = &quot;pink&quot;,pch = 0)
&nbsp;
taylor.diagram(t1[,1],t1[,18],add=T,col = &quot;blue4&quot;,pch = 1)
taylor.diagram(t1[,1],t1[,19],add=T,col = &quot;blueviolet&quot;,pch = 1)
taylor.diagram(t1[,1],t1[,20],add=T,col = &quot;cornflowerblue&quot;,pch = 1)
taylor.diagram(t1[,1],t1[,21],add=T,col = &quot;cyan&quot;,pch = 1)
taylor.diagram(t1[,1],t1[,22],add=T,col = &quot;cadetblue&quot;,pch = 1)
taylor.diagram(t1[,1],t1[,23],add=T,col = &quot;red&quot;,pch = 1)
taylor.diagram(t1[,1],t1[,24],add=T,col = &quot;red4&quot;,pch = 1)
taylor.diagram(t1[,1],t1[,25],add=T,col = &quot;orange&quot;,pch = 1)
taylor.diagram(t1[,1],t1[,26],add=T,col = &quot;orange4&quot;,pch = 1)
taylor.diagram(t1[,1],t1[,27],add=T,col = &quot;green&quot;,pch = 1)
taylor.diagram(t1[,1],t1[,28],add=T,col = &quot;greenyellow&quot;,pch = 1)
taylor.diagram(t1[,1],t1[,29],add=T,col = &quot;grey&quot;,pch = 1)
taylor.diagram(t1[,1],t1[,30],add=T,col = &quot;khaki&quot;,pch = 1)
taylor.diagram(t1[,1],t1[,31],add=T,col = &quot;khaki4&quot;,pch = 1)
taylor.diagram(t1[,1],t1[,32],add=T,col = &quot;pink&quot;,pch = 1)
&nbsp;
taylor.diagram(t1[,1],t1[,33],add=T,col = &quot;blue4&quot;,pch = 2)
taylor.diagram(t1[,1],t1[,34],add=T,col = &quot;blueviolet&quot;,pch = 2)
taylor.diagram(t1[,1],t1[,35],add=T,col = &quot;cornflowerblue&quot;,pch = 2)
taylor.diagram(t1[,1],t1[,36],add=T,col = &quot;cyan&quot;,pch = 2)
taylor.diagram(t1[,1],t1[,37],add=T,col = &quot;cadetblue&quot;,pch = 2)
taylor.diagram(t1[,1],t1[,38],add=T,col = &quot;red&quot;,pch = 2)
taylor.diagram(t1[,1],t1[,39],add=T,col = &quot;red4&quot;,pch = 2)
taylor.diagram(t1[,1],t1[,40],add=T,col = &quot;orange&quot;,pch = 2)
taylor.diagram(t1[,1],t1[,41],add=T,col = &quot;orange4&quot;,pch = 2)
taylor.diagram(t1[,1],t1[,42],add=T,col = &quot;green&quot;,pch = 2)
taylor.diagram(t1[,1],t1[,43],add=T,col = &quot;greenyellow&quot;,pch = 2)
taylor.diagram(t1[,1],t1[,44],add=T,col = &quot;grey&quot;,pch = 2)
taylor.diagram(t1[,1],t1[,45],add=T,col = &quot;khaki&quot;,pch = 2)
taylor.diagram(t1[,1],t1[,46],add=T,col = &quot;khaki4&quot;,pch = 2)
taylor.diagram(t1[,1],t1[,47],add=T,col = &quot;pink&quot;,pch = 2)
&nbsp;
lpos1&lt;-1.32*sd(t1[,1])
lpos2&lt;-1.8*sd(t1[,1])
# add a legend
legend(lpos1,lpos2,legend=c(&quot;Uncor-CMORPH&quot;,&quot;3&quot;,&quot;5&quot;,&quot;7&quot;,&quot;9&quot;,&quot;11&quot;,&quot;13&quot;,&quot;15&quot;,&quot;17&quot;,&quot;19&quot;,&quot;21&quot;,&quot;23&quot;,&quot;25&quot;,&quot;27&quot;,&quot;29&quot;,&quot;31&quot;),pch=c(18,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),col=c(&quot;red&quot;,&quot;blue4&quot;,&quot;blueviolet&quot;,&quot;cornflowerblue&quot;,&quot;cyan&quot;,&quot;cadetblue&quot;,&quot;red&quot;,&quot;red4&quot;,&quot;orange&quot;,&quot;orange4&quot;,&quot;green&quot;,&quot;greenyellow&quot;,&quot;grey&quot;,&quot;khaki&quot;,&quot;khaki4&quot;,&quot;pink&quot;))
&nbsp;
## R code for Time-Series Precipitation idw interpolation ##
&nbsp;
library(gstat)
library(rgdal)
library(maptools)
&nbsp;
data1&lt;- read.csv(&quot;Data_6m5stn.csv&quot;, header=TRUE)
#stn &lt;- read.csv(&quot;Station_coor.csv&quot;, header=TRUE)
&nbsp;
stn &lt;- data1[2:4]
&nbsp;
stn$x = as.numeric((stn[[&quot;LON&quot;]]))
stn$y = as.numeric((stn[[&quot;LAT&quot;]]))
&nbsp;
coordinates(stn) = ~x+y
proj4string(stn) = &quot;+proj=utm +zone=37 +ellps=WGS84 +datum=WGS84 +units=m +no_defs&quot;
&nbsp;
##Generate new grid##
&nbsp;
pixels &lt;- 200
&nbsp;
stn.grd &lt;- expand.grid(x=seq(from=36,to=39,length.out=pixels),
                        y=seq(from=10,to=13,length.out=pixels))
&nbsp;
grd.pts &lt;- SpatialPixels(SpatialPoints((stn.grd)))
ngrid &lt;- as(grd.pts, &quot;SpatialGrid&quot;)
&nbsp;
proj4string(ngrid) = &quot;+proj=utm +zone=37 +ellps=WGS84 +datum=WGS84 +units=m +no_defs&quot;
&nbsp;
&nbsp;
##IDW For-loop## 
&nbsp;
library(raster)
&nbsp;
wordir &lt;- &quot;/home/user/Project&quot;
&nbsp;
for (i in 1:30) {
col&lt;- paste(data1[i+4], &quot;~1&quot;, sep=&quot;&quot;)
idw &lt;- idw(as.formula(col), stn, ngrid)
r &lt;- raster(idw[&quot;var1.pred&quot;])
&nbsp;
plot(r, col=topo.colors(100), legend=FALSE, axes=FALSE)
title(paste(&quot;Precipitation_idw&quot;, 20030600+i, sep = &quot;&quot;))
&nbsp;
minr &lt;- as.numeric(format(round(minValue(r), 2), nsmall=2))
maxr &lt;- as.numeric(format(round(maxValue(r), 2), nsmall=2))
&nbsp;
r.range &lt;- c(minr, maxr)
plot(r, legend.only=TRUE, col=topo.colors(100),
     legend.width=1, legend.shrink=0.75,
     axis.args=list(at=seq(minr, maxr, 0.2),
                    labels=seq(minr, maxr, 0.2),  
                    cex.axis=0.6),
     legend.args=list(text='Precipitation (corrected)', side=4, font=2, line=2.5, cex=0.8),border=&quot;grey50&quot; )
&nbsp;
writeRaster(r, filename=paste(wordir, &quot;/img/Preci_idw_&quot;, 20030600+i, &quot;.tif&quot;, sep = &quot;&quot;), format='GTiff', overwrite=TRUE) #create GoTiFF rasters
&nbsp;
dev.copy(jpeg, file = paste( wordir, &quot;/img/Preci_idw_&quot;, 20030600+i, &quot;.jpg&quot;, #save plot to jpg
sep = &quot;&quot;), height = 17, width = 17, units = &quot;cm&quot;, quality = 100,
res=150, bg=&quot;white&quot;) ; dev.off()
&nbsp;
rm(idw)
}
&nbsp;
##Extract pixel value from point coordinate##
&nbsp;
setwd(&quot;/home/user/Project/img&quot;)
im &lt;-  list.files(pattern='*.tif') # folder that contain all the save idw rasters
no &lt;- length(im) 
&nbsp;
imst &lt;- stack(im[1:no])
&nbsp;
x &lt;- 37.255 #x,y -&gt; station 6
y &lt;- 11.93
&nbsp;
data_stn6 &lt;- data.frame(x,y)
coordinates(data_stn6) &lt;- c(&quot;x&quot;, &quot;y&quot;)
&nbsp;
proj4string(data_stn6) = &quot;+proj=utm +zone=37 +ellps=WGS84 +datum=WGS84 +units=m +no_defs&quot;
&nbsp;
ex &lt;- extract(imst, data_stn6)
&nbsp;
table &lt;- t(ex) # transpose to columns
&nbsp;
write.table(table, file = &quot;Pixel_stn6_1.csv&quot;, sep = &quot;,&quot;, col.names = &quot;BF_Pixel&quot;, row.names =F,  
            qmethod = &quot;double&quot;)  #save extract pixel values
&nbsp;
##Combine with uncorrected pixel value and station 6 data##
&nbsp;
data2&lt;- read.csv(&quot;Zege_uncorrected_pixel.csv&quot;, header=TRUE) # uncorrected pixel &amp; station 6 data
data_ex&lt;- read.csv(&quot;Pixel_stn6_1.csv&quot;, header=TRUE)
&nbsp;
raw_pix &lt;- data2[1:30,1] # uncorrected pixel
&nbsp;
stn6 &lt;- data2[1:30,2] # station 6 values
&nbsp;
&nbsp;
data_ex$Un_Pix &lt;- raw_pix
data_ex$Stn6 &lt;- stn6
&nbsp;
&nbsp;
&nbsp;
##plot line graph for comparison (Pixel vs Station)## 
&nbsp;
##Pixel correction##
&nbsp;
#data_plot &lt;- read.csv(&quot;Line_plot.csv&quot;, header=TRUE)
&nbsp;
bf&lt;- as.numeric(data_ex[,1])
Un_pix &lt;-as.numeric(data_ex[,2])
&nbsp;
Corr &lt;- bf * Un_pix
&nbsp;
data_ex$Coor_Pixel &lt;- Corr
&nbsp;
write.table(data_ex, file = &quot;Line_plot.csv&quot;, sep = &quot;,&quot;, col.names = c(&quot;BF_Pixel&quot;, &quot;Un_Pixel&quot;, &quot;Point&quot;, &quot;Coor_Pixel&quot;), row.names=F, 
           qmethod = &quot;double&quot;)
&nbsp;
library(ggplot2)
library(reshape)
&nbsp;
x  &lt;- seq(1, 30, 1)
Corrected_CMORPH &lt;- data_ex[,4]
Uncorrected_CMORPH &lt;- data_ex[,2]
Gauge_Observation &lt;- data_ex[,3]
df &lt;- data.frame(x,Uncorrected_CMORPH, Corrected_CMORPH,Gauge_Observation)
&nbsp;
d2 &lt;- melt(df, id=&quot;x&quot;) #reshape the table structure into id, variable, value columns
ggplot(d2, aes(x, value, colour=variable)) + 
  geom_line() +
  geom_line() +
  scale_colour_manual(values=c(&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;), name=&quot;Type of line&quot;) +
  ggtitle(expression(atop(&quot;Comparison between Corrected Pixel vs Station 6&quot;)))+
  scale_x_continuous(&quot;June 2003&quot;) + 
  scale_y_continuous(&quot;Precipitation (mm)&quot;)
&nbsp;
## Final Taylor's diagram for cross validation by leave one out method
&nbsp;
require (plotrix)
&nbsp;
t1&lt;-read.table(&quot;Final_Tay_1&quot;)
taylor.diagram(t1[,1],t1[,2],add = FALSE, col = &quot;red&quot;,pch = 18, pos.cor = F,  main = &quot;&quot;, show.gamma = T,ngamma = 6, gamma.col = 8, sd.arcs = 1, ref.sd = T,grad.corr.lines = c(0.2, 0.4, 0.6, 0.8, 0.9), pcex = 1,cex.axis = 1, normalize = FALSE)
&nbsp;
taylor.diagram(t1[,1],t1[,3],add=T,col = &quot;blue&quot;,pch = 18)
&nbsp;
lpos1&lt;-0.4*sd(t1[,1])
lpos2&lt;-2.1*sd(t1[,1])
# add a legend
legend(lpos1,lpos2,legend=c(&quot;Uncor-CMORPH&quot;,&quot;Corrected-CMORPH&quot;),pch=c(18,18),col=c(&quot;red&quot;,&quot;blue&quot;))