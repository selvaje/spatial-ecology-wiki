
<h1 class="sectionedit1" id="running_awk">Running AWK</h1>
<div class="level1">

<p>
Exercise:<br/>

Script: open by kate <a href="http://www.spatial-ecology.net/ost4sem/exercise/basic_adv_awk/awk.sh" class="urlextern" target="blanc" title="http://www.spatial-ecology.net/ost4sem/exercise/basic_adv_awk/awk.sh" rel="nofollow noopener"> ~/ost4sem/exercise/basic_adv_awk/awk.sh </a><br/>

Data: <a href="http://www.spatial-ecology.net/ost4sem/exercise/basic_adv_awk/input.txt" class="urlextern" target="blanc" title="http://www.spatial-ecology.net/ost4sem/exercise/basic_adv_awk/input.txt" rel="nofollow noopener"> www.spatial-ecology.net/ost4sem/exercise/basic_adv_awk/input.txt </a><br/>

Directory: ~/ost4sem/exercise/basic<em>adv</em>awk<br/>

<br/>

</p>
<pre class="code bash">kate ~<span class="sy0">/</span>ost4sem<span class="sy0">/</span>exercise<span class="sy0">/</span>basic_adv_awk<span class="sy0">/</span>awk.sh <span class="sy0">&amp;</span></pre>

<p>
<br/>

</p>

</div>
<!-- EDIT1 SECTION "Running AWK" [1-449] -->
<h2 class="sectionedit2" id="from_the_bash_command_line">From the bash command line</h2>
<div class="level2">

<p>
You can run an awk directory from the bash command line by:<br/>

<strong><em>    awk &#039;BEGIN {action}        {action}         END {action}&#039; input.txt &gt; output.txt</em></strong><br/>

Example:
Create a simple input.txt file using awk with the BEGIN pattern.
</p>
<pre class="code bash"><span class="kw3">cd</span> ~<span class="sy0">/</span>ost4sem<span class="sy0">/</span>exercise<span class="sy0">/</span>basic_adv_awk
<span class="kw2">awk</span> <span class="st_h">'BEGIN { print &quot;03 01&quot;}'</span> <span class="sy0">&gt;</span> MMDD.txt
<span class="kw2">awk</span> <span class="st_h">'BEGIN { print &quot;05 11&quot;}'</span> <span class="sy0">&gt;&gt;</span> MMDD.txt
<span class="kw2">awk</span> <span class="st_h">'BEGIN { print &quot;11 23&quot;}'</span> <span class="sy0">&gt;&gt;</span> MMDD.txt
<span class="kw2">more</span> MMDD.txt</pre>

<p>
Insert a header to the MMDD.txt file:
</p>
<pre class="code bash"><span class="kw2">awk</span> <span class="st_h">'BEGIN { print &quot;Month Day&quot;}    {print }    END { print &quot;end file&quot;}'</span> MMDD.txt <span class="sy0">&gt;</span> head_MMDD_tail.txt
<span class="kw2">more</span> head_MMDD_tail.txt</pre>

</div>
<!-- EDIT2 SECTION "From the bash command line" [450-1106] -->
<h2 class="sectionedit3" id="from_a_script">From a script</h2>
<div class="level2">

<p>
You can also create an awk script and run it in the shell by:<br/>

<strong><em>awk -f program.awk input.txt &gt; output.txt</em></strong><br/>

<br/>

</p>
<div class="notetip"><strong>-f</strong> file: Program  text ( <em>BEGIN {action}     {action}   END {action}</em> ) is  read  from  the file instead of from the command line.

</div>
<p>
Example:<br/>

Create a simple simple program.awk script using a text editor, using the previous command:<br/>

</p>
<pre class="code awk"><span class="kw2">BEGIN</span> <span class="br0">&#123;</span> <span class="kw5">print</span> <span class="st0">&quot;Month Day&quot;</span><span class="br0">&#125;</span> <span class="br0">&#123;</span><span class="kw5">print</span> <span class="re0">$0</span><span class="br0">&#125;</span> <span class="kw2">END</span> <span class="br0">&#123;</span> <span class="kw5">print</span> <span class="st0">&quot;end file&quot;</span><span class="br0">&#125;</span> </pre>

<p>
<br/>

save it to <em>date_script.awk</em> in the same folder as MMDD.txt<br/>

</p>

<p>
Run it by:
</p>
<pre class="code bash">   <span class="kw2">awk</span> <span class="re5">-f</span> date_script.awk MMDD.txt <span class="sy0">&gt;</span> head_MMDD_tail2.txt
   <span class="kw2">more</span> head_MMDD_tail2.txt</pre>

</div>
<!-- EDIT3 SECTION "From a script" [1107-1786] -->
<h2 class="sectionedit4" id="glueing_pipes_from_the_command_line">Glueing pipes from the command line</h2>
<div class="level2">

<p>
AWK is integrated directly in the bash language therefore you can concatenate bash and awk command by the pipe (|) symbol.
Example:
</p>
<pre class="code bash"><span class="kw2">grep</span> 05 MMDD.txt <span class="sy0">|</span> <span class="kw2">awk</span> <span class="st_h">'BEGIN { print &quot;Month&quot;} {print }'</span> <span class="sy0">&gt;</span> head_MM.txt
<span class="kw2">more</span> head_MM.txt</pre>

</div>
<!-- EDIT4 SECTION "Glueing pipes from the command line" [1787-2074] -->
<h1 class="sectionedit5" id="how_awk_reads_a_file">How AWK reads a file</h1>
<div class="level1">

</div>
<!-- EDIT5 SECTION "How AWK reads a file" [2075-2109] -->
<h2 class="sectionedit6" id="awk_reads_line_by_line">AWK reads line by line</h2>
<div class="level2">

<p>
AWK reads and processes a file line by line, each action is performed before passing to the next line.<br/>

Each line is a record (a string by default).<br/>

Fields are delimited through a special character: <br/>

</p>
<ul>
<li class="level1"><div class="li"> Whitespace by default</div>
</li>
<li class="level1"><div class="li"> Can be change with: <br/>
</div>
</li>
</ul>
<pre class="code">   “-F” (command line option) or FS (special variable inside the action)‏.\\</pre>

<p>
In the study case we will always use whitespace separated values.<br/>

These options are very useful for export/import files from/in excel by the .csv format.<br/>

</p>

</div>
<!-- EDIT6 SECTION "AWK reads line by line" [2110-2649] -->
<h2 class="sectionedit7" id="fields_are_accessed_with_the">Fields are accessed with the ‘$’</h2>
<div class="level2">

<p>
Each line is separated in fields (or columns).<br/>

</p>
<ul>
<li class="level1"><div class="li"> $1 is the first field, $2 is the second…</div>
</li>
<li class="level1"><div class="li"> $0 the entire line</div>
</li>
<li class="level1"><div class="li"> NF the number of  field</div>
</li>
<li class="level1"><div class="li"> NR the number of row</div>
</li>
</ul>

<p>
These are the most used predefined variables. You can search for others on the web.
</p>

</div>
<!-- EDIT7 SECTION "Fields are accessed with the ‘$’" [2650-2955] -->
<h1 class="sectionedit8" id="basic_programming_in_awk">Basic programming in AWK</h1>
<div class="level1">

</div>
<!-- EDIT8 SECTION "Basic programming in AWK" [2956-2994] -->
<h2 class="sectionedit9" id="explore_the_data">Explore the data</h2>
<div class="level2">

<p>
Example:
migrate to the <em>~/ost4sem/exercise/basic<em>adv</em>awk</em><br/>

</p>
<pre class="code bash"><span class="kw3">cd</span> ~<span class="sy0">/</span>ost4sem<span class="sy0">/</span>exercise<span class="sy0">/</span>basic_adv_awk
<span class="kw2">awk</span> <span class="st_h">'{ print $5 , $2 }'</span> input.txt  <span class="sy0">&gt;</span> output.txt 
<span class="kw2">awk</span> <span class="st_h">'{ print NF }'</span>  input.txt 
<span class="kw2">awk</span> <span class="st_h">'{ print NR }'</span> input.txt</pre>

<p>
How can I print how many lines are in the file?<br/>

Which is a similar Bash shell command?
</p>

</div>
<!-- EDIT9 SECTION "Explore the data" [2995-3342] -->
<h2 class="sectionedit10" id="importing_bash_variables_in_awk">Importing bash variables in awk</h2>
<div class="level2">

<p>
an external variable, a  bash variable, can be imported in AWK by:<br/>

<strong><em>awk   -v  var=value   &#039;{ action }&#039;</em></strong><br/>

</p>
<div class="notetip"> <strong>-v</strong>  variable4awk=variable<em>From</em>Bash: assigns variable<em>From</em>Bash to program variable variable4awk.

</div>
<p>
Example:
</p>
<pre class="code bash"><span class="kw1">for</span> <span class="br0">&#40;</span><span class="br0">&#40;</span> <span class="re2">ibash</span>=<span class="nu0">1</span> ; ibash<span class="sy0">&lt;</span>=<span class="nu0">4</span> ; ibash++  <span class="br0">&#41;</span><span class="br0">&#41;</span>; <span class="kw1">do</span>
<span class="kw2">awk</span>  <span class="re5">-v</span> <span class="re2">iawk</span>=<span class="re1">$ibash</span>  <span class="st_h">'{ print $iawk }'</span> input.txt  
<span class="kw1">done</span> </pre>

<p>
What are the results?<br/>

How do I print the all loop results in one file?<br/>

</p>

</div>
<!-- EDIT10 SECTION "Importing bash variables in awk" [3343-3834] -->
<h2 class="sectionedit11" id="mathematical_function">Mathematical function</h2>
<div class="level2">

<p>
Log, int, + / * 
Example:
</p>
<pre class="code bash"><span class="kw2">awk</span>    <span class="st_h">'{ print log($1) }'</span> input.txt  </pre>

</div>
<!-- EDIT11 SECTION "Mathematical function" [3835-3953] -->
<h2 class="sectionedit12" id="string_function">String function</h2>
<div class="level2">

<p>
Substr() , length()<br/>

Example:
</p>
<pre class="code bash"><span class="kw2">awk</span>    <span class="st_h">'{ print substr($1,1,4) }'</span> input.txt </pre>
<ul>
<li class="level1"><div class="li"> Which is the corresponding command in R ?<br/>
</div>
</li>
</ul>

<p>
Do an example with the length() command.<br/>

Search on the man  or in the web.<br/>

Try to get the meaning.<br/>

</p>

</div>
<!-- EDIT12 SECTION "String function" [3954-4231] -->
<h1 class="sectionedit13" id="advance_programming_in_awk">Advance programming in AWK</h1>
<div class="level1">

</div>
<!-- EDIT13 SECTION "Advance programming in AWK" [4232-4272] -->
<h2 class="sectionedit14" id="control-flow_statement">Control-Flow Statement</h2>
<div class="level2">

<p>
If-else statement
Example:
</p>
<pre class="code bash"><span class="kw2">awk</span>    <span class="st_h">'{ if($3&gt;2) print $3 }'</span>  input.txt
<span class="kw2">awk</span>    <span class="st_h">'{ if($3&gt;=2) print $3 }'</span>  input.txt  
<span class="kw2">awk</span>    <span class="st_h">'{ if($3&lt;2) print $3 }'</span>  input.txt</pre>

<p>
More complicated: extract the maximum value
</p>
<pre class="code bash"><span class="kw2">awk</span> <span class="st_h">'{ if (NR&gt;1) {if ($4&gt;max) max= $4 }} END {print max }'</span>  input.txt</pre>

<p>
There are more examples in the exercise section.
</p>

</div>
<!-- EDIT14 SECTION "Control-Flow Statement" [4273-] -->