<span class="co0"># Getting help </span>
&nbsp;
<span class="co0"># R provides help with function and commands. On-line help gives useful </span>
<span class="co0"># information as well. Getting used to R help is a key to successful </span>
<span class="co0"># statistical modelling. The online help can be accessed in HTML format by </span>
<span class="co0"># typing:</span>
&nbsp;
help.start<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp;
&nbsp;
<span class="co0"># A keyword search is possible using the Search Engine and Keywords link.</span>
<span class="co0"># You can also use the help() or ? functions. For example, if we want to </span>
<span class="co0"># know how to use the matrix() function, the following two commands are </span>
<span class="co0"># equivalents:</span>
&nbsp;
<span class="kw3">help</span><span class="br0">&#40;</span>matrix<span class="br0">&#41;</span>
? matrix
&nbsp;
<span class="co0"># The str(object.name) command is used to display the internal structure </span>
<span class="co0"># of an R object. The summary(object.name) command gives a summary of an </span>
<span class="co0"># object, usually a statistical summary but it is generic meaning it has </span>
<span class="co0"># different operations for different classes of object.</span>
&nbsp;
<span class="kw2">dir</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="co0">#  show files in the current directory</span>
ls.str<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="co0"># str() for each variable in the search path</span>
getwd<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="co0">#  is asking for the current working directory</span>
&nbsp;
<span class="co0"># When you quit, R will ask you if you want to save the workspace </span>
<span class="co0"># (that is, all of the variables you have defined in this session). </span>
<span class="co0"># Say “no” in order to avoid clutter.</span>
&nbsp;
<span class="co0"># Should an R command seem to be stuck or take longer than you’re willing</span>
<span class="co0"># to wait, type Control-C.</span>
&nbsp;
<span class="co0"># Calling linux shell scripting commands </span>
<span class="co0"># system(&quot;...&quot;) is used to call any linux scripting commands within the R</span>
<span class="co0"># environment.</span>
&nbsp;
system<span class="br0">&#40;</span><span class="st0">&quot;pwd&quot;</span><span class="br0">&#41;</span>
&nbsp;
<span class="co0"># is equivalent to:</span>
&nbsp;
getwd<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp;
<span class="co0"># Inputs and outputs</span>
<span class="co0"># Once you have opened an R session and eventually loaded the library you need,</span>
<span class="co0"># you can start exploring your data</span>
&nbsp;
<span class="co0"># Loading data</span>
&nbsp;
<span class="co0"># load(file.name) function, loads R datasets written with the save function </span>
<span class="co0"># load(file.name) </span>
&nbsp;
<span class="co0"># Saving data </span>
&nbsp;
<span class="co0"># save(object.name.1, object.name.2, ... ) function save the specified object </span>
<span class="co0"># in XDR platform independent binary format</span>
&nbsp;
<span class="co0"># Reading tables</span>
&nbsp;
<span class="co0"># read.table(&quot;filename&quot;)** Reads a file in table format and creates a data </span>
<span class="co0"># frame from it, with cases corresponding to lines and variables to fields </span>
<span class="co0"># within the file. The default separator  sep=&quot;&quot;  is any whitespace. </span>
<span class="co0"># You might need  sep=&quot;,&quot;  or  &quot;;&quot;  and so on. </span>
<span class="co0"># Use  header=TRUE  to read the first line as a header of column names. </span>
<span class="co0"># The **as.is=TRUE** specification is used to prevent character vectors from</span>
<span class="co0"># being converted to factors. </span>
&nbsp;
<span class="co0"># The comment.char=&quot;&quot; specification is used to prevent &quot;#&quot; from being </span>
<span class="co0"># interpreted as a comment and use &quot;skip=n&quot; to skip n lines before reading </span>
<span class="co0"># data. For more details:</span>
&nbsp;
?read.table
&nbsp;
<span class="re2">landuse04</span>=read.csv<span class="br0">&#40;</span><span class="st0">&quot;~/ost4sem/exercise/basic_adv_r/inputs/2004_landuse.csv&quot;</span>, 
                   <span class="re2">header</span>=TRUE, <span class="re2">sep</span>=<span class="st0">&quot;,&quot;</span>, <span class="re2">dec</span>=<span class="st0">&quot;.&quot;</span>, na.string=<span class="st0">&quot;:&quot;</span><span class="br0">&#41;</span>
&nbsp;
<span class="co0"># read.csv(&quot;filename&quot;)  is set to read comma separated files. Example usage is:</span>
<span class="co0"># read.csv(file.name, header = TRUE, sep = &quot;,&quot;, quote=&quot;\&quot;&quot;, dec=&quot;.&quot;, </span>
<span class="co0"># fill =TRUE,  comment.char=&quot;&quot;, ...)</span>
&nbsp;
<span class="co0"># read.delim(&quot;filename&quot;) is used for reading tab-delimited files</span>
&nbsp;
<span class="co0"># read.fwf() reads a table of fixed width formatted data into a ’data.frame’.</span>
<span class="co0"># Widths is an integer vector, giving the widths of the fixed-width fields</span>
&nbsp;
<span class="co0"># Show variables and data in your workspace </span>
&nbsp;
<span class="co0"># The list function ls() outputs a list of existing R objects</span>
&nbsp;
<span class="kw2">ls</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp;
<span class="co0"># The structure function str(object.name) informs you of the structure of a</span>
<span class="co0"># specific object the summary function summary(object.name) informs you of </span>
<span class="co0"># basic statistics of a specific object.</span>
&nbsp;
<span class="co0"># Save and remove data or R objects </span>
<span class="co0"># save(file, ...)  saves the specified objects (...) in the XDR </span>
<span class="co0"># platform-independent binary format</span>
&nbsp;
save<span class="br0">&#40;</span>landuse04, <span class="re2">file</span>=<span class="st0">&quot;~/ost4sem/exercise/basic_adv_r/outputs/landuse2004&quot;</span><span class="br0">&#41;</span>
&nbsp;
<span class="co0"># save.image(file) saves all objects</span>
&nbsp;
save<span class="br0">&#40;</span><span class="re2">file</span>=<span class="st0">&quot;~/ost4sem/exercise/basic_adv_r/outputs/landuse2004_and_more&quot;</span><span class="br0">&#41;</span>
&nbsp;
<span class="co0"># rm(file, ...) removes the object you created or data you uploaded</span>
&nbsp;
<span class="kw2">rm</span><span class="br0">&#40;</span>landuse04<span class="br0">&#41;</span>
&nbsp;
<span class="co0"># No objects are present in memory now, use ls function to check it</span>
&nbsp;
<span class="kw2">ls</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
character<span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span>
&nbsp;
<span class="co0"># But since you saved the landuse2004 data you can reload it using the load() </span>
<span class="co0"># function and check its structrure using the str() function</span>
&nbsp;
load<span class="br0">&#40;</span><span class="st0">&quot;~/ost4sem/exercise/basic_adv_r/outputs/landuse2004&quot;</span><span class="br0">&#41;</span>
str<span class="br0">&#40;</span>landuse04<span class="br0">&#41;</span>
&nbsp;
<span class="co0">#  Variables and calculations</span>
&nbsp;
<span class="co0"># R has an interactive calculations function. The command is executed and </span>
<span class="co0"># results are displayed. R uses:  +, -, /, and ^  for addition, subtraction,</span>
<span class="co0"># multiplication, division and exponentiation, respectively</span>
&nbsp;
<span class="nu0">2</span>+<span class="nu0">2</span> 
&nbsp;
<span class="co0"># The [1] at the beginning of the line is just R printing an index of element </span>
<span class="co0"># numbers. If you print a result that appears on multiple lines, R will put </span>
<span class="co0"># an index at the beginning of each line.</span>
&nbsp;
<span class="nu0">2</span><span class="sy0">*</span><span class="nu0">5</span>
&nbsp;
<span class="nu0">10</span><span class="sy0">/</span><span class="nu0">2</span>
&nbsp;
<span class="nu0">2</span>^<span class="nu0">3</span>
&nbsp;
&nbsp;
<span class="co0"># Variable settings </span>
&nbsp;
<span class="co0"># You can simply create a variable by typing: variable name = function, </span>
<span class="co0"># constant or calculation.</span>
&nbsp;
&nbsp;
x =<span class="nu0">3</span><span class="sy0">*</span><span class="nu0">2</span>
&nbsp;
<span class="co0"># The results of 3*2 is not displayed. In fact, the x variable value is stored</span>
<span class="co0"># in the memory without printing it. To display the x value you can use: </span>
&nbsp;
print<span class="br0">&#40;</span>x<span class="br0">&#41;</span> 
&nbsp;
<span class="co0"># Or </span>
&nbsp;
x
&nbsp;
<span class="co0"># Most users apply a similar syntax using the '&lt;-' character string instead </span>
<span class="co0"># of the = character.</span>
&nbsp;
x <span class="sy0">&lt;</span>- <span class="nu0">3</span>
x
&nbsp;
<span class="co0"># Also remember that R is case sensitive, print(X) or X is different from x. </span>
<span class="co0"># For instance:</span>
&nbsp;
a <span class="sy0">&lt;</span>- <span class="nu0">3</span>
a
A
&nbsp;
<span class="co0"># Variable names in R must begin with a letter, followed by alphanumeric </span>
<span class="co0"># characters. </span>
&nbsp;
3e = <span class="nu0">2</span>
&nbsp;
<span class="co0"># In long names you can use &quot;.&quot; or &quot;_&quot; as in </span>
&nbsp;
<span class="co0"># very.long.variable.name.X or very_long_variable_name_Y but you can’t use </span>
<span class="co0"># blank spaces in variable names. Avoid single letter names such us: </span>
<span class="co0"># c, l, q, t, C, D, F, I, and T, which are either built-in R functions or hard</span>
<span class="co0"># to tell apart.</span>
&nbsp;
very.long.variable.name.X3 = <span class="nu0">3</span>
very.long.variable.name.X3
&nbsp;
&nbsp;
<span class="co0"># Interactive calculations</span>
&nbsp;
<span class="co0"># Once defined,  you can use variables in interactive calculations :</span>
&nbsp;
b = <span class="nu0">2</span><span class="sy0">*</span><span class="nu0">2</span>
a = <span class="nu0">2</span><span class="sy0">*</span><span class="nu0">3</span>
a<span class="sy0">*</span>b
&nbsp;
<span class="co0"># And you can use variables in formulas :</span>
&nbsp;
c = <span class="nu0">60</span> <span class="sy0">/</span><span class="br0">&#40;</span>a+b<span class="br0">&#41;</span>
c
&nbsp;
<span class="co0"># typing a;b you can display a and b variables at the same time:</span>
&nbsp;
a;b
&nbsp;
<span class="co0"># If you forget to close a parenthesis, R will display a *+* sign. </span>
&nbsp;
<span class="co0"># c = 60 /(a+b</span>
&nbsp;
<span class="co0"># In this case you can either close the parenthesis in the next line or type </span>
<span class="co0"># ctrl + c to go back to a new starting prompt. </span>
&nbsp;
<span class="co0"># Order of operations</span>
&nbsp;
<span class="co0"># When using more complex formulas be aware of the importance of the order of </span>
<span class="co0"># operators. Parenthesis have priority over exponentiation, or powers, then </span>
<span class="co0"># comes multiplication and division, finally addition and subtraction. </span>
&nbsp;
<span class="co0"># The following command:</span>
&nbsp;
C = <span class="br0">&#40;</span><span class="br0">&#40;</span>a + <span class="nu0">2</span> <span class="sy0">*</span> sqrt<span class="br0">&#40;</span>b<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">/</span><span class="br0">&#40;</span>a + <span class="nu0">8</span> <span class="sy0">*</span> sqrt<span class="br0">&#40;</span>b<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">/</span><span class="nu0">2</span>
C
&nbsp;
<span class="co0"># is different from:</span>
&nbsp;
C = a + <span class="nu0">2</span> <span class="sy0">*</span> sqrt<span class="br0">&#40;</span>b<span class="br0">&#41;</span> <span class="sy0">/</span> a + <span class="nu0">8</span> <span class="sy0">*</span> sqrt<span class="br0">&#40;</span>b<span class="br0">&#41;</span> <span class="sy0">/</span> <span class="nu0">2</span>
C
&nbsp;
<span class="co0"># as well as </span>
&nbsp;
<span class="nu0">100</span>-<span class="nu0">40</span><span class="sy0">/</span><span class="nu0">2</span>^<span class="nu0">4</span>
&nbsp;
<span class="co0"># is different from:</span>
&nbsp;
<span class="br0">&#40;</span><span class="nu0">100</span>-<span class="nu0">40</span><span class="br0">&#41;</span><span class="sy0">/</span><span class="nu0">2</span>^<span class="nu0">4</span> 
&nbsp;
<span class="co0"># and </span>
&nbsp;
-<span class="nu0">2</span>^<span class="nu0">4</span>
&nbsp;
<span class="co0"># is different from: </span>
&nbsp;
<span class="br0">&#40;</span>-<span class="nu0">2</span><span class="br0">&#41;</span>^<span class="nu0">4</span>
&nbsp;
&nbsp;
<span class="co0"># Logical values</span>
&nbsp;
<span class="co0"># R can perform conditional tests and generate True or False values as results.</span>
<span class="co0"># The logical operators are  &lt; ,  &lt;= ,  &gt; ,  &gt;= ,  ==  for exact equality and</span>
<span class="co0"># != for inequality. </span>
&nbsp;
x = <span class="nu0">60</span>
x <span class="sy0">&gt;</span> <span class="nu0">100</span>
&nbsp;
x == <span class="nu0">70</span>
&nbsp;
x <span class="sy0">&gt;</span>   <span class="nu0">3</span>
&nbsp;
x = <span class="nu0">100</span>
&nbsp;
<span class="co0"># Logical values can be stored as variables: </span>
&nbsp;
x = <span class="nu0">60</span>
logical.value =  x <span class="sy0">&gt;</span>  <span class="nu0">3</span>
logical.value
&nbsp;
<span class="co0"># In addition if c1 and c2 are logical expressions, then c1  &amp;  c2 is their </span>
<span class="co0"># intersection (“and”), c1  |  c2 is their union (“or”), and  !  !c1 is the </span>
<span class="co0"># negation of c1. </span>
&nbsp;
&nbsp;
&nbsp;
<span class="co0"># R objects</span>
&nbsp;
<span class="co0"># The entities R operates on are technically known as  objects. </span>
<span class="co0"># Examples are &quot;vectors of numeric (real)&quot; or &quot;complex values&quot;, &quot;vectors of </span>
<span class="co0"># logical&quot; values and &quot;vectors of character strings&quot;. </span>
<span class="co0"># These are known as  “atomic”  structures since their components are all of </span>
<span class="co0"># the same type, or mode, namely numeric, complex, logical, character and raw.</span>
<span class="co0"># R also operates on objects called &quot;lists&quot;, which are of mode list. </span>
<span class="co0"># These are ordered sequences of objects which individually can be of any mode. </span>
<span class="co0"># Lists are known as  “recursive”  rather than atomic structures since their </span>
<span class="co0"># components can themselves be lists in their own right.</span>
&nbsp;
<span class="co0"># The other recursive structures are those of mode function and  expression. </span>
<span class="co0"># Functions are the objects that form part of the R system along with similar </span>
<span class="co0"># user written functions, which we discuss in some detail later. Expressions </span>
<span class="co0"># as objects form an advanced part of R which will not be discussed in this </span>
<span class="co0"># guide, except indirectly when we discuss formulae used with modeling in R.</span>
&nbsp;
<span class="co0"># By the &quot;mode&quot; of an object we mean the basic type of its fundamental </span>
<span class="co0"># constituents. This is a special case of a  “property”  of an object. Another</span>
<span class="co0"># property of every object is its &quot;length.&quot; The functions mode(object) and </span>
<span class="co0"># length(object) can be used </span>
<span class="co0"># to find out the mode and length of any defined structure 10.</span>
&nbsp;
<span class="co0"># Further properties of an object are usually provided by attributes(object), </span>
<span class="co0"># (see 'Getting and setting attributes'). Because of this, mode and length are </span>
<span class="co0"># also called “intrinsic attributes” of an object. For example, if z is a </span>
<span class="co0"># complex vector of length 100, then in an expression mode(z) is the character</span>
<span class="co0"># string &quot;complex&quot; and length(z) is 100.</span>
&nbsp;
&nbsp;
<span class="co0"># Vectors</span>
&nbsp;
<span class="co0"># Vectors are combinations of scalars in a string structure. Vectors must have </span>
<span class="co0"># all values of the same mode. Thus any given vector must be unambiguously </span>
<span class="co0"># either logical, numeric, complex, character or raw. (The only apparent </span>
<span class="co0"># exception to this rule is the special “value” listed as NA for quantities not</span>
<span class="co0"># available, but in fact there are several types of NA). Note that a vector can</span>
<span class="co0"># be empty and still have a mode. For example the empty character string vector</span>
<span class="co0"># is listed as character(0) and the empty numeric vector as numeric(0). </span>
&nbsp;
&nbsp;
<span class="co0"># c(...) is the generic function to combine arguments with the default forming </span>
<span class="co0"># a vector; with RECURSIVE=TRUE descends through lists combining all elements </span>
<span class="co0"># into one vector. To see details for the generic function c(...) and combine </span>
<span class="co0"># arguments forming a vector: </span>
&nbsp;
? c 
&nbsp;
<span class="co0"># As an example we can create a simple vector of seven values typing: </span>
&nbsp;
c<span class="br0">&#40;</span><span class="nu0">2</span>, <span class="nu0">3</span>, <span class="nu0">4</span>, <span class="nu0">5</span>, <span class="nu0">10</span>, <span class="nu0">5</span>, <span class="nu0">8</span><span class="br0">&#41;</span>
&nbsp;
<span class="co0"># We can generate a sequence using the syntax:</span>
&nbsp;
<span class="nu0">1</span>:<span class="nu0">10</span>
&nbsp;
<span class="co0"># We can generate the same sequence of  1:10  command using the seq() function. </span>
<span class="co0"># The syntax will be :</span>
&nbsp;
<span class="kw2">seq</span><span class="br0">&#40;</span><span class="nu0">1</span>,<span class="nu0">10</span><span class="br0">&#41;</span>
&nbsp;
<span class="co0"># The seq() function &quot;seq(from = number, to = number, by = number)&quot; allow to </span>
<span class="co0"># create a vector starting from a value to another by a defined increment:</span>
&nbsp;
<span class="kw2">seq</span><span class="br0">&#40;</span><span class="nu0">1</span>,<span class="nu0">10</span>, <span class="nu0">0.25</span><span class="br0">&#41;</span>
&nbsp;
<span class="kw2">seq</span><span class="br0">&#40;</span>from = <span class="nu0">1</span>, to = <span class="nu0">10</span>, by =  <span class="nu0">0.25</span><span class="br0">&#41;</span>
&nbsp;
<span class="co0"># The replicate function  &quot;rep(x,times)&quot;  enables you to replicate a vector </span>
<span class="co0"># several times in a more complex vector. Calculations can be included to </span>
<span class="co0"># form vectors as well and functions can be combined in the same command:</span>
&nbsp;
one2three = <span class="nu0">1</span>:<span class="nu0">3</span> 
rep<span class="br0">&#40;</span>one2three,<span class="nu0">10</span><span class="br0">&#41;</span> 
&nbsp;
c<span class="br0">&#40;</span><span class="nu0">10</span><span class="sy0">*</span><span class="nu0">0</span>:<span class="nu0">10</span><span class="br0">&#41;</span>
&nbsp;
rep<span class="br0">&#40;</span>c <span class="br0">&#40;</span><span class="nu0">5</span><span class="sy0">*</span><span class="nu0">40</span>:<span class="nu0">1</span>, <span class="nu0">5</span><span class="sy0">*</span><span class="nu0">1</span>:<span class="nu0">40</span>, <span class="nu0">5</span>, <span class="nu0">6</span>,<span class="nu0">7</span>,<span class="nu0">8</span>, <span class="nu0">3</span>, <span class="nu0">2001</span>:<span class="nu0">2014</span><span class="br0">&#41;</span>, <span class="nu0">2</span><span class="br0">&#41;</span>
&nbsp;
rep<span class="br0">&#40;</span><span class="kw2">seq</span><span class="br0">&#40;</span><span class="nu0">1</span>,<span class="nu0">3</span>,<span class="nu0">0.5</span><span class="br0">&#41;</span>,<span class="nu0">3</span><span class="br0">&#41;</span>
&nbsp;
<span class="co0"># Missing Values</span>
&nbsp;
<span class="co0"># In some cases the components of a vector or of an R object more in general, </span>
<span class="co0"># may not be completely known. When an element or value is “not available” </span>
<span class="co0"># or a “missing value” in the statistical sense, a place within a vector may</span>
<span class="co0"># be reserved for it by assigning it the special value NA. Any operation on </span>
<span class="co0"># an NA becomes an NA. </span>
&nbsp;
<span class="co0"># The function is.na(x)  gives a logical vector of the same size as x with </span>
<span class="co0"># value TRUE if and only if the corresponding element in x is NA.</span>
&nbsp;
z <span class="sy0">&lt;</span>- c<span class="br0">&#40;</span><span class="nu0">1</span>:<span class="nu0">3</span>,NA<span class="br0">&#41;</span>
ind <span class="sy0">&lt;</span>- is.na<span class="br0">&#40;</span>z<span class="br0">&#41;</span>
ind
&nbsp;
<span class="co0"># There is a second kind of “missing” values which are produced by numerical </span>
<span class="co0"># computation, the so-called Not a Number,  NaN , values. Examples are 0/0 </span>
<span class="co0"># or Inf - Inf which both give NaN since the result cannot be defined sensibly.</span>
&nbsp;
Inf-Inf
<span class="nu0">0</span><span class="sy0">/</span><span class="nu0">0</span>
&nbsp;
<span class="co0"># In summary, is.na(xx) is TRUE both for NA and NaN values. To differentiate </span>
<span class="co0"># these, is.nan(xx) is only TRUE for NaNs. Missing values are sometimes printed</span>
<span class="co0"># as &lt;NA&gt; when character vectors are printed without quotes. </span>
&nbsp;
z <span class="sy0">&lt;</span>- c<span class="br0">&#40;</span><span class="nu0">1</span>:<span class="nu0">3</span>,NA<span class="br0">&#41;</span>
is.not.available <span class="sy0">&lt;</span>- is.na<span class="br0">&#40;</span>z<span class="br0">&#41;</span> 
is.not.a.number <span class="sy0">&lt;</span>-is.nan<span class="br0">&#40;</span>z<span class="br0">&#41;</span>
&nbsp;
is.not.a.number
is.not.available 
&nbsp;
&nbsp;
<span class="co0"># Matrices</span>
&nbsp;
<span class="co0"># Matrices, or more generally arrays, are multi-dimensional generalizations of </span>
<span class="co0"># vectors. In fact, they are vectors that can be indexed by two or more indices</span>
<span class="co0"># and will be printed in a special way. See Arrays and matrices.</span>
<span class="co0"># Factors provide compact ways to handle categorical data. See Factors.</span>
<span class="co0"># Lists are a general form of vector in which the various elements need not be </span>
<span class="co0"># of the same type, and are often themselves vectors or lists. Lists provide a </span>
<span class="co0"># convenient way to return the results of a statistical computation. See Lists.</span>
&nbsp;
<span class="co0"># The matrix() function creates a matrix from the given set of values. We use </span>
<span class="co0"># the matrix(x, nrow=, ncol=) function to set the matrix cell values, the </span>
<span class="co0"># number of rows and the number of columns. We can use the colnames() and </span>
<span class="co0"># rownames() functions to set the column and row names of the matrix-like </span>
<span class="co0"># object.</span>
&nbsp;
matrix<span class="br0">&#40;</span>data = NA, nrow = <span class="nu0">2</span>, ncol = <span class="nu0">3</span><span class="br0">&#41;</span> 
example.matrix = matrix<span class="br0">&#40;</span><span class="nu0">0</span>,<span class="nu0">2</span>,<span class="nu0">3</span><span class="br0">&#41;</span>
example.matrix
&nbsp;
example.matrix<span class="br0">&#91;</span><span class="nu0">1</span>,<span class="br0">&#93;</span>
&nbsp;
example.matrix<span class="br0">&#91;</span>,<span class="nu0">2</span><span class="br0">&#93;</span>
&nbsp;
example.matrix<span class="br0">&#91;</span><span class="nu0">1</span>,<span class="br0">&#93;</span> = <span class="nu0">1</span>:<span class="nu0">3</span>
example.matrix<span class="br0">&#91;</span><span class="nu0">2</span>,<span class="br0">&#93;</span> = c<span class="br0">&#40;</span><span class="nu0">5</span>,<span class="nu0">10</span>,<span class="nu0">4</span><span class="br0">&#41;</span>
example.matrix
&nbsp;
matrix.head = c<span class="br0">&#40;</span><span class="st0">&quot;col a&quot;</span>,<span class="st0">&quot;col b&quot;</span>,<span class="st0">&quot;column c&quot;</span><span class="br0">&#41;</span>
matrix.side = c<span class="br0">&#40;</span><span class="st0">&quot;first raw&quot;</span>,<span class="st0">&quot;second raw&quot;</span><span class="br0">&#41;</span>
str<span class="br0">&#40;</span>matrix.side<span class="br0">&#41;</span>
&nbsp;
<span class="co0"># When using &quot; &quot;  we create and refer to a character type &quot;chr&quot; input</span>
&nbsp;
numeric.vector = c<span class="br0">&#40;</span>rep<span class="br0">&#40;</span>c <span class="br0">&#40;</span><span class="nu0">5</span><span class="sy0">*</span><span class="nu0">10</span>:<span class="nu0">1</span>, <span class="nu0">5</span>, <span class="nu0">6</span><span class="br0">&#41;</span>, <span class="nu0">2</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
character.vector  = as.character<span class="br0">&#40;</span>numeric.vector<span class="br0">&#41;</span>
str<span class="br0">&#40;</span>character.vector<span class="br0">&#41;</span>
&nbsp;
colnames<span class="br0">&#40;</span>example.matrix<span class="br0">&#41;</span> = matrix.head
rownames<span class="br0">&#40;</span>example.matrix<span class="br0">&#41;</span> = matrix.side
example.matrix
&nbsp;
str<span class="br0">&#40;</span>example.matrix<span class="br0">&#41;</span>
&nbsp;
<span class="co0"># Array</span>
&nbsp;
<span class="co0"># An array can be considered a multiple subscripted collection of data </span>
<span class="co0"># entries, for example numeric. R allows simple facilities for creating </span>
<span class="co0"># and handling arrays, and in particular the special case of matrices. </span>
&nbsp;
<span class="co0"># As well as giving a vector structure a dim attribute, arrays can be </span>
<span class="co0"># constructed from vectors by the array function, which has the form </span>
<span class="co0"># array(data_vector, dim_vector)</span>
&nbsp;
Z <span class="sy0">&lt;</span>- array<span class="br0">&#40;</span><span class="nu0">1</span>:<span class="nu0">24</span>, c<span class="br0">&#40;</span><span class="nu0">3</span>,<span class="nu0">4</span>,<span class="nu0">2</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
Z
&nbsp;
<span class="co0"># Data Frames</span>
&nbsp;
<span class="co0"># Data frames are matrix-like structures, in which the columns can be </span>
<span class="co0"># of different types. Think of data frames as  data matrices  with one row per </span>
<span class="co0"># observational unit but with (possibly) both numerical and categorical </span>
<span class="co0"># variables. Many experiments are best described by data frames: the treatments</span>
<span class="co0"># are categorical but the response is numeric. </span>
&nbsp;
<span class="co0"># As a result R dataframes are tightly coupled collections of variables which </span>
<span class="co0"># share many of the properties of matrices and of lists. Data frames are used </span>
<span class="co0"># as the fundamental data structure by most of R's modeling software.</span>
&nbsp;
<span class="co0"># A data frame is a list with class &quot;data.frame&quot;. There are restrictions on </span>
<span class="co0"># lists that may be made into data frames, namely :</span>
&nbsp;
<span class="co0"># The components must be vectors (numeric, character, or logical), factors, </span>
<span class="co0"># numeric matrices, lists, or other data frames.</span>
<span class="co0"># Matrices, lists, and data frames provide as many variables to the new data </span>
<span class="co0"># frame as they have columns, elements, or variables, respectively.</span>
<span class="co0"># Numeric vectors, logicals and factors are included, and character vectors </span>
<span class="co0"># are coerced to be factors, whose levels are the unique values appearing in</span>
<span class="co0"># the vector.</span>
<span class="co0"># Vector structures appearing as variables of the data frame must all have the</span>
<span class="co0"># same length, and matrix structures must all have the same row size. See:</span>
&nbsp;
? data.frame
&nbsp;
<span class="co0"># To construct a dataframe:</span>
&nbsp;
my.data.frame = data.frame<span class="br0">&#40;</span>v = <span class="nu0">1</span>:<span class="nu0">4</span>, ch = c<span class="br0">&#40;</span><span class="st0">&quot;a&quot;</span>, <span class="st0">&quot;b&quot;</span>, <span class="st0">&quot;c&quot;</span>, <span class="st0">&quot;d&quot;</span><span class="br0">&#41;</span>, n = <span class="nu0">10</span><span class="br0">&#41;</span>
my.data.frame
&nbsp;
<span class="co0"># Or:</span>
&nbsp;
my.data.frame = data.frame<span class="br0">&#40;</span>vector = <span class="nu0">1</span>:<span class="nu0">4</span>,
                           character = c<span class="br0">&#40;</span><span class="st0">&quot;a&quot;</span>, <span class="st0">&quot;b&quot;</span>, <span class="st0">&quot;c&quot;</span>, <span class="st0">&quot;d&quot;</span><span class="br0">&#41;</span>,
                           const.vector = <span class="nu0">10</span>,
                           row.names =c<span class="br0">&#40;</span><span class="st0">&quot;data1&quot;</span>, <span class="st0">&quot;data2&quot;</span>, <span class="st0">&quot;data3&quot;</span>, <span class="st0">&quot;data4&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
my.data.frame
&nbsp;
&nbsp;
<span class="co0"># Data selection and manipulation</span>
&nbsp;
<span class="co0"># You can extract data from dataframes using the    [ [    ] ]  and  $  sign:</span>
&nbsp;
my.data.frame<span class="br0">&#91;</span><span class="br0">&#91;</span><span class="st0">&quot;character&quot;</span><span class="br0">&#93;</span><span class="br0">&#93;</span>
&nbsp;
my.data.frame<span class="br0">&#91;</span><span class="br0">&#91;</span><span class="nu0">2</span><span class="br0">&#93;</span><span class="br0">&#93;</span>
&nbsp;
<span class="co0"># Call the 3rd value of the character vector:</span>
&nbsp;
my.data.frame<span class="br0">&#91;</span><span class="br0">&#91;</span><span class="nu0">2</span><span class="br0">&#93;</span><span class="br0">&#93;</span><span class="br0">&#91;</span><span class="nu0">3</span><span class="br0">&#93;</span>
&nbsp;
<span class="co0"># Or using the $ syntax:</span>
&nbsp;
<span class="co4">my.data.frame$</span>vector
&nbsp;
<span class="co4">my.data.frame$</span>character<span class="br0">&#91;</span><span class="nu0">2</span>:<span class="nu0">3</span><span class="br0">&#93;</span>
&nbsp;
<span class="co0"># You can add single arguments to a data frame, query information, select and </span>
<span class="co0"># manipulate arguments or single values from a dataframe </span>
&nbsp;
<span class="co4">my.data.frame$</span>new
&nbsp;
<span class="co4">my.data.frame$</span>new = c<span class="br0">&#40;</span><span class="nu0">10</span>,<span class="nu0">11</span>,<span class="nu0">20</span>,<span class="nu0">40</span><span class="br0">&#41;</span>
my.data.frame
&nbsp;
<span class="co0"># length(object.name) returns the number of elements in an object such as </span>
<span class="co0"># matrix vector or dataframes:</span>
&nbsp;
length<span class="br0">&#40;</span>my.data.frame<span class="re1">$new</span><span class="br0">&#41;</span> 
&nbsp;
<span class="co0"># which(object.name) and which.max(object.name) return the index of a specific</span>
<span class="co0"># or of the greatest element of an object</span>
&nbsp;
which.max<span class="br0">&#40;</span>my.data.frame<span class="re1">$new</span><span class="br0">&#41;</span> 
&nbsp;
<span class="kw2">which</span><span class="br0">&#40;</span>my.data.frame<span class="re1">$new</span> == <span class="nu0">20</span><span class="br0">&#41;</span> 
&nbsp;
<span class="co0"># max(object.name) returns the value of the greatest element</span>
&nbsp;
max<span class="br0">&#40;</span>my.data.frame<span class="re1">$new</span><span class="br0">&#41;</span> 
&nbsp;
<span class="co0"># sort(object.name) sort from small to big </span>
&nbsp;
<span class="kw2">sort</span><span class="br0">&#40;</span>my.data.frame<span class="re1">$new</span><span class="br0">&#41;</span> 
&nbsp;
<span class="co0"># rev(object.name) sorts from big to small</span>
&nbsp;
<span class="kw2">rev</span><span class="br0">&#40;</span><span class="kw2">sort</span><span class="br0">&#40;</span>my.data.frame<span class="re1">$new</span><span class="br0">&#41;</span><span class="br0">&#41;</span> 
&nbsp;
<span class="co0"># subset(object.name, ...) returns a selection of an R-object with respect to </span>
<span class="co0"># criteria (typically comparisons: x$V1 &lt; 10). If the R-object is a data frame,</span>
<span class="co0"># the option select gives the variables to be kept or dropped using a minus </span>
<span class="co0"># sign</span>
&nbsp;
subset<span class="br0">&#40;</span>my.data.frame, my.data.frame<span class="re1">$new</span> == <span class="nu0">20</span><span class="br0">&#41;</span>
&nbsp;
<span class="co0"># Sample() allows sampling from a set of values.</span>
&nbsp;
sample<span class="br0">&#40;</span>my.data.frame<span class="re1">$new</span>, <span class="nu0">3</span><span class="br0">&#41;</span>
sample<span class="br0">&#40;</span>my.data.frame<span class="re1">$new</span>, <span class="nu0">3</span><span class="br0">&#41;</span>
sample<span class="br0">&#40;</span>my.data.frame<span class="re1">$new</span>, <span class="nu0">3</span><span class="br0">&#41;</span>
&nbsp;
<span class="co0"># More examples</span>
&nbsp;
<span class="co0"># The following R commands give an example of the simple procedure of importing </span>
<span class="co0"># data, cleaning a table by extracting relevant information, checking the </span>
<span class="co0"># presence of missing data.</span>
&nbsp;
<span class="re2">landuse04</span>=read.csv<span class="br0">&#40;</span><span class="st0">&quot;~/ost4sem/studycase/Lab_scripts/inputs/2004_landuse.csv&quot;</span>, 
                   <span class="re2">header</span>=TRUE, <span class="re2">sep</span>=<span class="st0">&quot;,&quot;</span>, <span class="re2">dec</span>=<span class="st0">&quot;.&quot;</span>, na.string=<span class="st0">&quot;:&quot;</span><span class="br0">&#41;</span>
&nbsp;
forests04 = subset<span class="br0">&#40;</span>landuse04, landuse04<span class="re1">$forest</span>.Wooded.area <span class="sy0">&gt;</span>= <span class="nu0">0</span> <span class="br0">&#41;</span>
<span class="co4">forests04$</span>landuse = NULL
forests04.check=na.fail<span class="br0">&#40;</span>forests04<span class="br0">&#41;</span>
<span class="co4">forests04$</span>total.Total.area<span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span> = NA
forests04.check=na.fail<span class="br0">&#40;</span>forests04<span class="br0">&#41;</span>
&nbsp;
<span class="co0"># The last line above will throw an error.</span>
<span class="co0"># We can resolve the situation from the beginning with no NA</span>
&nbsp;
forests04 = subset<span class="br0">&#40;</span>landuse04, landuse04<span class="re1">$forest</span>.Wooded.area <span class="sy0">&gt;</span>=<span class="nu0">0</span> <span class="br0">&#41;</span>
<span class="co4">forests04$</span>landuse = NULL
forests04.check=na.fail<span class="br0">&#40;</span>forests04<span class="br0">&#41;</span>
str<span class="br0">&#40;</span>forests04<span class="br0">&#41;</span>
&nbsp;
<span class="co0"># Do you see something strange? Look at theforests04$geographic.Unit level of</span>
<span class="co0"># factors and the dataframe number of variables!</span>
&nbsp;
<span class="co0"># Let's fix it now!</span>
&nbsp;
library<span class="br0">&#40;</span>gdata<span class="br0">&#41;</span>
forests04 = drop.levels<span class="br0">&#40;</span>forests04<span class="br0">&#41;</span>
str<span class="br0">&#40;</span>forests04<span class="br0">&#41;</span>
&nbsp;
&nbsp;
<span class="co0"># Functions</span>
&nbsp;
<span class="co0"># Functions are themselves objects in R which can be stored in the project's </span>
<span class="co0"># workspace. This provides a simple and convenient way to extend R.  </span>
<span class="co0"># Usage: in writing your own function you provide one or more arguments or </span>
<span class="co0"># names for the function, an expression (or body of the function) and a value </span>
<span class="co0"># is produced equal to the output function result.</span>
&nbsp;
<span class="co0"># function(arglist) expr   function definition  </span>
<span class="co0"># return(value) </span>
&nbsp;
<span class="co0"># Example</span>
&nbsp;
myfunction <span class="sy0">&lt;</span>- <span class="kw1">function</span><span class="br0">&#40;</span>x<span class="br0">&#41;</span> x^<span class="nu0">5</span>
myfunction<span class="br0">&#40;</span><span class="nu0">3</span><span class="br0">&#41;</span>
&nbsp;
body<span class="br0">&#40;</span>myfunction<span class="br0">&#41;</span> <span class="sy0">&lt;</span>- quote<span class="br0">&#40;</span><span class="nu0">5</span>^x<span class="br0">&#41;</span>
&nbsp;
<span class="co0">## or equivalently  body(myfunction) &lt;- expression(5^x)</span>
&nbsp;
myfunction<span class="br0">&#40;</span><span class="nu0">3</span><span class="br0">&#41;</span> 
&nbsp;
body<span class="br0">&#40;</span>myfunction<span class="br0">&#41;</span>
&nbsp;
myfunction