B.res&lt;-summary(B.out[,2:8])$statistics
B.est&lt;-B.res[,1]
&nbsp;
##Rearrange so that Intercept term is in the first slot
B.est&lt;-c(B.est[7],B.est[1:6])
&nbsp;
B.prediction&lt;-exp(model.matrix(glm(1:nrow(temp)~Arealdekke+Elev,data=temp)) %*% B.est) ##This is where the prediction is made. Similar function as predict() function
&nbsp;
cor.test(temp$B.pred,temp$predict) ##Correlation between the GLM (frequentist) estimate and the Bayesian estimate == 92%
&nbsp;
&nbsp;
################WRITE THE BAYESIAN PREDICTION###############
pred.frame$predict&lt;-rep(NA,nrow(pred.frame)) ##Fill it with NAs. This is replaced by predicted values next.
pred.frame$predict[pred.frame$Arealdekke==3 | pred.frame$Arealdekke==9 | pred.frame$Arealdekke==12 | pred.frame$Arealdekke==14 | pred.frame$Arealdekke==15 | pred.frame$Arealdekke==19]&lt;-B.prediction
elev$B.pred&lt;-pred.frame$predict
&nbsp;
##Done!
##
&nbsp;
##################################################################################
&nbsp;
&nbsp;
#####RANDOM DRAWS FROM POSTERIOR PARAMETER DISTRIBUTIONS##############
&nbsp;
&nbsp;
&nbsp;
##The function B.new draws random numbers from the output of the Bayesian analysis, by simply sampling the Coda outputs. This way, I can only draw numbers that were actually produced by JAGS.
## Another way would be to define a distribution from the estimated standard errors from the output. Then I would be able to draw any number from the distribution. 
&nbsp;
B.new&lt;-function(){
temp&lt;-c(sample(size=1,unlist(B.out[,8])),sample(size=1,unlist(B.out[,2])),sample(size=1,unlist(B.out[,3])),sample(size=1,unlist(B.out[,4])),sample(size=1,unlist(B.out[,5])),sample(size=1,unlist(B.out[,6])),sample(size=1,unlist(B.out[,7])))
return(temp)
}
&nbsp;
################################################################################