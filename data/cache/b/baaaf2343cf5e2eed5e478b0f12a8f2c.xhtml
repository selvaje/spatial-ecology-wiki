
<h1 class="sectionedit1" id="geospatial_python_crash_course_part_1">Geospatial Python crash course, part 1</h1>
<div class="level1">

<p>
Most of the materials used for the daily presentation will be maintained here:
</p>
<pre class="code">https://github.com/fpl/geotutorial_basic
  </pre>

<p>
Snippets of codes and file will be downloadable from there by cloning and pulling stuff during the ongoing talk. The teacher will orchestrate the downloads and work. Trust him <img src="/dokuwiki/lib/images/smileys/icon_cool.gif" class="icon" alt="8-)" />. 
</p>
<dl class="file">
<dt><a href="https://github.com/fpl/geotutorial_basic/blob/master/00/01_hello-world.py" class="mediafile mf_py">00/01_hello-world.py</a></dt>
<dd><pre class="code file python"><span class="co1">#!/usr/bin/python</span>
&nbsp;
<span class="kw1">print</span><span class="br0">&#40;</span><span class="st0">'Hello, world!'</span><span class="br0">&#41;</span></pre>
</dd></dl><dl class="file">
<dt><a href="https://github.com/fpl/geotutorial_basic/blob/master/00/02_fibonacci.py" class="mediafile mf_py">00/02_fibonacci.py</a></dt>
<dd><pre class="code file python"><span class="co1"># This is the well-known Fibonacci series</span>
a<span class="sy0">,</span> b <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">,</span> <span class="nu0">1</span>
<span class="kw1">while</span> b<span class="sy0">&lt;</span><span class="nu0">2000</span>:
    <span class="kw1">print</span> a
    a<span class="sy0">,</span> b <span class="sy0">=</span> b<span class="sy0">,</span> a+b</pre>
</dd></dl><dl class="file">
<dt><a href="https://github.com/fpl/geotutorial_basic/blob/master/00/03_fibonacci.py" class="mediafile mf_py">00/03_fibonacci.py</a></dt>
<dd><pre class="code file python"><span class="st0">'''
  Use of a function
'''</span>
<span class="kw1">def</span> fibonacci<span class="br0">&#40;</span>n<span class="br0">&#41;</span>:
    a<span class="sy0">,</span> b <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">,</span> <span class="nu0">1</span>
    <span class="kw1">while</span> b<span class="sy0">&lt;</span>n:
        <span class="kw1">print</span> a
        a<span class="sy0">,</span> b <span class="sy0">=</span> b<span class="sy0">,</span> a+b
&nbsp;
fibonacci<span class="br0">&#40;</span><span class="nu0">2000</span><span class="br0">&#41;</span></pre>
</dd></dl><dl class="file">
<dt><a href="https://github.com/fpl/geotutorial_basic/blob/master/00/04_fibonacci.py" class="mediafile mf_py">00/04_fibonacci.py</a></dt>
<dd><pre class="code file python"><span class="st0">'''
    A true function with a return value and
    a list variable
'''</span>
<span class="kw1">def</span> fibonacci<span class="br0">&#40;</span>n<span class="br0">&#41;</span>:
    a<span class="sy0">,</span> b <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">,</span> <span class="nu0">1</span>
    f <span class="sy0">=</span> <span class="br0">&#91;</span><span class="br0">&#93;</span>
    <span class="kw1">while</span> b<span class="sy0">&lt;</span>n:
        f.<span class="me1">append</span><span class="br0">&#40;</span>a<span class="br0">&#41;</span>
        a<span class="sy0">,</span> b <span class="sy0">=</span> b<span class="sy0">,</span> a+b
    <span class="kw1">return</span> f
&nbsp;
s <span class="sy0">=</span> fibonacci<span class="br0">&#40;</span><span class="nu0">2000</span><span class="br0">&#41;</span>
<span class="kw1">print</span> s</pre>
</dd></dl><dl class="file">
<dt><a href="https://github.com/fpl/geotutorial_basic/blob/master/00/05_fibonacci.py" class="mediafile mf_py">00/05_fibonacci.py</a></dt>
<dd><pre class="code file python"><span class="st0">'''
    Default arguments in functions
'''</span>
<span class="kw1">def</span> fibonacci<span class="br0">&#40;</span>n<span class="sy0">=</span><span class="nu0">2000</span><span class="br0">&#41;</span>:
    a<span class="sy0">,</span> b <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">,</span> <span class="nu0">1</span>
    f <span class="sy0">=</span> <span class="br0">&#91;</span><span class="br0">&#93;</span>
    <span class="kw1">while</span> b<span class="sy0">&lt;</span>n:
        f.<span class="me1">append</span><span class="br0">&#40;</span>a<span class="br0">&#41;</span>
        a<span class="sy0">,</span> b <span class="sy0">=</span> b<span class="sy0">,</span> a+b
    <span class="kw1">return</span> f
&nbsp;
s <span class="sy0">=</span> fibonacci<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="kw1">print</span> s</pre>
</dd></dl><dl class="file">
<dt><a href="https://github.com/fpl/geotutorial_basic/blob/master/00/06_fibonacci.py" class="mediafile mf_py">00/06_fibonacci.py</a></dt>
<dd><pre class="code file python"><span class="st0">'''
    Keyword arguments in calling functions
'''</span>
<span class="kw1">def</span> fibonacci<span class="br0">&#40;</span>n<span class="sy0">=</span><span class="nu0">2000</span><span class="br0">&#41;</span>:
    a<span class="sy0">,</span> b <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">,</span> <span class="nu0">1</span>
    f <span class="sy0">=</span> <span class="br0">&#91;</span><span class="br0">&#93;</span>
    <span class="kw1">while</span> b<span class="sy0">&lt;</span>n:
        f.<span class="me1">append</span><span class="br0">&#40;</span>a<span class="br0">&#41;</span>
        a<span class="sy0">,</span> b <span class="sy0">=</span> b<span class="sy0">,</span> a+b
    <span class="kw1">return</span> f
&nbsp;
s <span class="sy0">=</span> fibonacci<span class="br0">&#40;</span>n<span class="sy0">=</span><span class="nu0">10000</span><span class="br0">&#41;</span>
<span class="kw1">print</span> s</pre>
</dd></dl><dl class="file">
<dt><a href="https://github.com/fpl/geotutorial_basic/blob/master/00/07_fibonacci.py" class="mediafile mf_py">00/07_fibonacci.py</a></dt>
<dd><pre class="code file python"><span class="st0">'''
    Preparing for modules...
'''</span>
<span class="kw1">def</span> fibonacci<span class="br0">&#40;</span>n<span class="sy0">=</span><span class="nu0">2000</span><span class="br0">&#41;</span>:
    a<span class="sy0">,</span> b <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">,</span> <span class="nu0">1</span>
    f <span class="sy0">=</span> <span class="br0">&#91;</span><span class="br0">&#93;</span>
    <span class="kw1">while</span> b<span class="sy0">&lt;</span>n:
        f.<span class="me1">append</span><span class="br0">&#40;</span>a<span class="br0">&#41;</span>
        a<span class="sy0">,</span> b <span class="sy0">=</span> b<span class="sy0">,</span> a+b
    <span class="kw1">return</span> f
&nbsp;
<span class="kw1">if</span> __name__ <span class="sy0">==</span> <span class="st0">&quot;__main__&quot;</span>:
    s <span class="sy0">=</span> fibonacci<span class="br0">&#40;</span><span class="br0">&#41;</span>
    <span class="kw1">print</span> <span class="kw2">len</span><span class="br0">&#40;</span>s<span class="br0">&#41;</span>
&nbsp;
<span class="kw1">print</span> s</pre>
</dd></dl>
<p>
Now renames the last file as fibonacci.py and use it as a simple external module:
</p>
<dl class="file">
<dt><a href="https://github.com/fpl/geotutorial_basic/blob/master/00/08_fibonacci.py" class="mediafile mf_py">00/08_fibonacci.py</a></dt>
<dd><pre class="code file python"><span class="st0">'''
    Fibonacci as an external module call
'''</span>
<span class="kw1">import</span> fibonacci <span class="kw1">as</span> fib
&nbsp;
s <span class="sy0">=</span> fib.<span class="me1">fibonacci</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="kw1">print</span> s</pre>
</dd></dl><dl class="file">
<dt><a href="https://github.com/fpl/geotutorial_basic/blob/master/00/09_fibonacci.py" class="mediafile mf_py">00/09_fibonacci.py</a></dt>
<dd><pre class="code file python"><span class="st0">'''
    A matter of namespace and symbols
'''</span>
<span class="kw1">from</span> fibonacci <span class="kw1">import</span> fibonacci
&nbsp;
s <span class="sy0">=</span> fibonacci<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="kw1">print</span> s</pre>
</dd></dl><dl class="file">
<dt><a href="https://github.com/fpl/geotutorial_basic/blob/master/00/10_fibonacci.py" class="mediafile mf_py">00/10_fibonacci.py</a></dt>
<dd><pre class="code file python"><span class="st0">'''
    Command line parameters
'''</span>
<span class="kw1">import</span> <span class="kw3">sys</span>
<span class="kw1">from</span> fibonacci <span class="kw1">import</span> fibonacci
&nbsp;
s <span class="sy0">=</span> fibonacci<span class="br0">&#40;</span><span class="kw2">int</span><span class="br0">&#40;</span><span class="kw3">sys</span>.<span class="me1">argv</span><span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
<span class="kw1">print</span> s</pre>
</dd></dl>
<p>
in bash terminal run<br/>
<br/>

</p>
<pre class="code">chmod +x 10_fibonacci.py 
./10_fibonacci.py  23</pre>
<dl class="file">
<dt><a href="https://github.com/fpl/geotutorial_basic/blob/master/00/11_fibonacci.py" class="mediafile mf_py">00/11_fibonacci.py</a></dt>
<dd><pre class="code file python"><span class="st0">'''
    What if you call this script without the required
    parameter?
'''</span>
<span class="kw1">import</span> <span class="kw3">sys</span>
<span class="kw1">from</span> fibonacci <span class="kw1">import</span> fibonacci
&nbsp;
<span class="kw1">def</span> usage<span class="br0">&#40;</span><span class="br0">&#41;</span>:
    <span class="kw1">print</span> <span class="st0">'''<span class="es0">\</span>
usage: %s int <span class="es0">\</span>
'''</span> % <span class="kw3">sys</span>.<span class="me1">argv</span><span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span>
    <span class="kw3">sys</span>.<span class="me1">exit</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span>
&nbsp;
<span class="kw1">if</span> <span class="kw2">len</span><span class="br0">&#40;</span><span class="kw3">sys</span>.<span class="me1">argv</span><span class="br0">&#41;</span> <span class="sy0">&lt;</span> <span class="nu0">2</span>:
    usage<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp;
s <span class="sy0">=</span> fibonacci<span class="br0">&#40;</span><span class="kw2">int</span><span class="br0">&#40;</span><span class="kw3">sys</span>.<span class="me1">argv</span><span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
<span class="kw1">print</span> s</pre>
</dd></dl><dl class="file">
<dt><a href="https://github.com/fpl/geotutorial_basic/blob/master/00/12_fibonacci.py" class="mediafile mf_py">00/12_fibonacci.py</a></dt>
<dd><pre class="code file python"><span class="st0">'''
    What if you call this script with a wrong type
    parameter?
'''</span>
<span class="kw1">import</span> <span class="kw3">sys</span>
<span class="kw1">from</span> fibonacci <span class="kw1">import</span> fibonacci
&nbsp;
<span class="kw1">def</span> usage<span class="br0">&#40;</span><span class="br0">&#41;</span>:
    <span class="kw1">print</span> <span class="st0">'''<span class="es0">\</span>
usage: %s int <span class="es0">\</span>
'''</span> % <span class="kw3">sys</span>.<span class="me1">argv</span><span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span>
    <span class="kw3">sys</span>.<span class="me1">exit</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span>
&nbsp;
<span class="kw1">if</span> <span class="kw2">len</span><span class="br0">&#40;</span><span class="kw3">sys</span>.<span class="me1">argv</span><span class="br0">&#41;</span> <span class="sy0">&lt;</span> <span class="nu0">2</span>:
    usage<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp;
<span class="kw1">try</span>:
    n <span class="sy0">=</span> <span class="kw2">int</span><span class="br0">&#40;</span><span class="kw3">sys</span>.<span class="me1">argv</span><span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span><span class="br0">&#41;</span>
<span class="kw1">except</span>:
    usage<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp;
s <span class="sy0">=</span> fibonacci<span class="br0">&#40;</span>n<span class="br0">&#41;</span>
<span class="kw1">print</span> s</pre>
</dd></dl>
<p>
And now something completely different: the <em>object-oriented</em> version of the Fibonacci module:
</p>
<dl class="file">
<dt><a href="https://github.com/fpl/geotutorial_basic/blob/master/00/FibonacciBasic.py" class="mediafile mf_py">00/FibonacciBasic.py</a></dt>
<dd><pre class="code file python"><span class="st0">'''
    FibonacciBasic, the OOP approach
'''</span>
<span class="kw1">class</span> Fibonacci:
    _f <span class="sy0">=</span> <span class="br0">&#91;</span><span class="br0">&#93;</span>
&nbsp;
    <span class="kw1">def</span> <span class="kw4">__init__</span><span class="br0">&#40;</span><span class="kw2">self</span><span class="sy0">,</span> n<span class="sy0">=</span><span class="nu0">2000</span><span class="br0">&#41;</span>:
        a<span class="sy0">,</span> b <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">,</span> <span class="nu0">1</span>
        <span class="kw1">while</span> b<span class="sy0">&lt;</span>n:
            <span class="kw2">self</span>._f.<span class="me1">append</span><span class="br0">&#40;</span>a<span class="br0">&#41;</span>
            a<span class="sy0">,</span> b <span class="sy0">=</span> b<span class="sy0">,</span> a+b
&nbsp;
    <span class="kw1">def</span> <span class="kw2">list</span><span class="br0">&#40;</span><span class="kw2">self</span><span class="br0">&#41;</span>:
        <span class="kw1">print</span> <span class="kw2">self</span>._f
&nbsp;
<span class="kw1">if</span> __name__ <span class="sy0">==</span> <span class="st0">&quot;__main__&quot;</span>:
    s <span class="sy0">=</span> Fibonacci<span class="br0">&#40;</span><span class="nu0">10000</span><span class="br0">&#41;</span>
    s.<span class="kw2">list</span><span class="br0">&#40;</span><span class="br0">&#41;</span></pre>
</dd></dl>
<p>
… and how you can use it in a calling script:
</p>
<dl class="file">
<dt><a href="https://github.com/fpl/geotutorial_basic/blob/master/00/13_fibonacci.py" class="mediafile mf_py">00/13_fibonacci.py</a></dt>
<dd><pre class="code file python"><span class="st0">'''
Now use a class instead of a procedural module
'''</span>
<span class="kw1">import</span> <span class="kw3">sys</span>
<span class="kw1">from</span> FibonacciBasic <span class="kw1">import</span> Fibonacci <span class="kw1">as</span> f
&nbsp;
<span class="kw1">def</span> usage<span class="br0">&#40;</span><span class="br0">&#41;</span>:
    <span class="kw1">print</span> <span class="st0">'''<span class="es0">\</span>
usage: %s int <span class="es0">\</span>
'''</span> % <span class="kw3">sys</span>.<span class="me1">argv</span><span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span>
    <span class="kw3">sys</span>.<span class="me1">exit</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span>
&nbsp;
<span class="kw1">if</span> <span class="kw2">len</span><span class="br0">&#40;</span><span class="kw3">sys</span>.<span class="me1">argv</span><span class="br0">&#41;</span> <span class="sy0">&lt;</span> <span class="nu0">2</span>:
    usage<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp;
<span class="kw1">try</span>:
    n <span class="sy0">=</span> <span class="kw2">int</span><span class="br0">&#40;</span><span class="kw3">sys</span>.<span class="me1">argv</span><span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span><span class="br0">&#41;</span>
<span class="kw1">except</span>:
    usage<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp;
s <span class="sy0">=</span> f<span class="br0">&#40;</span>n<span class="br0">&#41;</span>
s.<span class="kw2">list</span><span class="br0">&#40;</span><span class="br0">&#41;</span></pre>
</dd></dl>
<p>
Finally, a more complicated version of Fibonacci class, with inheritance, static stuff and other OO concepts can be introduced:
</p>
<dl class="file">
<dt><a href="https://github.com/fpl/geotutorial_basic/blob/master/00/FibonacciAdvanced.py" class="mediafile mf_py">00/FibonacciAdvanced.py</a></dt>
<dd><pre class="code file python"><span class="st0">'''
    FibonacciAdvanced, the OOP approach
'''</span>
<span class="kw1">class</span> FibonacciAdvanced:
    <span class="st0">''' 
    This is a class with a static member and 
    a static method
    '''</span>
&nbsp;
    <span class="co1"># static member</span>
    _name <span class="sy0">=</span> <span class="st0">'Fibonacci series advanced class'</span> 
&nbsp;
    <span class="kw1">def</span> <span class="kw4">__init__</span><span class="br0">&#40;</span><span class="kw2">self</span><span class="sy0">,</span> n<span class="sy0">=</span><span class="nu0">2000</span><span class="br0">&#41;</span>:
        <span class="kw2">self</span>._f <span class="sy0">=</span> <span class="br0">&#91;</span><span class="br0">&#93;</span>
        a<span class="sy0">,</span> b <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">,</span> <span class="nu0">1</span>
        <span class="kw1">while</span> b<span class="sy0">&lt;</span>n:
            <span class="kw2">self</span>._f.<span class="me1">append</span><span class="br0">&#40;</span>a<span class="br0">&#41;</span>
            a<span class="sy0">,</span> b <span class="sy0">=</span> b<span class="sy0">,</span> a+b
&nbsp;
    <span class="kw1">def</span> <span class="kw2">list</span><span class="br0">&#40;</span><span class="kw2">self</span><span class="br0">&#41;</span>:
        <span class="kw1">print</span> <span class="kw2">self</span>._f
&nbsp;
    <span class="kw1">def</span> get<span class="br0">&#40;</span><span class="kw2">self</span><span class="sy0">,</span>index<span class="sy0">=</span><span class="nu0">0</span><span class="br0">&#41;</span>:
        <span class="kw1">print</span> <span class="kw2">self</span>._f<span class="br0">&#91;</span>index<span class="br0">&#93;</span>
&nbsp;
    <span class="kw1">def</span> <span class="kw2">slice</span><span class="br0">&#40;</span><span class="kw2">self</span><span class="sy0">,</span>start<span class="sy0">=</span><span class="nu0">0</span><span class="sy0">,</span>end<span class="sy0">=</span>-<span class="nu0">1</span><span class="br0">&#41;</span>:
        <span class="kw1">print</span> <span class="kw2">self</span>._f<span class="br0">&#91;</span>start:end<span class="br0">&#93;</span>
&nbsp;
    <span class="co1"># static method with mandatory decorator</span>
    <span class="sy0">@</span><span class="kw2">staticmethod</span> 
    <span class="kw1">def</span> name<span class="br0">&#40;</span><span class="br0">&#41;</span>:
        <span class="kw1">return</span> FibonacciAdvanced._name
&nbsp;
<span class="st0">'''
    This is a base class with inherited classes
'''</span>
&nbsp;
<span class="kw1">class</span> Sequence<span class="br0">&#40;</span><span class="kw2">object</span><span class="br0">&#41;</span>:
&nbsp;
    <span class="kw1">def</span> <span class="kw4">__init__</span><span class="br0">&#40;</span><span class="kw2">self</span><span class="sy0">,</span> a<span class="sy0">,</span> b<span class="sy0">,</span> n<span class="sy0">=</span><span class="nu0">2000</span><span class="br0">&#41;</span>:
        <span class="kw2">self</span>._f <span class="sy0">=</span> <span class="br0">&#91;</span><span class="br0">&#93;</span>
        <span class="kw1">while</span> b<span class="sy0">&lt;</span>n:
            <span class="kw2">self</span>._f.<span class="me1">append</span><span class="br0">&#40;</span>a<span class="br0">&#41;</span>
            a<span class="sy0">,</span> b <span class="sy0">=</span> b<span class="sy0">,</span> a+b
&nbsp;
    <span class="kw1">def</span> <span class="kw2">list</span><span class="br0">&#40;</span><span class="kw2">self</span><span class="br0">&#41;</span>:
        <span class="kw1">print</span> <span class="kw2">self</span>._f
&nbsp;
    <span class="kw1">def</span> get<span class="br0">&#40;</span><span class="kw2">self</span><span class="sy0">,</span>index<span class="sy0">=</span><span class="nu0">0</span><span class="br0">&#41;</span>:
        <span class="kw1">print</span> <span class="kw2">self</span>._f<span class="br0">&#91;</span>index<span class="br0">&#93;</span>
&nbsp;
    <span class="kw1">def</span> <span class="kw2">slice</span><span class="br0">&#40;</span><span class="kw2">self</span><span class="sy0">,</span>start<span class="sy0">=</span><span class="nu0">0</span><span class="sy0">,</span>end<span class="sy0">=</span>-<span class="nu0">1</span><span class="br0">&#41;</span>:
        <span class="kw1">print</span> <span class="kw2">self</span>._f<span class="br0">&#91;</span>start:end<span class="br0">&#93;</span>
&nbsp;
<span class="kw1">class</span> Fibonacci<span class="br0">&#40;</span>Sequence<span class="br0">&#41;</span>:
&nbsp;
    <span class="kw1">def</span> <span class="kw4">__init__</span><span class="br0">&#40;</span><span class="kw2">self</span><span class="sy0">,</span> n<span class="sy0">=</span><span class="nu0">2000</span><span class="br0">&#41;</span>:
        Sequence.<span class="kw4">__init__</span><span class="br0">&#40;</span><span class="kw2">self</span><span class="sy0">,</span><span class="nu0">0</span><span class="sy0">,</span><span class="nu0">1</span><span class="sy0">,</span>n<span class="br0">&#41;</span>
&nbsp;
<span class="kw1">class</span> Lucas<span class="br0">&#40;</span>Sequence<span class="br0">&#41;</span>:
&nbsp;
    <span class="kw1">def</span> <span class="kw4">__init__</span><span class="br0">&#40;</span><span class="kw2">self</span><span class="sy0">,</span> n<span class="sy0">=</span><span class="nu0">2000</span><span class="br0">&#41;</span>:
        Sequence.<span class="kw4">__init__</span><span class="br0">&#40;</span><span class="kw2">self</span><span class="sy0">,</span><span class="nu0">2</span><span class="sy0">,</span><span class="nu0">1</span><span class="sy0">,</span>n<span class="br0">&#41;</span>
&nbsp;
<span class="kw1">class</span> FibonacciSuper<span class="br0">&#40;</span>Sequence<span class="br0">&#41;</span>:
    <span class="kw1">def</span> <span class="kw4">__init__</span><span class="br0">&#40;</span><span class="kw2">self</span><span class="sy0">,</span> n<span class="sy0">=</span><span class="nu0">2000</span><span class="br0">&#41;</span>:
        <span class="kw2">super</span><span class="br0">&#40;</span>FibonacciSuper<span class="sy0">,</span><span class="kw2">self</span><span class="br0">&#41;</span>.<span class="kw4">__init__</span><span class="br0">&#40;</span><span class="nu0">2</span><span class="sy0">,</span><span class="nu0">1</span><span class="sy0">,</span>n<span class="br0">&#41;</span>
        <span class="st0">'''
        super(self.__class__,self).__init__(2,1,n)      # An alternative way in 2.7
        Sequence.__init__(self,2,1,n)                   # Another alternative
        super().__init__(2,1,n)     # The 3.0 way...
        '''</span>
&nbsp;
<span class="co1">#</span>
<span class="co1"># ... and all together</span>
<span class="co1">#</span>
&nbsp;
<span class="kw1">if</span> __name__ <span class="sy0">==</span> <span class="st0">&quot;__main__&quot;</span>:
    u <span class="sy0">=</span> FibonacciAdvanced<span class="br0">&#40;</span><span class="nu0">10000</span><span class="br0">&#41;</span>
    s <span class="sy0">=</span> Fibonacci<span class="br0">&#40;</span><span class="nu0">10000</span><span class="br0">&#41;</span>
    t <span class="sy0">=</span> Lucas<span class="br0">&#40;</span><span class="nu0">100000</span><span class="br0">&#41;</span>
    v <span class="sy0">=</span> FibonacciSuper<span class="br0">&#40;</span><span class="nu0">1000000000000000000</span><span class="br0">&#41;</span>
&nbsp;
    u.<span class="kw2">list</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
    <span class="kw1">print</span> <span class="st0">'This is a static method call: '</span> + FibonacciAdvanced.<span class="me1">name</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp;
    s.<span class="kw2">list</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
    s.<span class="me1">get</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
    s.<span class="me1">get</span><span class="br0">&#40;</span><span class="nu0">11</span><span class="br0">&#41;</span>
    s.<span class="kw2">slice</span><span class="br0">&#40;</span><span class="nu0">11</span><span class="sy0">,</span><span class="nu0">15</span><span class="br0">&#41;</span>
&nbsp;
    t.<span class="kw2">list</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
    t.<span class="me1">get</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
    t.<span class="me1">get</span><span class="br0">&#40;</span><span class="nu0">11</span><span class="br0">&#41;</span>
    t.<span class="kw2">slice</span><span class="br0">&#40;</span><span class="nu0">11</span><span class="sy0">,</span><span class="nu0">15</span><span class="br0">&#41;</span>
&nbsp;
    v.<span class="kw2">list</span><span class="br0">&#40;</span><span class="br0">&#41;</span></pre>
</dd></dl><hr />

<p>
Add-on files are available here:
</p>
<pre class="code">https://www.dropbox.com/sh/h3xoj8r6kra2n2n/AADQIKjmwaqzG-qB94TErvbAa?dl=0</pre>

<p>
Some useful stuff:
</p>

<p>
<a href="/dokuwiki/lib/exe/fetch.php?media=wiki:python:hancock.zip" class="media mediafile mf_zip" title="wiki:python:hancock.zip (17.1 KB)">hancock.zip</a>
</p>

<p>
<a href="https://github.com/googlemaps/kml-samples/blob/gh-pages/kml/time/time-stamp-point.kml" class="urlextern" target="blanc" title="https://github.com/googlemaps/kml-samples/blob/gh-pages/kml/time/time-stamp-point.kml" rel="nofollow noopener">KML sample by Google</a>
</p>

<p>
<a href="https://en.wikipedia.org/wiki/GeoJSON" class="urlextern" target="blanc" title="https://en.wikipedia.org/wiki/GeoJSON" rel="nofollow noopener">GeoJSON example</a>
</p>
<pre class="code">{
  &quot;type&quot;: &quot;Feature&quot;,
  &quot;id&quot;: &quot;OpenLayers.Feature.Vector_314&quot;,
  &quot;properties&quot;: {},
  &quot;geometry&quot;: {
  &quot;type&quot;: &quot;Point&quot;,
  &quot;coordinates&quot;: [
       97.03125,
       39.7265625 ]
  },
  &quot;crs&quot;: {
    &quot;type&quot;: &quot;name&quot;,
    &quot;properties&quot;: {
       &quot;name&quot;: &quot;urn:ogc:def:crs:OGC:1.3:CRS84&quot;
    }
  }
}</pre>

</div>
