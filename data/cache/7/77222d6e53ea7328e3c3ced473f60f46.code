    <span class="st0">'''
        FibonacciAdvanced, the OOP approach
    '''</span>
    <span class="kw1">class</span> FibonacciAdvanced:
        <span class="st0">''' 
        This is a class with a static member and 
        a static method
        '''</span>
&nbsp;
        <span class="co1"># static member</span>
        _name <span class="sy0">=</span> <span class="st0">'Fibonacci series advanced class'</span> 
&nbsp;
        <span class="kw1">def</span> <span class="kw4">__init__</span><span class="br0">&#40;</span><span class="kw2">self</span><span class="sy0">,</span> n<span class="sy0">=</span><span class="nu0">2000</span><span class="br0">&#41;</span>:
            <span class="kw2">self</span>._f <span class="sy0">=</span> <span class="br0">&#91;</span><span class="br0">&#93;</span>
            a<span class="sy0">,</span> b <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">,</span> <span class="nu0">1</span>
            <span class="kw1">while</span> b<span class="sy0">&lt;</span>n:
                <span class="kw2">self</span>._f.<span class="me1">append</span><span class="br0">&#40;</span>a<span class="br0">&#41;</span>
                a<span class="sy0">,</span> b <span class="sy0">=</span> b<span class="sy0">,</span> a+b
&nbsp;
        <span class="kw1">def</span> <span class="kw2">list</span><span class="br0">&#40;</span><span class="kw2">self</span><span class="br0">&#41;</span>:
            <span class="kw1">print</span> <span class="kw2">self</span>._f
&nbsp;
        <span class="kw1">def</span> get<span class="br0">&#40;</span><span class="kw2">self</span><span class="sy0">,</span>index<span class="sy0">=</span><span class="nu0">0</span><span class="br0">&#41;</span>:
            <span class="kw1">print</span> <span class="kw2">self</span>._f<span class="br0">&#91;</span>index<span class="br0">&#93;</span>
&nbsp;
        <span class="kw1">def</span> <span class="kw2">slice</span><span class="br0">&#40;</span><span class="kw2">self</span><span class="sy0">,</span>start<span class="sy0">=</span><span class="nu0">0</span><span class="sy0">,</span>end<span class="sy0">=</span>-<span class="nu0">1</span><span class="br0">&#41;</span>:
            <span class="kw1">print</span> <span class="kw2">self</span>._f<span class="br0">&#91;</span>start:end<span class="br0">&#93;</span>
&nbsp;
        <span class="co1"># static method with mandatory decorator</span>
        <span class="sy0">@</span><span class="kw2">staticmethod</span> 
        <span class="kw1">def</span> name<span class="br0">&#40;</span><span class="br0">&#41;</span>:
            <span class="kw1">return</span> FibonacciAdvanced._name
&nbsp;
    <span class="st0">'''
        This is a base class with inherited classes
    '''</span>
&nbsp;
    <span class="kw1">class</span> Sequence<span class="br0">&#40;</span><span class="kw2">object</span><span class="br0">&#41;</span>:
&nbsp;
        <span class="kw1">def</span> <span class="kw4">__init__</span><span class="br0">&#40;</span><span class="kw2">self</span><span class="sy0">,</span> a<span class="sy0">,</span> b<span class="sy0">,</span> n<span class="sy0">=</span><span class="nu0">2000</span><span class="br0">&#41;</span>:
            <span class="kw2">self</span>._f <span class="sy0">=</span> <span class="br0">&#91;</span><span class="br0">&#93;</span>
            <span class="kw1">while</span> b<span class="sy0">&lt;</span>n:
                <span class="kw2">self</span>._f.<span class="me1">append</span><span class="br0">&#40;</span>a<span class="br0">&#41;</span>
                a<span class="sy0">,</span> b <span class="sy0">=</span> b<span class="sy0">,</span> a+b
&nbsp;
        <span class="kw1">def</span> <span class="kw2">list</span><span class="br0">&#40;</span><span class="kw2">self</span><span class="br0">&#41;</span>:
            <span class="kw1">print</span> <span class="kw2">self</span>._f
&nbsp;
        <span class="kw1">def</span> get<span class="br0">&#40;</span><span class="kw2">self</span><span class="sy0">,</span>index<span class="sy0">=</span><span class="nu0">0</span><span class="br0">&#41;</span>:
            <span class="kw1">print</span> <span class="kw2">self</span>._f<span class="br0">&#91;</span>index<span class="br0">&#93;</span>
&nbsp;
        <span class="kw1">def</span> <span class="kw2">slice</span><span class="br0">&#40;</span><span class="kw2">self</span><span class="sy0">,</span>start<span class="sy0">=</span><span class="nu0">0</span><span class="sy0">,</span>end<span class="sy0">=</span>-<span class="nu0">1</span><span class="br0">&#41;</span>:
            <span class="kw1">print</span> <span class="kw2">self</span>._f<span class="br0">&#91;</span>start:end<span class="br0">&#93;</span>
&nbsp;
    <span class="kw1">class</span> Fibonacci<span class="br0">&#40;</span>Sequence<span class="br0">&#41;</span>:
&nbsp;
        <span class="kw1">def</span> <span class="kw4">__init__</span><span class="br0">&#40;</span><span class="kw2">self</span><span class="sy0">,</span> n<span class="sy0">=</span><span class="nu0">2000</span><span class="br0">&#41;</span>:
            Sequence.<span class="kw4">__init__</span><span class="br0">&#40;</span><span class="kw2">self</span><span class="sy0">,</span><span class="nu0">0</span><span class="sy0">,</span><span class="nu0">1</span><span class="sy0">,</span>n<span class="br0">&#41;</span>
&nbsp;
    <span class="kw1">class</span> Lucas<span class="br0">&#40;</span>Sequence<span class="br0">&#41;</span>:
&nbsp;
        <span class="kw1">def</span> <span class="kw4">__init__</span><span class="br0">&#40;</span><span class="kw2">self</span><span class="sy0">,</span> n<span class="sy0">=</span><span class="nu0">2000</span><span class="br0">&#41;</span>:
            Sequence.<span class="kw4">__init__</span><span class="br0">&#40;</span><span class="kw2">self</span><span class="sy0">,</span><span class="nu0">2</span><span class="sy0">,</span><span class="nu0">1</span><span class="sy0">,</span>n<span class="br0">&#41;</span>
&nbsp;
    <span class="kw1">class</span> FibonacciSuper<span class="br0">&#40;</span>Sequence<span class="br0">&#41;</span>:
        <span class="kw1">def</span> <span class="kw4">__init__</span><span class="br0">&#40;</span><span class="kw2">self</span><span class="sy0">,</span> n<span class="sy0">=</span><span class="nu0">2000</span><span class="br0">&#41;</span>:
            <span class="kw2">super</span><span class="br0">&#40;</span>FibonacciSuper<span class="sy0">,</span><span class="kw2">self</span><span class="br0">&#41;</span>.<span class="kw4">__init__</span><span class="br0">&#40;</span><span class="nu0">2</span><span class="sy0">,</span><span class="nu0">1</span><span class="sy0">,</span>n<span class="br0">&#41;</span>
            <span class="st0">'''
            super(self.__class__,self).__init__(2,1,n)      # An alternative way in 2.7
            Sequence.__init__(self,2,1,n)                   # Another alternative
            super().__init__(2,1,n)     # The 3.0 way...
            '''</span>
&nbsp;
    <span class="co1">#</span>
    <span class="co1"># ... and all together</span>
    <span class="co1">#</span>
&nbsp;
    <span class="kw1">if</span> __name__ <span class="sy0">==</span> <span class="st0">&quot;__main__&quot;</span>:
        u <span class="sy0">=</span> FibonacciAdvanced<span class="br0">&#40;</span><span class="nu0">10000</span><span class="br0">&#41;</span>
        s <span class="sy0">=</span> Fibonacci<span class="br0">&#40;</span><span class="nu0">10000</span><span class="br0">&#41;</span>
        t <span class="sy0">=</span> Lucas<span class="br0">&#40;</span><span class="nu0">100000</span><span class="br0">&#41;</span>
        v <span class="sy0">=</span> FibonacciSuper<span class="br0">&#40;</span><span class="nu0">1000000000000000000</span><span class="br0">&#41;</span>
&nbsp;
        u.<span class="kw2">list</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
        <span class="kw1">print</span> <span class="st0">'This is a static method call: '</span> + FibonacciAdvanced.<span class="me1">name</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp;
        s.<span class="kw2">list</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
        s.<span class="me1">get</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
        s.<span class="me1">get</span><span class="br0">&#40;</span><span class="nu0">11</span><span class="br0">&#41;</span>
        s.<span class="kw2">slice</span><span class="br0">&#40;</span><span class="nu0">11</span><span class="sy0">,</span><span class="nu0">15</span><span class="br0">&#41;</span>
&nbsp;
        t.<span class="kw2">list</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
        t.<span class="me1">get</span><span class="br0">&#40;</span><span class="br0">&#41;</span>
        t.<span class="me1">get</span><span class="br0">&#40;</span><span class="nu0">11</span><span class="br0">&#41;</span>
        t.<span class="kw2">slice</span><span class="br0">&#40;</span><span class="nu0">11</span><span class="sy0">,</span><span class="nu0">15</span><span class="br0">&#41;</span>
&nbsp;
        v.<span class="kw2">list</span><span class="br0">&#40;</span><span class="br0">&#41;</span>