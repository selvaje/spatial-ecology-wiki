    <span class="st0">'''
    Now use a class instead of a procedural module
    '''</span>
    <span class="kw1">import</span> <span class="kw3">sys</span>
    <span class="kw1">from</span> FibonacciBasic <span class="kw1">import</span> Fibonacci <span class="kw1">as</span> f
&nbsp;
    <span class="kw1">def</span> usage<span class="br0">&#40;</span><span class="br0">&#41;</span>:
        <span class="kw1">print</span> <span class="st0">'''<span class="es0">\</span>
    usage: %s int <span class="es0">\</span>
    '''</span> % <span class="kw3">sys</span>.<span class="me1">argv</span><span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span>
        <span class="kw3">sys</span>.<span class="me1">exit</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span>
&nbsp;
    <span class="kw1">if</span> <span class="kw2">len</span><span class="br0">&#40;</span><span class="kw3">sys</span>.<span class="me1">argv</span><span class="br0">&#41;</span> <span class="sy0">&lt;</span> <span class="nu0">2</span>:
        usage<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp;
    <span class="kw1">try</span>:
        n <span class="sy0">=</span> <span class="kw2">int</span><span class="br0">&#40;</span><span class="kw3">sys</span>.<span class="me1">argv</span><span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span><span class="br0">&#41;</span>
    <span class="kw1">except</span>:
        usage<span class="br0">&#40;</span><span class="br0">&#41;</span>
&nbsp;
    s <span class="sy0">=</span> f<span class="br0">&#40;</span>n<span class="br0">&#41;</span>
    s.<span class="kw2">list</span><span class="br0">&#40;</span><span class="br0">&#41;</span>