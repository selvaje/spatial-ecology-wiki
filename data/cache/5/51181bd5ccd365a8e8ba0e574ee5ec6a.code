install.packages(&quot;dismo&quot;)
install.packages(&quot;XML&quot;)
install.packages(&quot;maptools&quot;)
install.packages(&quot;rgeos&quot;)
install.packages(&quot;rasterVis&quot;)
&nbsp;
library(raster)
library (dismo)
library (XML)
library (rgeos)
library (maptools)
library(sp)
library(rasterVis)
library(rgdal)
library(rJava)
&nbsp;
# search where you OS save the R libray use the .libPaths() 
# in MAC should be /Library/Frameworks/R.framework/Resources/library 
# copy the maxent.jar under R/x86_64-pc-linux-gnu-library/3.3/dismo/java/ 
&nbsp;
##################################
# create a directory
dir.create(&quot;~/Solitary_Tinamou/&quot;)
setwd(&quot;~/Solitary_Tinamou/&quot;)
&nbsp;
############################
&nbsp;
## download point data of occurrences from the Global Biodiversity Information Facility (GBIF) dataset 
&nbsp;
gbif_points = gbif('Tinamus' , 'solitarius' , download=T , geo=T)
gbif_points=gbif_points[!is.na(gbif_points$lat),]
&nbsp;
## get e-bird lat_long_ebd.txt file and save in the ~/Solitary_Tinamou/
&nbsp;
download.file(&quot;https://raw.githubusercontent.com/selvaje/spatial-ecology-codes/master/wiki/maxent/lat_long_ebd.txt&quot;, &quot;~/Solitary_Tinamou/lat_long_ebd.txt&quot;)
ebird = read.table(&quot;~/Solitary_Tinamou/lat_long_ebd.txt&quot; ,header = TRUE  )
&nbsp;
#### import a presence dataset from parks
&nbsp;
download.file(&quot;https://raw.githubusercontent.com/selvaje/spatial-ecology-codes/master/wiki/maxent/Tinamus_solitarius_rowids1.asc&quot; , &quot;~/Solitary_Tinamou/Tinamus_solitarius_rowids1.asc&quot;)
parks = read.table (&quot;~/Solitary_Tinamou/Tinamus_solitarius_rowids1.asc&quot; , header = TRUE  )
&nbsp;
#### import expert range
&nbsp;
download.file(&quot;https://raw.githubusercontent.com/selvaje/spatial-ecology-codes/master/wiki/maxent/iucn_birds_proj.dbf&quot; ,
              &quot;~/Solitary_Tinamou/iucn_birds_proj.dbf&quot;)
download.file(&quot;https://raw.githubusercontent.com/selvaje/spatial-ecology-codes/master/wiki/maxent/iucn_birds_proj.prj&quot; , 
              &quot;~/Solitary_Tinamou/iucn_birds_proj.prj&quot;)
download.file(&quot;https://raw.githubusercontent.com/selvaje/spatial-ecology-codes/master/wiki/maxent/iucn_birds_proj.shp&quot; ,  &quot;~/Solitary_Tinamou/iucn_birds_proj.shp&quot;)
download.file(&quot;https://raw.githubusercontent.com/selvaje/spatial-ecology-codes/master/wiki/maxent/iucn_birds_proj.shx&quot; , 
              &quot;~/Solitary_Tinamou/iucn_birds_proj.shx&quot;)
&nbsp;
#  pay attention to change this directory /home/selv/ with yours 
tin_range=readOGR(&quot;/home/selv/Solitary_Tinamou/iucn_birds_proj.shp&quot;,&quot;iucn_birds_proj&quot;)
tin_range=spTransform(tin_range,CRS(&quot;+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs&quot;))
&nbsp;
## Build a combined dataset (with source, presence and coordinates)
points=rbind.data.frame(
  data.frame(src=&quot;gbif&quot;,obs=1,lat=gbif_points$lat,lon=gbif_points$lon),
  data.frame(src=&quot;ebird&quot;,obs=1,lat=ebird$LATITUDE,lon=ebird$LONGITUDE),
  data.frame(src=&quot;parks&quot;,obs=parks$presence,lat=parks$st_y,lon=parks$st_x)  
)
&nbsp;
## turn it into a spatial dataframe and define projection
coordinates(points)=c('lon','lat')
projection(points)=&quot;+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs&quot;
&nbsp;
## Create a combined src_presence field for easy plotting
points$type=paste(points$src,points$obs,sep=&quot;_&quot;)
&nbsp;
##import a world country boundary to ground the map
&nbsp;
download.file(&quot;https://raw.githubusercontent.com/selvaje/spatial-ecology-codes/master/wiki/maxent/world_country_admin_boundary_shapefile_with_fips_codes.dbf&quot; ,
              &quot;~/Solitary_Tinamou/world_country_admin_boundary_shapefile_with_fips_codes.dbf&quot;)
download.file(&quot;https://raw.githubusercontent.com/selvaje/spatial-ecology-codes/master/wiki/maxent/world_country_admin_boundary_shapefile_with_fips_codes.shp&quot; ,
              &quot;~/Solitary_Tinamou/world_country_admin_boundary_shapefile_with_fips_codes.shp&quot;)
download.file(&quot;https://raw.githubusercontent.com/selvaje/spatial-ecology-codes/master/wiki/maxent/world_country_admin_boundary_shapefile_with_fips_codes.shx&quot; ,
              &quot;~/Solitary_Tinamou/world_country_admin_boundary_shapefile_with_fips_codes.shx&quot;)
&nbsp;
World  = readShapePoly (&quot;~/Solitary_Tinamou/world_country_admin_boundary_shapefile_with_fips_codes.shp&quot;)
projection(World)=&quot;+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs&quot;
&nbsp;
## check out the data
spplot(points,zcol=&quot;type&quot;,pch=1:5,col.regions=c(&quot;red&quot;,&quot;red&quot;,&quot;black&quot;,&quot;red&quot;,&quot;black&quot;))+
  layer(sp.polygons( World) ,xlim=c(-100 , -10) , ylim=c(-30,0) ) ;
&nbsp;
### uh oh, there are some records out in the ocean (typical GBIF!)
### There are several ways to handle this, one is to clip by the 'expert' range of the species.
&nbsp;
## plot it again with the range
spplot(points,zcol=&quot;type&quot;,pch=1:5,col.regions=c(&quot;red&quot;,&quot;red&quot;,&quot;black&quot;,&quot;red&quot;,&quot;black&quot;))+
  layer(sp.polygons( World))+
  layer(sp.polygons(tin_range,fill=&quot;grey&quot;),under=T)
&nbsp;
## So there are a few points just outside the range, but those in the ocean are most likely wrong.  
## Let's add the distance to the range polygon as a way to filter the observations:
## First we need a equidistant projection to do the calculation
dproj=CRS(&quot;+proj=eqc +lat_ts=0 +lat_0=0 +lon_0=0 +x_0=0 +y_0=0 +a=6371007 +b=6371007 +units=m +no_defs&quot;) 
points$dist=gDistance(spTransform(points,dproj),spTransform(tin_range,dproj),byid=T)[1,]
## that adds 'distance' (in meters) from each point to the polygon, check out the values:
hist(points$dist/1000,xlab=&quot;km to expert range&quot;)
## so some points are &gt; 2000km from the range, let's drop any more than 10km
points=points[points$dist&lt;10000,]
&nbsp;
## plot it again with the range
spplot(points,zcol=&quot;type&quot;,pch=1:5,col.regions=c(&quot;red&quot;,&quot;red&quot;,&quot;black&quot;,&quot;red&quot;,&quot;black&quot;))+
  layer(sp.polygons( World))+
  layer(sp.polygons(tin_range,fill=&quot;grey&quot;),under=T)
## that looks better.
&nbsp;
&nbsp;
################################################################################
## Import some evironmental data (Climate &amp; NPP) and align it to a common grid
&nbsp;
### download CHELSA data http://chelsa-climate.org/ 
&nbsp;
download.file(&quot;https://www.wsl.ch/lud/chelsa/data/bioclim/integer/CHELSA_bio10_12_land.7z&quot; , &quot;~/Solitary_Tinamou/CHELSA_bio10_12_land.7z&quot; )
download.file(&quot;https://www.wsl.ch/lud/chelsa/data/bioclim/integer/CHELSA_bio10_01_land.7z&quot; , &quot;~/Solitary_Tinamou/CHELSA_bio10_01_land.7z&quot; )
&nbsp;
system(&quot;7z e  CHELSA_bio10_12_land.7z&quot;)
system(&quot;7z e  CHELSA_bio10_01_land.7z&quot;)
&nbsp;
prec.glob = raster(&quot;CHELSA_bio10_12.tif&quot;)  ; NAvalue(prec.glob) &lt;- -32768
temp.glob = raster(&quot;CHELSA_bio10_1.tif&quot;)   ; NAvalue(temp.glob) &lt;- -32768
&nbsp;
# set the extend 
ext.glob &lt;- extent (-180,180,-90,84)
&nbsp;
setExtent (prec.glob , ext.glob)
setExtent (temp.glob , ext.glob)
&nbsp;
# crop and reset the extend 
ext.crop &lt;- extent (-60,-30,-30,0)
prec = crop(prec.glob , ext.crop) ; setExtent (prec , ext.crop)
temp = crop(temp.glob , ext.crop) ; setExtent (temp , ext.crop)
&nbsp;
&nbsp;
### download landcover data http://www.earthenv.org/landcover 
download.file(&quot;http://data.earthenv.org/consensus_landcover/with_DISCover/consensus_full_class_1.tif&quot; , &quot;~/Solitary_Tinamou/consensus_full_class_1.tif&quot;)  
download.file(&quot;http://data.earthenv.org/consensus_landcover/with_DISCover/consensus_full_class_2.tif&quot; , &quot;~/Solitary_Tinamou/consensus_full_class_2.tif&quot;)  
download.file(&quot;http://data.earthenv.org/consensus_landcover/with_DISCover/consensus_full_class_3.tif&quot; , &quot;~/Solitary_Tinamou/consensus_full_class_3.tif&quot;)  
download.file(&quot;http://data.earthenv.org/consensus_landcover/with_DISCover/consensus_full_class_4.tif&quot; , &quot;~/Solitary_Tinamou/consensus_full_class_4.tif&quot;)  
&nbsp;
forest1.glob = raster(&quot;consensus_full_class_1.tif&quot;)
forest2.glob = raster(&quot;consensus_full_class_2.tif&quot;)
forest3.glob = raster(&quot;consensus_full_class_3.tif&quot;)
forest4.glob = raster(&quot;consensus_full_class_4.tif&quot;)
&nbsp;
forest1 = crop(forest1, ext.crop)
forest2 = crop(forest2, ext.crop)
forest3 = crop(forest3, ext.crop)
forest4 = crop(forest4, ext.crop)
&nbsp;
## get total % forest
forest= sum (forest1 + forest2 + forest1 + forest3) 
names(forest)=&quot;forest&quot;
names(temp)=&quot;temp&quot;
names(prec)=&quot;prec&quot;
&nbsp;
env=stack( forest , prec , temp  )
##  List all available environmental data
names(env)
&nbsp;
## See how the points compare to temperature
var=&quot;temp&quot;
  levelplot(env[[var]],col.regions=terrain.colors(20),margin=F)+
  layer(sp.polygons(tin_range))+
  layer(sp.points(points[points$obs==1,],col=&quot;red&quot;))    #add presences
&nbsp;
## variable selection is tricky business and we're not going to dwell on it here...  
plot(env)
&nbsp;
## add the environmental data to each point
pointsd=extract(env,points,sp=T)
&nbsp;
## now check out some bivariate plots
## feel free to explore other variables
&nbsp;
xyplot(forest~prec,groups=type,data=pointsd@data,auto.key=T)+
  layer(panel.ellipse(x,y,groups=pointsd$type,subscripts=T,level=.68))
&nbsp;
xyplot(forest~temp,groups=type,data=pointsd@data,auto.key=T)+
  layer(panel.ellipse(x,y,groups=pointsd$type,subscripts=T,level=.68))
&nbsp;
xyplot(forest~temp,groups=type,data=pointsd@data,auto.key=T)+
  layer(panel.ellipse(x,y,groups=pointsd$type,subscripts=T,level=.68))
&nbsp;
## Fit a very simple MAXENT model using a selection of predictors 
&nbsp;
maxmod = maxent(env,points)
&nbsp;
## Show the model summary
maxmod
&nbsp;
## Use the model to predict p(presence) for all sites
max_pred = predict(maxmod , env)
&nbsp;
## Plot the predictions
levelplot(max_pred,col.regions=rainbow(20,start=.2,end=.9),margin=F)+
  layer(sp.polygons(tin_range,lwd=2))+
  layer(sp.points(points[points$obs==1,],col=&quot;red&quot;,cex=1,lwd=1))    #add presences